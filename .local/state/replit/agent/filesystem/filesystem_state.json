{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# RentFlow - Rental Management System\n\n## Overview\n\nRentFlow is a comprehensive rental management platform that provides both admin dashboard capabilities and customer portal functionality. The system handles the complete rental lifecycle including product catalog management, booking workflows, payment processing via Stripe, and order tracking. It's built as a full-stack TypeScript application with a React frontend and Express backend, designed to streamline rental operations for businesses while providing an intuitive customer experience.\n\n**Recent Enhancements (Jan 2025):**\n- **Real-time Availability System**: Live product availability updates every 30 seconds\n- **Quick Rent Widget**: Instant booking from catalog with date selection and pricing\n- **Enhanced User Experience**: Modern hero sections, live status badges, and hover interactions\n- **Complete Billing System**: Automated email confirmations, rental tickets, and payment receipts\n- **4-Digit OTP Verification**: Two-factor authentication for login and signup sessions with enhanced email notifications\n- **Email Notification System**: Beautiful console-based email notifications with clear OTP delivery (no external APIs required)\n- **Mobile App Companion**: Push notification system for real-time user engagement with device management and notification history\n- **Stripe Integration Removed**: Simplified payment system without external processors\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nLatest request: Make rental shop user-friendly and easy to rent anything with real-time updates and live features.\n\n## System Architecture\n\n### Frontend Architecture\nThe client-side application is built with React and TypeScript, utilizing a component-based architecture with the following key patterns:\n\n- **UI Component Library**: Uses shadcn/ui with Radix UI primitives for a consistent design system\n- **Styling**: Tailwind CSS with CSS custom properties for theming and responsive design\n- **State Management**: TanStack Query for server state management with custom query client configuration\n- **Routing**: Wouter for lightweight client-side routing with role-based access control\n- **Forms**: React Hook Form with Zod validation schemas for type-safe form handling\n- **Layout System**: Separate layout components for admin and customer interfaces\n\n### Backend Architecture\nThe server follows a clean Express.js architecture with the following structure:\n\n- **API Layer**: RESTful endpoints organized in a centralized routes module\n- **Data Access**: Storage abstraction layer implementing a repository pattern\n- **Database**: Drizzle ORM with PostgreSQL for type-safe database operations\n- **Authentication**: Replit Auth integration with session-based authentication\n- **Payment Processing**: Stripe integration for handling payment workflows\n\n### Database Design\nUses PostgreSQL with Drizzle ORM featuring:\n\n- **Schema Definition**: Centralized schema with proper relationships and constraints\n- **Type Safety**: Full TypeScript integration with inferred types from schema\n- **Enums**: PostgreSQL enums for order status, payment status, and user roles\n- **Session Storage**: Dedicated sessions table for authentication persistence\n\n### Authentication & Authorization\nImplements Replit Auth with the following features:\n\n- **OIDC Integration**: OpenID Connect flow for secure authentication\n- **Session Management**: PostgreSQL-backed session storage with TTL\n- **Role-Based Access**: Admin and customer role separation with protected routes\n- **Middleware**: Authentication middleware for API endpoint protection\n\n### Mobile App Companion\nPush notification system provides:\n\n- **Device Registration**: Multi-platform support (iOS, Android, Web) with device token management\n- **Real-time Notifications**: Push notifications for OTP verification, booking confirmations, payment reminders, and order updates\n- **Notification History**: Persistent storage and retrieval of notification history with read/unread status\n- **Admin Integration**: Testing tools and device management through admin dashboard\n- **Seamless Integration**: Automatic push notifications alongside existing email notifications\n\n### Development Tooling\nThe project uses modern development practices:\n\n- **Build System**: Vite for fast development and optimized production builds\n- **TypeScript**: Strict type checking across the entire codebase\n- **Path Aliases**: Configured aliases for clean imports (@/, @shared/)\n- **Hot Reload**: Development server with HMR support\n- **Error Handling**: Runtime error overlays and comprehensive error boundaries\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React 18**: Frontend framework with modern hooks and concurrent features\n- **Express.js**: Backend web framework with middleware support\n- **TypeScript**: Type system for both frontend and backend code\n\n### Database & ORM\n- **PostgreSQL**: Primary database via Neon serverless\n- **Drizzle ORM**: Type-safe database toolkit with schema management\n- **connect-pg-simple**: PostgreSQL session store for Express sessions\n\n### UI & Styling\n- **Tailwind CSS**: Utility-first CSS framework\n- **Radix UI**: Headless UI primitives for accessible components\n- **shadcn/ui**: Pre-built component library built on Radix\n- **Lucide React**: Icon library for consistent iconography\n\n### State Management & Data Fetching\n- **TanStack Query**: Server state management with caching and synchronization\n- **React Hook Form**: Form library with validation support\n- **Zod**: Schema validation for runtime type checking\n\n### Authentication & Payments\n- **Replit Auth**: Authentication service with OIDC support\n- **Stripe**: Payment processing platform with React components\n- **Passport.js**: Authentication middleware for Express\n\n### Development & Build Tools\n- **Vite**: Build tool and development server\n- **ESBuild**: Fast bundler for production builds\n- **PostCSS**: CSS processing with Tailwind integration\n\n## Recent Storage Implementation Completion\n- ✅ **Completed incomplete storage methods** - All storage interface methods now have full database implementations\n- ✅ **Enhanced product availability checking** - Real-time availability calculation based on active orders\n- ✅ **Implemented comprehensive reporting** - Revenue, product performance, and customer analytics reports\n- ✅ **Added deposit management** - Full lifecycle management with refund/forfeit capabilities\n- ✅ **Created payment processing** - Complete payment tracking and status management\n- ✅ **Built validity period system** - Rental extension and fee management\n- ✅ **Implemented late fee handling** - Automatic calculation, waiving, and payment tracking\n- Fixed all TypeScript and database query compatibility issues\n- Application now runs without compilation errors","size_bytes":6838},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n          50: \"var(--primary-50)\",\n          100: \"var(--primary-100)\",\n          500: \"var(--primary-500)\",\n          600: \"var(--primary-600)\",\n          700: \"var(--primary-700)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n          50: \"var(--secondary-50)\",\n          500: \"var(--secondary-500)\",\n          600: \"var(--secondary-600)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n          500: \"var(--accent-500)\",\n          600: \"var(--accent-600)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: [\"Inter\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3176},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  }, claims[\"sub\"]);\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4213},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport passport from \"passport\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated, isAdmin, hashPassword } from \"./auth\";\nimport { sendEmail, generateOrderConfirmationEmail, generatePaymentReceiptEmail } from \"./email\";\nimport { registerMobileRoutes } from \"./mobileAPI\";\nimport { PushNotificationService } from \"./pushNotifications\";\nimport {\n  insertCategorySchema,\n  insertProductSchema,\n  insertOrderSchema,\n  insertOrderItemSchema,\n  insertNotificationSchema,\n  registerUserSchema,\n  loginUserSchema,\n  insertInvoiceSchema,\n  insertDepositSchema,\n  insertPaymentSchema,\n\n} from \"@shared/schema\";\n\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Register mobile API routes\n  registerMobileRoutes(app);\n\n  // Auth routes\n  app.post('/api/auth/register', async (req, res) => {\n    try {\n      const validatedData = registerUserSchema.parse(req.body);\n      const { confirmPassword, ...userData } = validatedData;\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists with this email\" });\n      }\n\n      // Hash password\n      const hashedPassword = await hashPassword(userData.password);\n      \n      // Create user\n      const user = await storage.createUser({\n        ...userData,\n        password: hashedPassword,\n        isVerified: true\n      });\n\n      // Remove password from response\n      const { password, ...userResponse } = user;\n      res.status(201).json({ \n        ...userResponse, \n        message: \"Registration successful. You can now log in.\"\n      });\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  app.post('/api/auth/login', (req, res, next) => {\n    try {\n      const validatedData = loginUserSchema.parse(req.body);\n      \n      passport.authenticate('local', (err: any, user: any, info: any) => {\n        if (err) {\n          return res.status(500).json({ message: \"Login error\" });\n        }\n        if (!user) {\n          return res.status(401).json({ message: info?.message || \"Invalid credentials\" });\n        }\n        \n        req.logIn(user, (err) => {\n          if (err) {\n            return res.status(500).json({ message: \"Login session error\" });\n          }\n          \n          // Remove password from response\n          const { password, ...userResponse } = user;\n          res.json({ \n            ...userResponse, \n            message: \"Login successful\"\n          });\n        });\n      })(req, res, next);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Login validation error\" });\n    }\n  });\n\n  // Handle GET requests to logout (redirect to proper POST method)\n  app.get('/api/auth/logout', (req, res) => {\n    res.status(405).json({ \n      message: \"Method not allowed. Use POST to /api/auth/logout to logout.\",\n      allowedMethods: [\"POST\"]\n    });\n  });\n\n  app.post('/api/auth/logout', (req, res) => {\n    req.logout((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Logout error\" });\n      }\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get('/api/auth/user', isAuthenticated, async (req, res) => {\n    try {\n      const user = req.user as any;\n      // Remove password from response\n      const { password, ...userResponse } = user;\n      res.json(userResponse);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n\n\n  // Legacy login route for compatibility\n  app.get('/api/login', (req, res) => {\n    res.redirect('/login');\n  });\n\n  // Admin route handler\n  app.get('/admin', (req, res) => {\n    res.redirect('/');\n  });\n\n  // Dashboard stats\n  app.get('/api/dashboard/stats', isAdmin, async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Category routes\n  app.get('/api/categories', async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.post('/api/categories', isAdmin, async (req: any, res) => {\n    try {\n      const validatedData = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(validatedData);\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error creating category:\", error);\n      res.status(500).json({ message: \"Failed to create category\" });\n    }\n  });\n\n  // Product routes\n  app.get('/api/products', async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      \n      let products;\n      if (startDate && endDate) {\n        products = await storage.getAvailableProducts(\n          new Date(startDate as string),\n          new Date(endDate as string)\n        );\n      } else {\n        products = await storage.getProducts();\n      }\n      \n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get('/api/products/:id', async (req, res) => {\n    try {\n      const product = await storage.getProduct(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error fetching product:\", error);\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  app.get('/api/products/:id/availability', async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const product = await storage.getProduct(req.params.id);\n      \n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n\n      // For now, return the product's current availability\n      // In a real system, this would check bookings against the date range\n      const availability = {\n        productId: product.id,\n        totalQuantity: product.totalQuantity,\n        availableQuantity: product.availableQuantity,\n        startDate: startDate || null,\n        endDate: endDate || null,\n        lastUpdated: new Date().toISOString()\n      };\n\n      res.json(availability);\n    } catch (error) {\n      console.error(\"Error fetching product availability:\", error);\n      res.status(500).json({ message: \"Failed to fetch availability\" });\n    }\n  });\n\n  app.post('/api/products', isAdmin, async (req: any, res) => {\n    try {\n      const validatedData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(validatedData);\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error creating product:\", error);\n      res.status(500).json({ message: \"Failed to create product\" });\n    }\n  });\n\n  app.put('/api/products/:id', isAdmin, async (req: any, res) => {\n    try {\n      const validatedData = insertProductSchema.partial().parse(req.body);\n      const product = await storage.updateProduct(req.params.id, validatedData);\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error updating product:\", error);\n      res.status(500).json({ message: \"Failed to update product\" });\n    }\n  });\n\n  app.delete('/api/products/:id', isAdmin, async (req: any, res) => {\n    try {\n      await storage.deleteProduct(req.params.id);\n      res.json({ message: \"Product deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting product:\", error);\n      res.status(500).json({ message: \"Failed to delete product\" });\n    }\n  });\n\n  // Order routes\n  app.get('/api/orders', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = req.user;\n      let orders;\n      \n      if (user?.role === 'admin') {\n        orders = await storage.getOrders();\n      } else {\n        orders = await storage.getOrders(user.id);\n      }\n      \n      res.json(orders);\n    } catch (error) {\n      console.error(\"Error fetching orders:\", error);\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  app.get('/api/orders/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const order = await storage.getOrder(req.params.id);\n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n\n      const user = await storage.getUserById(req.user.id);\n      if (user?.role !== 'admin' && order.customerId !== req.user.id) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      res.json(order);\n    } catch (error) {\n      console.error(\"Error fetching order:\", error);\n      res.status(500).json({ message: \"Failed to fetch order\" });\n    }\n  });\n\n  app.post('/api/orders', isAuthenticated, async (req: any, res) => {\n    try {\n      const orderNumber = await storage.generateOrderNumber();\n      \n      // Enhanced order data with customer details\n      const orderData = {\n        ...req.body,\n        orderNumber,\n        customerId: req.user.id,\n      };\n\n      // Store customer details if provided\n      if (req.body.customerDetails) {\n        orderData.customerDetails = req.body.customerDetails;\n        orderData.rentalPurpose = req.body.rentalPurpose;\n        orderData.specialRequirements = req.body.specialRequirements;\n      }\n      \n      const validatedData = insertOrderSchema.parse(orderData);\n      const order = await storage.createOrder(validatedData);\n      \n      // Add order items if provided\n      if (req.body.items && Array.isArray(req.body.items)) {\n        for (const item of req.body.items) {\n          const validatedItem = insertOrderItemSchema.parse({\n            ...item,\n            orderId: order.id,\n          });\n          await storage.addOrderItem(validatedItem);\n        }\n      }\n\n      // Send email confirmation if customer details provided\n      if (req.body.customerDetails?.email) {\n        try {\n          // Email confirmation logic would go here\n          console.log(`Order confirmation email would be sent to: ${req.body.customerDetails.email}`);\n        } catch (emailError) {\n          console.error(\"Email sending failed:\", emailError);\n        }\n      }\n      \n      res.json(order);\n    } catch (error) {\n      console.error(\"Error creating order:\", error);\n      res.status(500).json({ message: \"Failed to create order\" });\n    }\n  });\n\n  app.put('/api/orders/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const order = await storage.getOrder(req.params.id);\n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n\n      const user = await storage.getUserById(req.user.id);\n      if (user?.role !== 'admin' && order.customerId !== req.user.id) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const validatedData = insertOrderSchema.partial().parse(req.body);\n      const updatedOrder = await storage.updateOrder(req.params.id, validatedData);\n      res.json(updatedOrder);\n    } catch (error) {\n      console.error(\"Error updating order:\", error);\n      res.status(500).json({ message: \"Failed to update order\" });\n    }\n  });\n\n  // Notification routes\n  app.get('/api/notifications', isAuthenticated, async (req: any, res) => {\n    try {\n      const notifications = await storage.getNotifications(req.user.id);\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Error fetching notifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.post('/api/notifications/:id/read', isAuthenticated, async (req: any, res) => {\n    try {\n      await storage.markNotificationRead(req.params.id);\n      res.json({ message: \"Notification marked as read\" });\n    } catch (error) {\n      console.error(\"Error marking notification as read:\", error);\n      res.status(500).json({ message: \"Failed to mark notification as read\" });\n    }\n  });\n\n  // Payment processing - simple order confirmation without Stripe\n  app.post(\"/api/confirm-order\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { orderId } = req.body;\n      \n      if (!orderId) {\n        return res.status(400).json({ message: \"Order ID is required\" });\n      }\n\n      // Update order status to confirmed and paid\n      const updatedOrder = await storage.updateOrder(orderId, {\n        paymentStatus: 'paid',\n        status: 'confirmed',\n      });\n\n      res.json({ success: true, order: updatedOrder });\n    } catch (error: any) {\n      console.error(\"Error confirming order:\", error);\n      res.status(500).json({ message: \"Error confirming order: \" + error.message });\n    }\n  });\n\n\n\n  // Invoice management routes\n  app.get('/api/invoices', isAuthenticated, async (req: any, res) => {\n    try {\n      const customerId = req.user?.role === 'admin' ? undefined : req.user?.id;\n      const invoices = await storage.getInvoices(customerId);\n      res.json(invoices);\n    } catch (error) {\n      console.error(\"Error fetching invoices:\", error);\n      res.status(500).json({ message: \"Failed to fetch invoices\" });\n    }\n  });\n\n  app.get('/api/invoices/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const invoice = await storage.getInvoice(req.params.id);\n      if (!invoice) {\n        return res.status(404).json({ message: \"Invoice not found\" });\n      }\n      \n      if (req.user?.role !== 'admin' && invoice.customerId !== req.user?.id) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      res.json(invoice);\n    } catch (error) {\n      console.error(\"Error fetching invoice:\", error);\n      res.status(500).json({ message: \"Failed to fetch invoice\" });\n    }\n  });\n\n  app.post('/api/invoices/generate/:orderId', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const order = await storage.getOrder(req.params.orderId);\n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n\n      const existingInvoice = await storage.getInvoiceByOrder(req.params.orderId);\n      if (existingInvoice) {\n        return res.status(400).json({ message: \"Invoice already exists for this order\" });\n      }\n\n      const invoiceNumber = await storage.generateInvoiceNumber();\n      const dueDate = new Date();\n      dueDate.setDate(dueDate.getDate() + 30);\n\n      const invoice = await storage.createInvoice({\n        invoiceNumber,\n        orderId: order.id,\n        customerId: order.customerId,\n        dueDate,\n        subtotal: order.totalAmount,\n        taxAmount: '0',\n        totalAmount: order.totalAmount,\n        status: 'sent'\n      });\n\n      res.json(invoice);\n    } catch (error) {\n      console.error(\"Error generating invoice:\", error);\n      res.status(500).json({ message: \"Failed to generate invoice\" });\n    }\n  });\n\n  app.post('/api/invoices/:id/pay', isAuthenticated, async (req: any, res) => {\n    try {\n      const { amount, paymentType = 'partial' } = req.body;\n      const invoice = await storage.getInvoice(req.params.id);\n      \n      if (!invoice) {\n        return res.status(404).json({ message: \"Invoice not found\" });\n      }\n\n      if (req.user?.role !== 'admin' && invoice.customerId !== req.user?.id) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const paymentAmount = paymentType === 'full' ? Number(invoice.totalAmount) : amount;\n      \n      // Simple payment confirmation without Stripe\n      await storage.updateInvoice(invoice.id, {\n        paidAmount: paymentAmount.toString(),\n        status: paymentAmount >= Number(invoice.totalAmount) ? 'paid' : 'partial'\n      });\n\n      res.json({ \n        success: true,\n        amount: paymentAmount\n      });\n    } catch (error) {\n      console.error(\"Error processing payment for invoice:\", error);\n      res.status(500).json({ message: \"Failed to process payment\" });\n    }\n  });\n\n  // Deposit payment route - simplified without Stripe\n  app.post('/api/deposits/:orderId/pay', isAuthenticated, async (req, res) => {\n    try {\n      const order = await storage.getOrder(req.params.orderId);\n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n\n      const user = req.user as any;\n      if (user?.role !== 'admin' && order.customerId !== user?.id) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const depositAmount = order.securityDeposit || '0';\n      \n      // Simple confirmation - update order notes to indicate deposit paid\n      await storage.updateOrder(order.id, {\n        notes: (order.notes || '') + '\\nDeposit paid: ' + new Date().toISOString()\n      });\n\n      res.json({ \n        success: true,\n        amount: Number(depositAmount)\n      });\n    } catch (error) {\n      console.error(\"Error processing deposit payment:\", error);\n      res.status(500).json({ message: \"Failed to process deposit payment\" });\n    }\n  });\n\n  // Reports routes\n  app.get('/api/reports/revenue', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const start = startDate ? new Date(startDate as string) : new Date(new Date().getFullYear(), new Date().getMonth(), 1);\n      const end = endDate ? new Date(endDate as string) : new Date();\n      \n      const report = {\n        totalRevenue: 0,\n        rentalRevenue: 0,\n        depositRevenue: 0,\n        lateFeeRevenue: 0,\n        refundAmount: 0\n      };\n      res.json(report);\n    } catch (error) {\n      console.error(\"Error generating revenue report:\", error);\n      res.status(500).json({ message: \"Failed to generate revenue report\" });\n    }\n  });\n\n  app.get('/api/reports/products', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const report: any[] = [];\n      res.json(report);\n    } catch (error) {\n      console.error(\"Error generating product report:\", error);\n      res.status(500).json({ message: \"Failed to generate product report\" });\n    }\n  });\n\n  app.get('/api/reports/customers', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const report: any[] = [];\n      res.json(report);\n    } catch (error) {\n      console.error(\"Error generating customer report:\", error);\n      res.status(500).json({ message: \"Failed to generate customer report\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":19215},"server/storage.ts":{"content":"import {\n  users,\n  categories,\n  products,\n  orders,\n  orderItems,\n  notifications,\n  invoices,\n  deposits,\n  payments,\n  validityPeriods,\n  lateFees,\n\n  type User,\n  type UpsertUser,\n  type Category,\n  type InsertCategory,\n  type Product,\n  type InsertProduct,\n  type Order,\n  type InsertOrder,\n  type OrderItem,\n  type InsertOrderItem,\n  type Notification,\n  type InsertNotification,\n  type Invoice,\n  type InsertInvoice,\n  type Deposit,\n  type InsertDeposit,\n  type Payment,\n  type InsertPayment,\n  type ValidityPeriod,\n  type InsertValidityPeriod,\n  type LateFee,\n  type InsertLateFee,\n\n  type OrderWithItems,\n  type ProductWithCategory,\n  type InvoiceWithDetails,\n  type DepositWithDetails,\n  type PaymentWithDetails,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, gte, lte, sql, like, count } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserById(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: UpsertUser): Promise<User>;\n  upsertUser(user: UpsertUser, id?: string): Promise<User>;\n  updateUser(id: string, user: Partial<UpsertUser>): Promise<User>;\n  \n\n  \n  // Category operations\n  getCategories(): Promise<Category[]>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  updateCategory(id: string, category: Partial<InsertCategory>): Promise<Category>;\n  deleteCategory(id: string): Promise<void>;\n  \n  // Product operations\n  getProducts(): Promise<ProductWithCategory[]>;\n  getProduct(id: string): Promise<ProductWithCategory | undefined>;\n  getAvailableProducts(startDate: Date, endDate: Date): Promise<ProductWithCategory[]>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product>;\n  deleteProduct(id: string): Promise<void>;\n  \n  // Order operations\n  getOrders(userId?: string): Promise<OrderWithItems[]>;\n  getOrder(id: string): Promise<OrderWithItems | undefined>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  updateOrder(id: string, order: Partial<InsertOrder>): Promise<Order>;\n  deleteOrder(id: string): Promise<void>;\n  \n  // Order item operations\n  addOrderItem(orderItem: InsertOrderItem): Promise<OrderItem>;\n  updateOrderItem(id: string, orderItem: Partial<InsertOrderItem>): Promise<OrderItem>;\n  deleteOrderItem(id: string): Promise<void>;\n  \n  // Notification operations\n  getNotifications(userId: string): Promise<Notification[]>;\n  getUserNotifications(userId: string, limit?: number, offset?: number): Promise<Notification[]>;\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  markNotificationRead(id: string): Promise<void>;\n  markNotificationAsRead(notificationId: string, userId: string): Promise<boolean>;\n  \n  // Analytics operations\n  getDashboardStats(): Promise<{\n    activeRentals: number;\n    monthlyRevenue: string;\n    pendingReturns: number;\n    totalCustomers: number;\n  }>;\n  \n  // Invoice operations\n  getInvoices(customerId?: string): Promise<InvoiceWithDetails[]>;\n  getInvoice(id: string): Promise<InvoiceWithDetails | undefined>;\n  getInvoiceByOrder(orderId: string): Promise<Invoice | undefined>;\n  createInvoice(invoice: InsertInvoice): Promise<Invoice>;\n  updateInvoice(id: string, invoice: Partial<InsertInvoice>): Promise<Invoice>;\n  generateInvoiceNumber(): Promise<string>;\n  calculateLateFees(invoiceId: string): Promise<void>;\n  \n  // Deposit operations\n  getDeposits(customerId?: string): Promise<DepositWithDetails[]>;\n  getDeposit(id: string): Promise<DepositWithDetails | undefined>;\n  getDepositByOrder(orderId: string): Promise<Deposit | undefined>;\n  createDeposit(deposit: InsertDeposit): Promise<Deposit>;\n  updateDeposit(id: string, deposit: Partial<InsertDeposit>): Promise<Deposit>;\n  refundDeposit(id: string, refundAmount: number, reason?: string): Promise<Deposit>;\n  forfeitDeposit(id: string, forfeitAmount: number, reason: string): Promise<Deposit>;\n  \n  // Payment operations\n  getPayments(customerId?: string, orderId?: string): Promise<PaymentWithDetails[]>;\n  getPayment(id: string): Promise<PaymentWithDetails | undefined>;\n  createPayment(payment: InsertPayment): Promise<Payment>;\n  updatePayment(id: string, payment: Partial<InsertPayment>): Promise<Payment>;\n  processPayment(id: string, stripePaymentIntentId?: string, stripeChargeId?: string): Promise<Payment>;\n  \n  // Validity period operations\n  getValidityPeriods(orderId?: string): Promise<ValidityPeriod[]>;\n  createValidityPeriod(validityPeriod: InsertValidityPeriod): Promise<ValidityPeriod>;\n  updateValidityPeriod(id: string, validityPeriod: Partial<InsertValidityPeriod>): Promise<ValidityPeriod>;\n  extendValidityPeriod(id: string, newEndDate: Date, extensionFee: number): Promise<ValidityPeriod>;\n  \n  // Late fee operations\n  getLateFees(customerId?: string, orderId?: string): Promise<LateFee[]>;\n  createLateFee(lateFee: InsertLateFee): Promise<LateFee>;\n  updateLateFee(id: string, lateFee: Partial<InsertLateFee>): Promise<LateFee>;\n  waiveLateFee(id: string, waivedAmount: number, waivedBy: string, reason: string): Promise<LateFee>;\n  payLateFee(id: string): Promise<LateFee>;\n  \n  // Reports\n  getRevenueReport(startDate?: Date, endDate?: Date): Promise<{\n    totalRevenue: number;\n    rentalRevenue: number;\n    depositRevenue: number;\n    lateFeeRevenue: number;\n    refundAmount: number;\n    revenueByMonth: Array<{ month: string; revenue: number; }>;\n  }>;\n  getProductReport(): Promise<Array<{\n    productId: string;\n    productName: string;\n    totalRentals: number;\n    totalRevenue: number;\n    averageRentalDuration: number;\n    currentlyRented: number;\n  }>>;\n  getCustomerReport(): Promise<Array<{\n    customerId: string;\n    customerName: string;\n    customerEmail: string;\n    totalOrders: number;\n    totalSpent: number;\n    averageOrderValue: number;\n    lastOrderDate: Date | null;\n    status: 'active' | 'inactive';\n  }>>;\n  \n  // Utility operations\n  generateOrderNumber(): Promise<string>;\n\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserById(id: string): Promise<User | undefined> {\n    return this.getUser(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(userData).returning();\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser, id?: string): Promise<User> {\n    const userDataWithId = id ? { ...userData, id } : userData;\n    const [user] = await db\n      .insert(users)\n      .values(userDataWithId)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, user: Partial<UpsertUser>): Promise<User> {\n    const [updated] = await db\n      .update(users)\n      .set({ ...user, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return updated;\n  }\n\n\n\n  // Category operations\n  async getCategories(): Promise<Category[]> {\n    return await db.select().from(categories).orderBy(categories.name);\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const [newCategory] = await db.insert(categories).values(category).returning();\n    return newCategory;\n  }\n\n  async updateCategory(id: string, category: Partial<InsertCategory>): Promise<Category> {\n    const [updated] = await db\n      .update(categories)\n      .set(category)\n      .where(eq(categories.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteCategory(id: string): Promise<void> {\n    await db.delete(categories).where(eq(categories.id, id));\n  }\n\n  // Product operations\n  async getProducts(): Promise<ProductWithCategory[]> {\n    return await db\n      .select()\n      .from(products)\n      .leftJoin(categories, eq(products.categoryId, categories.id))\n      .orderBy(products.name)\n      .then(rows => \n        rows.map(row => ({\n          ...row.products,\n          category: row.categories\n        }))\n      );\n  }\n\n  async getProduct(id: string): Promise<ProductWithCategory | undefined> {\n    const [result] = await db\n      .select()\n      .from(products)\n      .leftJoin(categories, eq(products.categoryId, categories.id))\n      .where(eq(products.id, id));\n    \n    if (!result) return undefined;\n    \n    return {\n      ...result.products,\n      category: result.categories\n    };\n  }\n\n  async getAvailableProducts(startDate: Date, endDate: Date): Promise<ProductWithCategory[]> {\n    const allProducts = await this.getProducts();\n    \n    // Get all orders that overlap with the requested date range\n    const overlappingOrders = await db\n      .select({\n        productId: orderItems.productId,\n        quantity: orderItems.quantity,\n      })\n      .from(orders)\n      .innerJoin(orderItems, eq(orders.id, orderItems.orderId))\n      .where(\n        and(\n          // Order overlaps with requested period\n          lte(orders.startDate, endDate),\n          gte(orders.endDate, startDate),\n          // Only consider active orders\n          sql`${orders.status} IN ('confirmed', 'paid', 'picked_up', 'active')`\n        )\n      );\n\n    // Calculate reserved quantities per product\n    const reservedQuantities = new Map<string, number>();\n    for (const order of overlappingOrders) {\n      const current = reservedQuantities.get(order.productId) || 0;\n      reservedQuantities.set(order.productId, current + order.quantity);\n    }\n\n    // Filter products that have available capacity\n    return allProducts.filter(product => {\n      const reserved = reservedQuantities.get(product.id) || 0;\n      const available = (product.totalQuantity || 0) - reserved;\n      return available > 0;\n    });\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const [newProduct] = await db.insert(products).values(product).returning();\n    return newProduct;\n  }\n\n  async updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product> {\n    const [updated] = await db\n      .update(products)\n      .set({ ...product, updatedAt: new Date() })\n      .where(eq(products.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteProduct(id: string): Promise<void> {\n    await db.delete(products).where(eq(products.id, id));\n  }\n\n  // Order operations\n  async getOrders(userId?: string): Promise<OrderWithItems[]> {\n    const query = db\n      .select()\n      .from(orders)\n      .leftJoin(users, eq(orders.customerId, users.id))\n      .leftJoin(orderItems, eq(orders.id, orderItems.orderId))\n      .leftJoin(products, eq(orderItems.productId, products.id))\n      .orderBy(desc(orders.createdAt));\n\n    if (userId) {\n      query.where(eq(orders.customerId, userId));\n    }\n\n    const results = await query;\n    \n    // Group results by order\n    const orderMap = new Map<string, OrderWithItems>();\n    \n    for (const row of results) {\n      if (!row.orders) continue;\n      \n      if (!orderMap.has(row.orders.id)) {\n        orderMap.set(row.orders.id, {\n          ...row.orders,\n          customer: row.users!,\n          orderItems: []\n        });\n      }\n      \n      if (row.order_items && row.products) {\n        orderMap.get(row.orders.id)!.orderItems.push({\n          ...row.order_items,\n          product: row.products\n        });\n      }\n    }\n    \n    return Array.from(orderMap.values());\n  }\n\n  async getOrder(id: string): Promise<OrderWithItems | undefined> {\n    const results = await db\n      .select()\n      .from(orders)\n      .leftJoin(users, eq(orders.customerId, users.id))\n      .leftJoin(orderItems, eq(orders.id, orderItems.orderId))\n      .leftJoin(products, eq(orderItems.productId, products.id))\n      .where(eq(orders.id, id));\n\n    if (results.length === 0) return undefined;\n\n    const order = results[0].orders!;\n    const customer = results[0].users!;\n    \n    const items = results\n      .filter(row => row.order_items && row.products)\n      .map(row => ({\n        ...row.order_items!,\n        product: row.products!\n      }));\n\n    return {\n      ...order,\n      customer,\n      orderItems: items\n    };\n  }\n\n  async createOrder(order: InsertOrder): Promise<Order> {\n    const [newOrder] = await db.insert(orders).values(order).returning();\n    return newOrder;\n  }\n\n  async updateOrder(id: string, order: Partial<InsertOrder>): Promise<Order> {\n    const [updated] = await db\n      .update(orders)\n      .set({ ...order, updatedAt: new Date() })\n      .where(eq(orders.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteOrder(id: string): Promise<void> {\n    // Delete order items first\n    await db.delete(orderItems).where(eq(orderItems.orderId, id));\n    // Then delete the order\n    await db.delete(orders).where(eq(orders.id, id));\n  }\n\n  // Order item operations\n  async addOrderItem(orderItem: InsertOrderItem): Promise<OrderItem> {\n    const [newItem] = await db.insert(orderItems).values(orderItem).returning();\n    return newItem;\n  }\n\n  async updateOrderItem(id: string, orderItem: Partial<InsertOrderItem>): Promise<OrderItem> {\n    const [updated] = await db\n      .update(orderItems)\n      .set(orderItem)\n      .where(eq(orderItems.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteOrderItem(id: string): Promise<void> {\n    await db.delete(orderItems).where(eq(orderItems.id, id));\n  }\n\n  // Notification operations\n  async getNotifications(userId: string): Promise<Notification[]> {\n    return await db\n      .select()\n      .from(notifications)\n      .where(eq(notifications.userId, userId))\n      .orderBy(desc(notifications.createdAt));\n  }\n\n  async getUserNotifications(userId: string, limit: number = 20, offset: number = 0): Promise<Notification[]> {\n    return await db.select().from(notifications)\n      .where(eq(notifications.userId, userId))\n      .orderBy(desc(notifications.createdAt))\n      .limit(limit)\n      .offset(offset);\n  }\n\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    const [newNotification] = await db.insert(notifications).values(notification).returning();\n    return newNotification;\n  }\n\n  async markNotificationRead(id: string): Promise<void> {\n    await db\n      .update(notifications)\n      .set({ isRead: true })\n      .where(eq(notifications.id, id));\n  }\n\n  async markNotificationAsRead(notificationId: string, userId: string): Promise<boolean> {\n    try {\n      const result = await db.update(notifications)\n        .set({ isRead: true, updatedAt: new Date() })\n        .where(and(eq(notifications.id, notificationId), eq(notifications.userId, userId)))\n        .returning();\n      return result.length > 0;\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n      return false;\n    }\n  }\n\n  // Analytics operations\n  async getDashboardStats(): Promise<{\n    activeRentals: number;\n    monthlyRevenue: string;\n    pendingReturns: number;\n    totalCustomers: number;\n  }> {\n    const now = new Date();\n    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n    \n    // Count active rentals\n    const [{ count: activeRentals }] = await db\n      .select({ count: count() })\n      .from(orders)\n      .where(eq(orders.status, 'active'));\n\n    // Calculate monthly revenue\n    const [{ sum: monthlyRevenue }] = await db\n      .select({ sum: sql<string>`COALESCE(SUM(${orders.totalAmount}), 0)` })\n      .from(orders)\n      .where(\n        and(\n          gte(orders.createdAt, startOfMonth),\n          eq(orders.paymentStatus, 'paid')\n        )\n      );\n\n    // Count pending returns\n    const [{ count: pendingReturns }] = await db\n      .select({ count: count() })\n      .from(orders)\n      .where(\n        and(\n          eq(orders.status, 'active'),\n          lte(orders.endDate, now)\n        )\n      );\n\n    // Count total customers\n    const [{ count: totalCustomers }] = await db\n      .select({ count: count() })\n      .from(users)\n      .where(eq(users.role, 'customer'));\n\n    return {\n      activeRentals: activeRentals || 0,\n      monthlyRevenue: `₹${Number(monthlyRevenue || 0).toLocaleString()}`,\n      pendingReturns: pendingReturns || 0,\n      totalCustomers: totalCustomers || 0,\n    };\n  }\n\n  // Utility operations\n  async generateOrderNumber(): Promise<string> {\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    \n    const [{ count: orderCount }] = await db\n      .select({ count: count() })\n      .from(orders)\n      .where(like(orders.orderNumber, `RO-${year}-${month}-%`));\n\n    const nextNumber = (orderCount || 0) + 1;\n    return `RO-${year}-${month}-${String(nextNumber).padStart(3, '0')}`;\n  }\n\n\n\n  // Invoice operations\n  async getInvoices(customerId?: string): Promise<InvoiceWithDetails[]> {\n    let query = db\n      .select()\n      .from(invoices)\n      .leftJoin(orders, eq(invoices.orderId, orders.id))\n      .leftJoin(users, eq(invoices.customerId, users.id))\n      .leftJoin(payments, eq(invoices.id, payments.invoiceId))\n      .orderBy(desc(invoices.createdAt));\n\n    if (customerId) {\n      query = query.where(eq(invoices.customerId, customerId)) as any;\n    }\n\n    const results = await query;\n    const invoiceMap = new Map<string, InvoiceWithDetails>();\n\n    for (const row of results) {\n      if (!row.invoices) continue;\n\n      if (!invoiceMap.has(row.invoices.id)) {\n        invoiceMap.set(row.invoices.id, {\n          ...row.invoices,\n          order: {\n            ...row.orders!,\n            customer: row.users!,\n            orderItems: []\n          } as OrderWithItems,\n          customer: row.users!,\n          payments: []\n        });\n      }\n\n      if (row.payments) {\n        invoiceMap.get(row.invoices.id)!.payments.push(row.payments);\n      }\n    }\n\n    return Array.from(invoiceMap.values());\n  }\n\n  async getInvoice(id: string): Promise<InvoiceWithDetails | undefined> {\n    const results = await db\n      .select()\n      .from(invoices)\n      .leftJoin(orders, eq(invoices.orderId, orders.id))\n      .leftJoin(users, eq(invoices.customerId, users.id))\n      .leftJoin(payments, eq(invoices.id, payments.invoiceId))\n      .where(eq(invoices.id, id));\n\n    if (results.length === 0) return undefined;\n\n    const invoice = results[0].invoices!;\n    const order = results[0].orders!;\n    const customer = results[0].users!;\n    \n    const paymentList = results\n      .filter(row => row.payments)\n      .map(row => row.payments!);\n\n    return {\n      ...invoice,\n      order: { ...order, customer, orderItems: [] } as OrderWithItems,\n      customer,\n      payments: paymentList\n    };\n  }\n\n  async getInvoiceByOrder(orderId: string): Promise<Invoice | undefined> {\n    const [invoice] = await db\n      .select()\n      .from(invoices)\n      .where(eq(invoices.orderId, orderId))\n      .limit(1);\n\n    return invoice;\n  }\n\n  async createInvoice(invoice: InsertInvoice): Promise<Invoice> {\n    const [newInvoice] = await db.insert(invoices).values(invoice).returning();\n    return newInvoice;\n  }\n\n  async updateInvoice(id: string, invoice: Partial<InsertInvoice>): Promise<Invoice> {\n    const [updated] = await db\n      .update(invoices)\n      .set({ ...invoice, updatedAt: new Date() })\n      .where(eq(invoices.id, id))\n      .returning();\n    return updated;\n  }\n\n  async generateInvoiceNumber(): Promise<string> {\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    \n    const [{ count: invoiceCount }] = await db\n      .select({ count: count() })\n      .from(invoices)\n      .where(like(invoices.invoiceNumber, `INV-${year}-${month}-%`));\n\n    const nextNumber = (invoiceCount || 0) + 1;\n    return `INV-${year}-${month}-${String(nextNumber).padStart(3, '0')}`;\n  }\n\n  async calculateLateFees(invoiceId: string): Promise<void> {\n    const invoice = await this.getInvoice(invoiceId);\n    if (!invoice || invoice.status === 'paid') return;\n\n    const now = new Date();\n    const dueDate = new Date(invoice.dueDate);\n    \n    if (now > dueDate) {\n      const daysLate = Math.ceil((now.getTime() - dueDate.getTime()) / (1000 * 60 * 60 * 24));\n      const lateFeeAmount = Math.min(daysLate * 10, Number(invoice.totalAmount) * 0.1);\n      \n      await this.updateInvoice(invoiceId, {\n        lateFee: lateFeeAmount.toString(),\n        status: 'overdue'\n      });\n    }\n  }\n\n  // Deposit operations - Full implementations\n  async getDeposits(customerId?: string): Promise<DepositWithDetails[]> {\n    const query = db\n      .select()\n      .from(deposits)\n      .leftJoin(orders, eq(deposits.orderId, orders.id))\n      .leftJoin(users, eq(deposits.customerId, users.id))\n      .leftJoin(payments, eq(deposits.id, payments.depositId))\n      .orderBy(desc(deposits.createdAt));\n\n    if (customerId) {\n      query.where(eq(deposits.customerId, customerId));\n    }\n\n    const results = await query;\n    const depositMap = new Map<string, DepositWithDetails>();\n\n    for (const row of results) {\n      if (!depositMap.has(row.deposits.id)) {\n        depositMap.set(row.deposits.id, {\n          ...row.deposits,\n          order: row.orders!,\n          customer: row.users!,\n          payments: []\n        });\n      }\n\n      if (row.payments) {\n        depositMap.get(row.deposits.id)!.payments.push(row.payments);\n      }\n    }\n\n    return Array.from(depositMap.values());\n  }\n\n  async getDeposit(id: string): Promise<DepositWithDetails | undefined> {\n    const results = await db\n      .select()\n      .from(deposits)\n      .leftJoin(orders, eq(deposits.orderId, orders.id))\n      .leftJoin(users, eq(deposits.customerId, users.id))\n      .leftJoin(payments, eq(deposits.id, payments.depositId))\n      .where(eq(deposits.id, id));\n\n    if (results.length === 0) return undefined;\n\n    const deposit = results[0].deposits!;\n    const order = results[0].orders!;\n    const customer = results[0].users!;\n    \n    const paymentList = results\n      .filter(row => row.payments)\n      .map(row => row.payments!);\n\n    return {\n      ...deposit,\n      order,\n      customer,\n      payments: paymentList\n    };\n  }\n\n  async getDepositByOrder(orderId: string): Promise<Deposit | undefined> {\n    const [deposit] = await db\n      .select()\n      .from(deposits)\n      .where(eq(deposits.orderId, orderId))\n      .limit(1);\n\n    return deposit;\n  }\n\n  async createDeposit(deposit: InsertDeposit): Promise<Deposit> { \n    const [newDeposit] = await db.insert(deposits).values(deposit).returning();\n    return newDeposit;\n  }\n\n  async updateDeposit(id: string, deposit: Partial<InsertDeposit>): Promise<Deposit> {\n    const [updated] = await db\n      .update(deposits)\n      .set({ ...deposit, updatedAt: new Date() })\n      .where(eq(deposits.id, id))\n      .returning();\n    return updated;\n  }\n\n  async refundDeposit(id: string, refundAmount: number, reason?: string): Promise<Deposit> {\n    const [updated] = await db\n      .update(deposits)\n      .set({\n        status: 'refunded',\n        refundDate: new Date(),\n        refundAmount: refundAmount.toString(),\n        notes: reason,\n        updatedAt: new Date()\n      })\n      .where(eq(deposits.id, id))\n      .returning();\n    return updated;\n  }\n\n  async forfeitDeposit(id: string, forfeitAmount: number, reason: string): Promise<Deposit> {\n    const [updated] = await db\n      .update(deposits)\n      .set({\n        status: 'forfeited',\n        forfeitAmount: forfeitAmount.toString(),\n        forfeitReason: reason,\n        updatedAt: new Date()\n      })\n      .where(eq(deposits.id, id))\n      .returning();\n    return updated;\n  }\n  \n  // Payment operations - Full implementations\n  async getPayments(customerId?: string, orderId?: string): Promise<PaymentWithDetails[]> {\n    const conditions = [];\n    if (customerId) conditions.push(eq(payments.customerId, customerId));\n    if (orderId) conditions.push(eq(payments.orderId, orderId));\n    \n    const baseQuery = db\n      .select()\n      .from(payments)\n      .leftJoin(orders, eq(payments.orderId, orders.id))\n      .leftJoin(invoices, eq(payments.invoiceId, invoices.id))\n      .leftJoin(deposits, eq(payments.depositId, deposits.id))\n      .leftJoin(users, eq(payments.customerId, users.id))\n      .orderBy(desc(payments.createdAt));\n\n    const results = conditions.length > 0 \n      ? await baseQuery.where(and(...conditions))\n      : await baseQuery;\n    \n    return results.map(row => ({\n      ...row.payments,\n      order: row.orders || undefined,\n      invoice: row.invoices || undefined,\n      deposit: row.deposits || undefined,\n      customer: row.users!,\n    }));\n  }\n\n  async getPayment(id: string): Promise<PaymentWithDetails | undefined> {\n    const [result] = await db\n      .select()\n      .from(payments)\n      .leftJoin(orders, eq(payments.orderId, orders.id))\n      .leftJoin(invoices, eq(payments.invoiceId, invoices.id))\n      .leftJoin(deposits, eq(payments.depositId, deposits.id))\n      .leftJoin(users, eq(payments.customerId, users.id))\n      .where(eq(payments.id, id));\n\n    if (!result) return undefined;\n\n    return {\n      ...result.payments,\n      order: result.orders || undefined,\n      invoice: result.invoices || undefined,\n      deposit: result.deposits || undefined,\n      customer: result.users!,\n    };\n  }\n\n  async createPayment(payment: InsertPayment): Promise<Payment> {\n    const [newPayment] = await db.insert(payments).values(payment).returning();\n    return newPayment;\n  }\n\n  async updatePayment(id: string, payment: Partial<InsertPayment>): Promise<Payment> {\n    const [updated] = await db.update(payments).set(payment).where(eq(payments.id, id)).returning();\n    return updated;\n  }\n\n  async processPayment(id: string, stripePaymentIntentId?: string, stripeChargeId?: string): Promise<Payment> {\n    const [updated] = await db\n      .update(payments)\n      .set({\n        status: 'completed',\n        processedAt: new Date(),\n        description: stripePaymentIntentId ? `Processed via Stripe: ${stripePaymentIntentId}` : 'Payment processed'\n      })\n      .where(eq(payments.id, id))\n      .returning();\n    return updated;\n  }\n  \n  // Validity Period operations - Full implementations\n  async getValidityPeriods(orderId?: string): Promise<ValidityPeriod[]> {\n    if (orderId) {\n      return await db.select().from(validityPeriods)\n        .where(eq(validityPeriods.orderId, orderId))\n        .orderBy(desc(validityPeriods.createdAt));\n    }\n    \n    return await db.select().from(validityPeriods)\n      .orderBy(desc(validityPeriods.createdAt));\n  }\n\n  async createValidityPeriod(validityPeriod: InsertValidityPeriod): Promise<ValidityPeriod> {\n    const [newPeriod] = await db.insert(validityPeriods).values(validityPeriod).returning();\n    return newPeriod;\n  }\n\n  async updateValidityPeriod(id: string, update: Partial<InsertValidityPeriod>): Promise<ValidityPeriod> {\n    const [updated] = await db\n      .update(validityPeriods)\n      .set({ ...update, updatedAt: new Date() })\n      .where(eq(validityPeriods.id, id))\n      .returning();\n    return updated;\n  }\n\n  async extendValidityPeriod(id: string, newEndDate: Date, extensionFee: number): Promise<ValidityPeriod> {\n    const [updated] = await db\n      .update(validityPeriods)\n      .set({\n        extensionDate: newEndDate,\n        extensionFee: extensionFee.toString(),\n        updatedAt: new Date()\n      })\n      .where(eq(validityPeriods.id, id))\n      .returning();\n    return updated;\n  }\n  \n  // Late Fee operations - Full implementations\n  async getLateFees(customerId?: string, orderId?: string): Promise<LateFee[]> {\n    const conditions = [];\n    if (customerId) conditions.push(eq(lateFees.customerId, customerId));\n    if (orderId) conditions.push(eq(lateFees.orderId, orderId));\n    \n    if (conditions.length > 0) {\n      return await db.select().from(lateFees)\n        .where(and(...conditions))\n        .orderBy(desc(lateFees.createdAt));\n    }\n    \n    return await db.select().from(lateFees)\n      .orderBy(desc(lateFees.createdAt));\n  }\n\n  async createLateFee(lateFee: InsertLateFee): Promise<LateFee> {\n    const [newLateFee] = await db.insert(lateFees).values(lateFee).returning();\n    return newLateFee;\n  }\n\n  async updateLateFee(id: string, update: Partial<InsertLateFee>): Promise<LateFee> {\n    const [updated] = await db\n      .update(lateFees)\n      .set(update)\n      .where(eq(lateFees.id, id))\n      .returning();\n    return updated;\n  }\n\n  async waiveLateFee(id: string, waivedAmount: number, waivedBy: string, reason: string): Promise<LateFee> {\n    const [updated] = await db\n      .update(lateFees)\n      .set({\n        waivedAmount: waivedAmount.toString(),\n        waivedBy,\n        waivedReason: reason\n      })\n      .where(eq(lateFees.id, id))\n      .returning();\n    return updated;\n  }\n\n  async payLateFee(id: string): Promise<LateFee> {\n    const [updated] = await db\n      .update(lateFees)\n      .set({\n        isPaid: true,\n        paidAt: new Date()\n      })\n      .where(eq(lateFees.id, id))\n      .returning();\n    return updated;\n  }\n  \n  // Report operations - Full implementations\n  async getRevenueReport(startDate?: Date, endDate?: Date): Promise<{\n    totalRevenue: number;\n    rentalRevenue: number;\n    depositRevenue: number;\n    lateFeeRevenue: number;\n    refundAmount: number;\n    revenueByMonth: Array<{ month: string; revenue: number; }>;\n  }> {\n    const start = startDate || new Date(new Date().getFullYear(), 0, 1);\n    const end = endDate || new Date();\n    \n    // Get total revenue from payments\n    const [totalResult] = await db\n      .select({\n        total: sql<string>`COALESCE(SUM(${payments.amount}), 0)`\n      })\n      .from(payments)\n      .where(\n        and(\n          gte(payments.createdAt, start),\n          lte(payments.createdAt, end),\n          eq(payments.status, 'completed')\n        )\n      );\n\n    // Get revenue by payment type\n    const revenueByType = await db\n      .select({\n        type: payments.type,\n        amount: sql<string>`COALESCE(SUM(${payments.amount}), 0)`\n      })\n      .from(payments)\n      .where(\n        and(\n          gte(payments.createdAt, start),\n          lte(payments.createdAt, end),\n          eq(payments.status, 'completed')\n        )\n      )\n      .groupBy(payments.type);\n\n    const typeMap = Object.fromEntries(revenueByType.map(r => [r.type, Number(r.amount)]));\n\n    // Get monthly revenue\n    const monthlyRevenue = await db\n      .select({\n        month: sql<string>`DATE_TRUNC('month', ${payments.createdAt})`,\n        revenue: sql<string>`COALESCE(SUM(${payments.amount}), 0)`\n      })\n      .from(payments)\n      .where(\n        and(\n          gte(payments.createdAt, start),\n          lte(payments.createdAt, end),\n          eq(payments.status, 'completed')\n        )\n      )\n      .groupBy(sql`DATE_TRUNC('month', ${payments.createdAt})`)\n      .orderBy(sql`DATE_TRUNC('month', ${payments.createdAt})`);\n\n    return {\n      totalRevenue: Number(totalResult.total),\n      rentalRevenue: typeMap.rental || 0,\n      depositRevenue: typeMap.deposit || 0,\n      lateFeeRevenue: typeMap.late_fee || 0,\n      refundAmount: typeMap.refund || 0,\n      revenueByMonth: monthlyRevenue.map(r => ({\n        month: new Date(r.month).toLocaleDateString('en-US', { year: 'numeric', month: 'long' }),\n        revenue: Number(r.revenue)\n      }))\n    };\n  }\n\n  async getProductReport(): Promise<Array<{\n    productId: string;\n    productName: string;\n    totalRentals: number;\n    totalRevenue: number;\n    averageRentalDuration: number;\n    currentlyRented: number;\n  }>> {\n    const results = await db\n      .select({\n        productId: products.id,\n        productName: products.name,\n        orderId: orders.id,\n        orderStatus: orders.status,\n        startDate: orders.startDate,\n        endDate: orders.endDate,\n        totalAmount: orders.totalAmount\n      })\n      .from(products)\n      .leftJoin(orderItems, eq(products.id, orderItems.productId))\n      .leftJoin(orders, eq(orderItems.orderId, orders.id))\n      .where(sql`${orders.id} IS NOT NULL`);\n\n    const productMap = new Map();\n    \n    for (const row of results) {\n      const key = row.productId;\n      if (!productMap.has(key)) {\n        productMap.set(key, {\n          productId: row.productId,\n          productName: row.productName,\n          totalRentals: 0,\n          totalRevenue: 0,\n          totalDuration: 0,\n          currentlyRented: 0,\n          rentals: []\n        });\n      }\n      \n      const product = productMap.get(key);\n      product.totalRentals++;\n      product.totalRevenue += Number(row.totalAmount);\n      \n      if (row.startDate && row.endDate) {\n        const startTime = row.startDate ? new Date(row.startDate).getTime() : 0;\n        const endTime = row.endDate ? new Date(row.endDate).getTime() : 0;\n        if (startTime && endTime) {\n          const duration = Math.ceil((endTime - startTime) / (1000 * 60 * 60 * 24));\n          product.totalDuration += duration;\n        }\n      }\n      \n      if (row.orderStatus && ['picked_up', 'active'].includes(row.orderStatus)) {\n        product.currentlyRented++;\n      }\n    }\n\n    return Array.from(productMap.values()).map(p => ({\n      productId: p.productId,\n      productName: p.productName,\n      totalRentals: p.totalRentals,\n      totalRevenue: p.totalRevenue,\n      averageRentalDuration: p.totalRentals > 0 ? Math.round(p.totalDuration / p.totalRentals) : 0,\n      currentlyRented: p.currentlyRented\n    }));\n  }\n\n  async getCustomerReport(): Promise<Array<{\n    customerId: string;\n    customerName: string;\n    customerEmail: string;\n    totalOrders: number;\n    totalSpent: number;\n    averageOrderValue: number;\n    lastOrderDate: Date | null;\n    status: 'active' | 'inactive';\n  }>> {\n    const results = await db\n      .select({\n        customerId: users.id,\n        customerName: users.name,\n        customerEmail: users.email,\n        orderId: orders.id,\n        orderTotal: orders.totalAmount,\n        orderDate: orders.createdAt,\n        orderStatus: orders.status\n      })\n      .from(users)\n      .leftJoin(orders, eq(users.id, orders.customerId))\n      .where(eq(users.role, 'customer'));\n\n    const customerMap = new Map();\n    \n    for (const row of results) {\n      const key = row.customerId;\n      if (!customerMap.has(key)) {\n        customerMap.set(key, {\n          customerId: row.customerId,\n          customerName: row.customerName,\n          customerEmail: row.customerEmail,\n          totalOrders: 0,\n          totalSpent: 0,\n          lastOrderDate: null,\n          orders: []\n        });\n      }\n      \n      const customer = customerMap.get(key);\n      if (row.orderId) {\n        customer.totalOrders++;\n        customer.totalSpent += Number(row.orderTotal);\n        customer.orders.push({\n          date: row.orderDate,\n          status: row.orderStatus\n        });\n        \n        if (!customer.lastOrderDate || (row.orderDate && new Date(row.orderDate) > customer.lastOrderDate)) {\n          customer.lastOrderDate = row.orderDate ? new Date(row.orderDate) : null;\n        }\n      }\n    }\n\n    return Array.from(customerMap.values()).map(c => ({\n      customerId: c.customerId,\n      customerName: c.customerName,\n      customerEmail: c.customerEmail,\n      totalOrders: c.totalOrders,\n      totalSpent: c.totalSpent,\n      averageOrderValue: c.totalOrders > 0 ? Math.round(c.totalSpent / c.totalOrders) : 0,\n      lastOrderDate: c.lastOrderDate,\n      status: (c.lastOrderDate && (Date.now() - c.lastOrderDate.getTime()) < 90 * 24 * 60 * 60 * 1000) ? 'active' : 'inactive'\n    }));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":35960},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  boolean,\n  decimal,\n  index,\n  integer,\n  jsonb,\n  pgEnum,\n  pgTable,\n  text,\n  timestamp,\n  uuid,\n  varchar,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User roles enum\nexport const userRoleEnum = pgEnum('user_role', ['admin', 'customer']);\n\n// Order status enum\nexport const orderStatusEnum = pgEnum('order_status', [\n  'draft',\n  'quoted',\n  'confirmed', \n  'paid',\n  'picked_up',\n  'active',\n  'returned',\n  'completed',\n  'cancelled'\n]);\n\n// Payment status enum\nexport const paymentStatusEnum = pgEnum('payment_status', [\n  'pending',\n  'paid',\n  'partial',\n  'failed',\n  'refunded'\n]);\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique().notNull(),\n  password: varchar(\"password\").notNull(),\n  name: varchar(\"name\").notNull(),\n  phone: varchar(\"phone\"),\n  address: text(\"address\"),\n  role: userRoleEnum(\"role\").default('customer').notNull(),\n  isVerified: boolean(\"is_verified\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n\n\n// Product categories\nexport const categories = pgTable(\"categories\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Rental products\nexport const products = pgTable(\"products\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  categoryId: uuid(\"category_id\").references(() => categories.id),\n  imageUrl: varchar(\"image_url\"),\n  isRentable: boolean(\"is_rentable\").default(true),\n  totalQuantity: integer(\"total_quantity\").default(1),\n  availableQuantity: integer(\"available_quantity\").default(1),\n  hourlyRate: decimal(\"hourly_rate\", { precision: 10, scale: 2 }),\n  dailyRate: decimal(\"daily_rate\", { precision: 10, scale: 2 }),\n  weeklyRate: decimal(\"weekly_rate\", { precision: 10, scale: 2 }),\n  monthlyRate: decimal(\"monthly_rate\", { precision: 10, scale: 2 }),\n  securityDeposit: decimal(\"security_deposit\", { precision: 10, scale: 2 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Rental orders\nexport const orders = pgTable(\"orders\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderNumber: varchar(\"order_number\", { length: 50 }).unique().notNull(),\n  customerId: varchar(\"customer_id\").references(() => users.id).notNull(),\n  status: orderStatusEnum(\"status\").default('draft').notNull(),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  securityDeposit: decimal(\"security_deposit\", { precision: 10, scale: 2 }),\n  notes: text(\"notes\"),\n  paymentStatus: paymentStatusEnum(\"payment_status\").default('pending'),\n  pickupAddress: text(\"pickup_address\"),\n  returnAddress: text(\"return_address\"),\n  actualPickupDate: timestamp(\"actual_pickup_date\"),\n  actualReturnDate: timestamp(\"actual_return_date\"),\n  lateReturnFee: decimal(\"late_return_fee\", { precision: 10, scale: 2 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Order items (products in each order)\nexport const orderItems = pgTable(\"order_items\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: uuid(\"order_id\").references(() => orders.id).notNull(),\n  productId: uuid(\"product_id\").references(() => products.id).notNull(),\n  quantity: integer(\"quantity\").default(1).notNull(),\n  unitRate: decimal(\"unit_rate\", { precision: 10, scale: 2 }).notNull(),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Invoices\nexport const invoices = pgTable(\"invoices\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  invoiceNumber: varchar(\"invoice_number\", { length: 50 }).unique().notNull(),\n  orderId: uuid(\"order_id\").references(() => orders.id).notNull(),\n  customerId: varchar(\"customer_id\").references(() => users.id).notNull(),\n  invoiceDate: timestamp(\"invoice_date\").defaultNow().notNull(),\n  dueDate: timestamp(\"due_date\").notNull(),\n  subtotal: decimal(\"subtotal\", { precision: 10, scale: 2 }).notNull(),\n  taxAmount: decimal(\"tax_amount\", { precision: 10, scale: 2 }).default('0'),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  paidAmount: decimal(\"paid_amount\", { precision: 10, scale: 2 }).default('0'),\n  status: varchar(\"status\", { length: 20 }).default('draft'), // draft, sent, paid, overdue, cancelled\n  lateFee: decimal(\"late_fee\", { precision: 10, scale: 2 }).default('0'),\n  penalties: decimal(\"penalties\", { precision: 10, scale: 2 }).default('0'),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Security deposits tracking\nexport const deposits = pgTable(\"deposits\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: uuid(\"order_id\").references(() => orders.id).notNull(),\n  customerId: varchar(\"customer_id\").references(() => users.id).notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  status: varchar(\"status\", { length: 20 }).default('pending'), // pending, held, refunded, forfeited\n  heldDate: timestamp(\"held_date\"),\n  refundDate: timestamp(\"refund_date\"),\n  refundAmount: decimal(\"refund_amount\", { precision: 10, scale: 2 }).default('0'),\n  forfeitAmount: decimal(\"forfeit_amount\", { precision: 10, scale: 2 }).default('0'),\n  forfeitReason: text(\"forfeit_reason\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Payment transactions\nexport const payments = pgTable(\"payments\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: uuid(\"order_id\").references(() => orders.id),\n  invoiceId: uuid(\"invoice_id\").references(() => invoices.id),\n  depositId: uuid(\"deposit_id\").references(() => deposits.id),\n  customerId: varchar(\"customer_id\").references(() => users.id).notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  type: varchar(\"type\", { length: 20 }).notNull(), // rental, deposit, late_fee, penalty, refund\n  paymentMethod: varchar(\"payment_method\", { length: 50 }), // cash, bank_transfer, online\n  status: varchar(\"status\", { length: 20 }).default('pending'), // pending, completed, failed, refunded\n  description: text(\"description\"),\n  processedAt: timestamp(\"processed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Validity periods for rentals\nexport const validityPeriods = pgTable(\"validity_periods\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: uuid(\"order_id\").references(() => orders.id).notNull(),\n  productId: uuid(\"product_id\").references(() => products.id).notNull(),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  gracePeriodHours: integer(\"grace_period_hours\").default(24), // Grace period before late fees\n  isActive: boolean(\"is_active\").default(true),\n  extensionDate: timestamp(\"extension_date\"), // If period is extended\n  extensionFee: decimal(\"extension_fee\", { precision: 10, scale: 2 }).default('0'),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Late fees and penalties tracking\nexport const lateFees = pgTable(\"late_fees\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: uuid(\"order_id\").references(() => orders.id).notNull(),\n  customerId: varchar(\"customer_id\").references(() => users.id).notNull(),\n  type: varchar(\"type\", { length: 20 }).notNull(), // late_return, damaged_equipment, lost_equipment\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  daysLate: integer(\"days_late\").default(0),\n  dailyRate: decimal(\"daily_rate\", { precision: 10, scale: 2 }),\n  description: text(\"description\"),\n  isPaid: boolean(\"is_paid\").default(false),\n  paidAt: timestamp(\"paid_at\"),\n  waivedAmount: decimal(\"waived_amount\", { precision: 10, scale: 2 }).default('0'),\n  waivedBy: varchar(\"waived_by\").references(() => users.id),\n  waivedReason: text(\"waived_reason\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Notifications\nexport const notifications = pgTable(\"notifications\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  message: text(\"message\").notNull(),\n  type: varchar(\"type\", { length: 50 }).default('info'), // info, warning, error, success\n  isRead: boolean(\"is_read\").default(false),\n  relatedOrderId: uuid(\"related_order_id\").references(() => orders.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  orders: many(orders),\n  notifications: many(notifications),\n\n}));\n\n\n\nexport const categoriesRelations = relations(categories, ({ many }) => ({\n  products: many(products),\n}));\n\nexport const productsRelations = relations(products, ({ one, many }) => ({\n  category: one(categories, {\n    fields: [products.categoryId],\n    references: [categories.id],\n  }),\n  orderItems: many(orderItems),\n}));\n\nexport const ordersRelations = relations(orders, ({ one, many }) => ({\n  customer: one(users, {\n    fields: [orders.customerId],\n    references: [users.id],\n  }),\n  orderItems: many(orderItems),\n  notifications: many(notifications),\n  invoices: many(invoices),\n  deposits: many(deposits),\n  payments: many(payments),\n  validityPeriods: many(validityPeriods),\n  lateFees: many(lateFees),\n}));\n\nexport const invoicesRelations = relations(invoices, ({ one, many }) => ({\n  order: one(orders, {\n    fields: [invoices.orderId],\n    references: [orders.id],\n  }),\n  customer: one(users, {\n    fields: [invoices.customerId],\n    references: [users.id],\n  }),\n  payments: many(payments),\n}));\n\nexport const depositsRelations = relations(deposits, ({ one, many }) => ({\n  order: one(orders, {\n    fields: [deposits.orderId],\n    references: [orders.id],\n  }),\n  customer: one(users, {\n    fields: [deposits.customerId],\n    references: [users.id],\n  }),\n  payments: many(payments),\n}));\n\nexport const paymentsRelations = relations(payments, ({ one }) => ({\n  order: one(orders, {\n    fields: [payments.orderId],\n    references: [orders.id],\n  }),\n  invoice: one(invoices, {\n    fields: [payments.invoiceId],\n    references: [invoices.id],\n  }),\n  deposit: one(deposits, {\n    fields: [payments.depositId],\n    references: [deposits.id],\n  }),\n  customer: one(users, {\n    fields: [payments.customerId],\n    references: [users.id],\n  }),\n}));\n\nexport const validityPeriodsRelations = relations(validityPeriods, ({ one }) => ({\n  order: one(orders, {\n    fields: [validityPeriods.orderId],\n    references: [orders.id],\n  }),\n  product: one(products, {\n    fields: [validityPeriods.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const lateFeesRelations = relations(lateFees, ({ one }) => ({\n  order: one(orders, {\n    fields: [lateFees.orderId],\n    references: [orders.id],\n  }),\n  customer: one(users, {\n    fields: [lateFees.customerId],\n    references: [users.id],\n  }),\n  waivedByUser: one(users, {\n    fields: [lateFees.waivedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const orderItemsRelations = relations(orderItems, ({ one }) => ({\n  order: one(orders, {\n    fields: [orderItems.orderId],\n    references: [orders.id],\n  }),\n  product: one(products, {\n    fields: [orderItems.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const notificationsRelations = relations(notifications, ({ one }) => ({\n  user: one(users, {\n    fields: [notifications.userId],\n    references: [users.id],\n  }),\n  relatedOrder: one(orders, {\n    fields: [notifications.relatedOrderId],\n    references: [orders.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const registerUserSchema = insertUserSchema.omit({\n  role: true,\n}).extend({\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nexport const loginUserSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\n\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  startDate: z.union([z.string(), z.date()]).transform((val) => \n    typeof val === 'string' ? new Date(val) : val\n  ),\n  endDate: z.union([z.string(), z.date()]).transform((val) => \n    typeof val === 'string' ? new Date(val) : val\n  ),\n  totalAmount: z.union([z.string(), z.number()]).transform((val) => \n    typeof val === 'number' ? val.toString() : val\n  ),\n  securityDeposit: z.union([z.string(), z.number(), z.null(), z.undefined()]).optional().transform((val) => \n    val !== null && val !== undefined ? (typeof val === 'number' ? val.toString() : val) : val\n  ),\n  lateReturnFee: z.union([z.string(), z.number(), z.null(), z.undefined()]).optional().transform((val) => \n    val !== null && val !== undefined ? (typeof val === 'number' ? val.toString() : val) : val\n  ),\n});\n\nexport const insertOrderItemSchema = createInsertSchema(orderItems).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  unitRate: z.union([z.string(), z.number()]).transform((val) => \n    typeof val === 'number' ? val.toString() : val\n  ),\n  totalAmount: z.union([z.string(), z.number()]).transform((val) => \n    typeof val === 'number' ? val.toString() : val\n  ),\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertInvoiceSchema = createInsertSchema(invoices).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDepositSchema = createInsertSchema(deposits).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPaymentSchema = createInsertSchema(payments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertValidityPeriodSchema = createInsertSchema(validityPeriods).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertLateFeeSchema = createInsertSchema(lateFees).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type UpsertUser = z.infer<typeof insertUserSchema>;\nexport type RegisterUser = z.infer<typeof registerUserSchema>;\nexport type LoginUser = z.infer<typeof loginUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type OrderItem = typeof orderItems.$inferSelect;\nexport type InsertOrderItem = z.infer<typeof insertOrderItemSchema>;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type Invoice = typeof invoices.$inferSelect;\nexport type InsertInvoice = z.infer<typeof insertInvoiceSchema>;\nexport type Deposit = typeof deposits.$inferSelect;\nexport type InsertDeposit = z.infer<typeof insertDepositSchema>;\nexport type Payment = typeof payments.$inferSelect;\nexport type InsertPayment = z.infer<typeof insertPaymentSchema>;\nexport type ValidityPeriod = typeof validityPeriods.$inferSelect;\nexport type InsertValidityPeriod = z.infer<typeof insertValidityPeriodSchema>;\nexport type LateFee = typeof lateFees.$inferSelect;\nexport type InsertLateFee = z.infer<typeof insertLateFeeSchema>;\n\n\n// Extended types with relations\nexport type OrderWithItems = Order & {\n  orderItems: (OrderItem & { product: Product })[];\n  customer: User;\n  invoices?: Invoice[];\n  deposits?: Deposit[];\n  payments?: Payment[];\n  validityPeriods?: ValidityPeriod[];\n  lateFees?: LateFee[];\n};\n\nexport type ProductWithCategory = Product & {\n  category: Category | null;\n};\n\nexport type InvoiceWithDetails = Invoice & {\n  order: OrderWithItems;\n  customer: User;\n  payments: Payment[];\n};\n\nexport type DepositWithDetails = Deposit & {\n  order: Order;\n  customer: User;\n  payments: Payment[];\n};\n\nexport type PaymentWithDetails = Payment & {\n  order?: Order;\n  invoice?: Invoice;\n  deposit?: Deposit;\n  customer: User;\n};\n","size_bytes":17666},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport Login from \"@/pages/auth/login\";\nimport Register from \"@/pages/auth/register\";\nimport AdminDashboard from \"@/pages/admin/dashboard\";\nimport AdminProducts from \"@/pages/admin/products\";\nimport AdminOrders from \"@/pages/admin/orders\";\nimport AdminCustomers from \"@/pages/admin/customers\";\nimport AdminInvoices from \"@/pages/admin/invoices\";\nimport AdminTransfers from \"@/pages/admin/transfers\";\nimport AdminMobile from \"@/pages/admin/mobile\";\nimport InvoicePayment from \"@/pages/invoice-payment\";\nimport CustomerCatalog from \"@/pages/customer/catalog\";\nimport ProductDetail from \"@/pages/customer/product-detail\";\nimport CustomerBooking from \"@/pages/customer/booking\";\nimport CustomerOrders from \"@/pages/customer/orders\";\nimport CustomerWishlist from \"@/pages/customer/wishlist\";\nimport CustomerContact from \"@/pages/customer/contact\";\nimport CustomerMobile from \"@/pages/customer/mobile\";\nimport EnhancedBilling from \"@/pages/enhanced-billing\";\nimport Checkout from \"@/pages/checkout\";\nimport OrderSuccess from \"@/pages/order-success\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/register\" component={Register} />\n        </>\n      ) : (\n        <>\n          {user?.role === 'admin' ? (\n            <>\n              <Route path=\"/\" component={AdminDashboard} />\n              <Route path=\"/admin\" component={AdminDashboard} />\n              <Route path=\"/admin/dashboard\" component={AdminDashboard} />\n              <Route path=\"/admin/products\" component={AdminProducts} />\n              <Route path=\"/admin/orders\" component={AdminOrders} />\n              <Route path=\"/admin/customers\" component={AdminCustomers} />\n              <Route path=\"/admin/invoices\" component={AdminInvoices} />\n              <Route path=\"/admin/transfers\" component={AdminTransfers} />\n              <Route path=\"/admin/mobile\" component={AdminMobile} />\n            </>\n          ) : (\n            <>\n              <Route path=\"/\" component={CustomerCatalog} />\n              <Route path=\"/catalog\" component={CustomerCatalog} />\n              <Route path=\"/catalog/:id\" component={ProductDetail} />\n              <Route path=\"/booking/:productId\" component={CustomerBooking} />\n              <Route path=\"/orders\" component={CustomerOrders} />\n              <Route path=\"/billing\" component={EnhancedBilling} />\n              <Route path=\"/wishlist\" component={CustomerWishlist} />\n              <Route path=\"/contact\" component={CustomerContact} />\n              <Route path=\"/mobile\" component={CustomerMobile} />\n            </>\n          )}\n          <Route path=\"/checkout/:orderId\" component={Checkout} />\n          <Route path=\"/order-success/:orderId\" component={OrderSuccess} />\n          <Route path=\"/invoice-payment/:invoiceId\" component={InvoicePayment} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3892},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(210 84% 47%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(210 84% 47%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(210 84% 47%);\n  --chart-1: hsl(210 84% 47%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(210 84% 47%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(210 84% 47%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(210 84% 47%);\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(210 84% 47% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(210 84% 47% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(210 84% 47% / 0.00), 0px 1px 2px -1px hsl(210 84% 47% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(210 84% 47% / 0.00), 0px 1px 2px -1px hsl(210 84% 47% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(210 84% 47% / 0.00), 0px 2px 4px -1px hsl(210 84% 47% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(210 84% 47% / 0.00), 0px 4px 6px -1px hsl(210 84% 47% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(210 84% 47% / 0.00), 0px 8px 10px -1px hsl(210 84% 47% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(210 84% 47% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n  \n  /* Custom colors from design */\n  --primary-50: hsl(210 100% 95%);\n  --primary-100: hsl(210 100% 88%);\n  --primary-500: hsl(210 84% 47%);\n  --primary-600: hsl(210 89% 42%);\n  --primary-700: hsl(210 100% 32%);\n  \n  --secondary-50: hsl(120 60% 95%);\n  --secondary-500: hsl(122 47% 35%);\n  --secondary-600: hsl(122 50% 30%);\n  \n  --accent-500: hsl(36 100% 50%);\n  --accent-600: hsl(36 100% 47%);\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(210 84% 47%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(210 84% 47%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(210 84% 47%);\n  --chart-1: hsl(210 84% 47%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(210 84% 47%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(210 84% 47%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(210 84% 47%);\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(210 84% 47% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(210 84% 47% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(210 84% 47% / 0.00), 0px 1px 2px -1px hsl(210 84% 47% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(210 84% 47% / 0.00), 0px 1px 2px -1px hsl(210 84% 47% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(210 84% 47% / 0.00), 0px 2px 4px -1px hsl(210 84% 47% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(210 84% 47% / 0.00), 0px 4px 6px -1px hsl(210 84% 47% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(210 84% 47% / 0.00), 0px 8px 10px -1px hsl(210 84% 47% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(210 84% 47% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n","size_bytes":4943},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User | null>({\n    queryKey: [\"/api/auth/user\"],\n    queryFn: async () => {\n      try {\n        const res = await fetch(\"/api/auth/user\", {\n          credentials: \"include\",\n        });\n        \n        if (res.status === 401) {\n          return null;\n        }\n        \n        if (!res.ok) {\n          throw new Error(`${res.status}: ${res.statusText}`);\n        }\n        \n        return await res.json();\n      } catch (error) {\n        return null;\n      }\n    },\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":734},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<any> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return await res.json();\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    try {\n      const url = queryKey.join(\"/\") as string;\n      \n      // Validate URL to prevent malformed requests\n      if (!url.startsWith('/api/')) {\n        throw new Error(`Invalid query URL: ${url}`);\n      }\n      \n      // Specifically block logout endpoints from being queried\n      if (url.includes('logout')) {\n        console.warn(`Blocked logout URL from being queried: ${url}`);\n        return null;\n      }\n      \n      const res = await fetch(url, {\n        credentials: \"include\",\n      });\n\n      if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n        return null;\n      }\n\n      await throwIfResNotOk(res);\n      return await res.json();\n    } catch (error) {\n      // Log the error for debugging but don't let it crash the app\n      console.warn(\"Query error:\", error);\n      throw error;\n    }\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1971},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/checkout.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useParams } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Elements, PaymentElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport CustomerLayout from \"@/components/layout/customer-layout\";\n\n// Make sure to call `loadStripe` outside of a component's render to avoid\n// recreating the `Stripe` object on every render.\nconst stripeKey = import.meta.env.VITE_STRIPE_PUBLIC_KEY;\nconst stripePromise = stripeKey ? loadStripe(stripeKey) : null;\n\nconst CheckoutForm = ({ order }: { order: any }) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  \n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    const { error } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        return_url: `${window.location.origin}/orders`,\n      },\n    });\n\n    if (error) {\n      toast({\n        title: \"Payment Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } else {\n      toast({\n        title: \"Payment Successful!\",\n        description: \"Your order has been confirmed. You'll receive a confirmation email with your rental ticket shortly.\",\n      });\n      \n      // Redirect to success page\n      setTimeout(() => {\n        window.location.href = `/order-success/${order.id}`;\n      }, 2000);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Payment Information</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <PaymentElement />\n        </CardContent>\n      </Card>\n      \n      <Button \n        type=\"submit\" \n        disabled={!stripe || !elements}\n        size=\"lg\"\n        className=\"w-full bg-primary-500 hover:bg-primary-600\"\n      >\n        <i className=\"fas fa-lock mr-2\"></i>\n        Pay Securely - ₹{Number(order.totalAmount).toLocaleString()}\n      </Button>\n    </form>\n  );\n};\n\nexport default function Checkout() {\n  const { orderId } = useParams<{ orderId: string }>();\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [clientSecret, setClientSecret] = useState(\"\");\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: order, isLoading: orderLoading } = useQuery({\n    queryKey: [\"/api/orders\", orderId],\n    enabled: !!orderId && isAuthenticated,\n  });\n\n  const createPaymentMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/create-payment-intent\", {\n        amount: Number(order?.totalAmount || 0),\n        orderId: order?.id || \"\",\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setClientSecret(data.clientSecret);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to initialize payment. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (order && order?.paymentStatus === 'pending') {\n      createPaymentMutation.mutate();\n    }\n  }, [order]);\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (orderLoading) {\n    return (\n      <CustomerLayout>\n        <div className=\"flex justify-center py-12\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n        </div>\n      </CustomerLayout>\n    );\n  }\n\n  if (!order) {\n    return (\n      <CustomerLayout>\n        <Card>\n          <CardContent className=\"py-12 text-center\">\n            <i className=\"fas fa-exclamation-triangle text-red-500 text-6xl mb-4\"></i>\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Order not found</h3>\n            <p className=\"text-gray-600 mb-6\">The order you're looking for doesn't exist or has been removed.</p>\n            <Button onClick={() => window.location.href = \"/orders\"}>\n              <i className=\"fas fa-arrow-left mr-2\"></i>\n              Back to Orders\n            </Button>\n          </CardContent>\n        </Card>\n      </CustomerLayout>\n    );\n  }\n\n  if (order.paymentStatus === 'paid') {\n    return (\n      <CustomerLayout>\n        <Card>\n          <CardContent className=\"py-12 text-center\">\n            <i className=\"fas fa-check-circle text-green-500 text-6xl mb-4\"></i>\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Payment Already Completed</h3>\n            <p className=\"text-gray-600 mb-6\">This order has already been paid for.</p>\n            <Button onClick={() => window.location.href = \"/orders\"}>\n              <i className=\"fas fa-arrow-left mr-2\"></i>\n              Back to Orders\n            </Button>\n          </CardContent>\n        </Card>\n      </CustomerLayout>\n    );\n  }\n\n  const formatDate = (date: string | Date) => {\n    return new Date(date).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  const getDurationDays = (startDate: string | Date, endDate: string | Date) => {\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    const diffTime = Math.abs(end.getTime() - start.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return diffDays;\n  };\n\n  if (!clientSecret) {\n    return (\n      <CustomerLayout>\n        <div className=\"max-w-2xl mx-auto space-y-6\">\n          {/* Order Summary */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Order Summary - {order.orderNumber}</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                  <span>Status:</span>\n                  <Badge variant=\"secondary\">{order.status}</Badge>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span>Duration:</span>\n                  <span>{formatDate(order.startDate)} - {formatDate(order.endDate)} ({getDurationDays(order.startDate, order.endDate)} days)</span>\n                </div>\n                <div className=\"flex justify-between items-center text-lg font-bold\">\n                  <span>Total Amount:</span>\n                  <span>₹{Number(order.totalAmount).toLocaleString()}</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Loading Payment */}\n          <Card>\n            <CardContent className=\"py-12 text-center\">\n              <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                {createPaymentMutation.isPending ? \"Initializing Payment...\" : \"Preparing Checkout\"}\n              </h3>\n              <p className=\"text-gray-600\">Please wait while we set up your secure payment.</p>\n            </CardContent>\n          </Card>\n        </div>\n      </CustomerLayout>\n    );\n  }\n\n  return (\n    <CustomerLayout>\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        {/* Back Button */}\n        <Button variant=\"ghost\" onClick={() => window.location.href = \"/orders\"}>\n          <i className=\"fas fa-arrow-left mr-2\"></i>\n          Back to Orders\n        </Button>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Order Details */}\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Order Details - {order.orderNumber}</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span>Status:</span>\n                    <Badge variant=\"secondary\">{order.status}</Badge>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span>Rental Period:</span>\n                    <span className=\"text-right\">\n                      {formatDate(order.startDate)} - {formatDate(order.endDate)}\n                      <br />\n                      <small className=\"text-gray-600\">({getDurationDays(order.startDate, order.endDate)} days)</small>\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Items */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Items</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {order.orderItems.map((item: any) => (\n                    <div key={item.id} className=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg\">\n                      <div>\n                        <div className=\"font-medium\">{item.product.name}</div>\n                        <div className=\"text-sm text-gray-600\">\n                          Quantity: {item.quantity} × ₹{Number(item.unitRate).toLocaleString()}\n                        </div>\n                      </div>\n                      <div className=\"font-medium\">\n                        ₹{Number(item.totalAmount).toLocaleString()}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Addresses */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Delivery Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {order.pickupAddress && (\n                  <div>\n                    <h5 className=\"font-medium text-gray-900 mb-1\">Pickup Address</h5>\n                    <p className=\"text-sm text-gray-600\">{order.pickupAddress}</p>\n                  </div>\n                )}\n                {order.returnAddress && (\n                  <div>\n                    <h5 className=\"font-medium text-gray-900 mb-1\">Return Address</h5>\n                    <p className=\"text-sm text-gray-600\">{order.returnAddress}</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Payment Section */}\n          <div className=\"space-y-6\">\n            {/* Payment Summary */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Payment Summary</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {order.orderItems.map((item: any) => (\n                    <div key={item.id} className=\"flex justify-between text-sm\">\n                      <span>{item.product.name} (×{item.quantity})</span>\n                      <span>₹{Number(item.totalAmount).toLocaleString()}</span>\n                    </div>\n                  ))}\n                  {order.securityDeposit && Number(order.securityDeposit) > 0 && (\n                    <>\n                      <Separator />\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Security Deposit (Refundable)</span>\n                        <span>₹{Number(order.securityDeposit).toLocaleString()}</span>\n                      </div>\n                    </>\n                  )}\n                  <Separator />\n                  <div className=\"flex justify-between font-bold text-lg\">\n                    <span>Total</span>\n                    <span>₹{Number(order.totalAmount).toLocaleString()}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Payment Form */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Complete Payment</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"mb-4 p-3 bg-blue-50 rounded-lg border border-blue-200\">\n                  <div className=\"flex items-center text-blue-800\">\n                    <i className=\"fas fa-shield-alt mr-2\"></i>\n                    <span className=\"text-sm\">Your payment information is secure and encrypted</span>\n                  </div>\n                </div>\n                {!stripeKey ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n                      <div className=\"flex items-center\">\n                        <i className=\"fas fa-credit-card text-yellow-600 mr-2\"></i>\n                        <div>\n                          <h4 className=\"text-sm font-medium text-yellow-900\">Payment Configuration Required</h4>\n                          <p className=\"text-sm text-yellow-700\">\n                            Stripe integration is not configured. Please contact support.\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <Elements stripe={stripePromise} options={{ clientSecret }}>\n                    <CheckoutForm order={order} />\n                  </Elements>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </CustomerLayout>\n  );\n}\n","size_bytes":14746},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ShoppingCart } from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-white\">\n      {/* Navigation */}\n      <nav className=\"bg-white shadow-sm border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between h-16\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0 flex items-center\">\n                <ShoppingCart className=\"h-8 w-8 text-blue-600 mr-2\" />\n                <h1 className=\"text-xl font-bold text-gray-900\">RentFlow</h1>\n              </div>\n              {/* Navigation Menu */}\n              <div className=\"hidden md:flex items-center space-x-8 ml-10\">\n                <a href=\"#\" className=\"text-blue-600 font-medium border-b-2 border-blue-600 pb-4\">Home</a>\n                <a href=\"#\" className=\"text-gray-700 hover:text-blue-600 pb-4\">Rental Shop</a>\n                <a href=\"#\" className=\"text-gray-700 hover:text-blue-600 pb-4\">Wishlist</a>\n                <a href=\"#\" className=\"text-gray-700 hover:text-blue-600 pb-4\">Contact us</a>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <ShoppingCart className=\"h-5 w-5 text-gray-600\" />\n              <div className=\"flex items-center\">\n                <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                  <span className=\"text-blue-600 font-medium text-sm\">a</span>\n                </div>\n                <span className=\"ml-2 text-gray-700 font-medium\">admin</span>\n              </div>\n              <Button \n                variant=\"outline\"\n                onClick={() => window.location.href = '/login'}\n                className=\"text-blue-600 border-blue-600 hover:bg-blue-50\"\n              >\n                Sign In\n              </Button>\n              <Button \n                onClick={() => window.location.href = '/register'}\n                className=\"bg-blue-600 hover:bg-blue-700\"\n              >\n                Sign Up\n              </Button>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Hero Section */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"text-center\">\n          <h1 className=\"text-4xl font-bold text-gray-900 sm:text-5xl md:text-6xl\">\n            Professional Equipment\n            <span className=\"text-blue-600\"> Rental</span>\n          </h1>\n          <p className=\"mt-6 max-w-2xl mx-auto text-xl text-gray-600\">\n            Rent high-quality tools and equipment for your projects. From power tools to heavy machinery, \n            we have everything you need with flexible rental periods and competitive pricing.\n          </p>\n          <div className=\"mt-10 space-x-4\">\n            <Button \n              onClick={() => window.location.href = '/register'}\n              size=\"lg\"\n              className=\"bg-blue-600 hover:bg-blue-700 text-lg px-8 py-3\"\n            >\n              Browse Catalog\n              <ShoppingCart className=\"ml-2 h-5 w-5\" />\n            </Button>\n            <Button \n              onClick={() => window.location.href = '/login'}\n              size=\"lg\"\n              variant=\"outline\"\n              className=\"text-blue-600 border-blue-600 hover:bg-blue-50 text-lg px-8 py-3\"\n            >\n              Sign In\n            </Button>\n          </div>\n        </div>\n\n        {/* Featured Categories */}\n        <div className=\"mt-16\">\n          <div className=\"flex justify-center space-x-4 mb-8\">\n            <Button variant=\"default\" className=\"bg-blue-600 text-white\">\n              Category 1\n            </Button>\n            <Button variant=\"outline\">\n              Audio Visual\n            </Button>\n            <Button variant=\"outline\">\n              Heavy Machinery\n            </Button>\n            <Button variant=\"outline\">\n              Power Tools\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Popular Products Section */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16 bg-gray-50\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl font-bold text-gray-900\">\n            Popular Rental Equipment\n          </h2>\n          <p className=\"mt-4 text-gray-600\">\n            Browse our most requested tools and equipment\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          <Card className=\"hover:shadow-lg transition-shadow\">\n            <div className=\"h-48 bg-gray-200 rounded-t-lg flex items-center justify-center\">\n              <i className=\"fas fa-tools text-4xl text-gray-400\"></i>\n            </div>\n            <CardHeader>\n              <div className=\"flex justify-between items-start\">\n                <CardTitle className=\"text-lg\">Angle Grinder</CardTitle>\n                <span className=\"bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded\">Power Tools</span>\n              </div>\n              <CardDescription>\n                Heavy duty angle grinder for cutting and grinding metal\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2 mb-4\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-500\">Hourly:</span>\n                  <span className=\"font-medium\">₹12/hr</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-500\">Daily:</span>\n                  <span className=\"font-medium\">₹35/day</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-500\">Weekly:</span>\n                  <span className=\"font-medium\">₹200/week</span>\n                </div>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded\">\n                  3 Available\n                </span>\n                <Button size=\"sm\" className=\"bg-blue-600 hover:bg-blue-700\">\n                  Book Now\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover:shadow-lg transition-shadow\">\n            <div className=\"h-48 bg-gray-200 rounded-t-lg flex items-center justify-center\">\n              <i className=\"fas fa-drill text-4xl text-gray-400\"></i>\n            </div>\n            <CardHeader>\n              <div className=\"flex justify-between items-start\">\n                <CardTitle className=\"text-lg\">Electric Drill Set</CardTitle>\n                <span className=\"bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded\">Power Tools</span>\n              </div>\n              <CardDescription>\n                Professional 18V cordless drill with multiple bits and case\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2 mb-4\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-500\">Hourly:</span>\n                  <span className=\"font-medium\">₹8/hr</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-500\">Daily:</span>\n                  <span className=\"font-medium\">₹25/day</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-500\">Weekly:</span>\n                  <span className=\"font-medium\">₹150/week</span>\n                </div>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded\">\n                  5 Available\n                </span>\n                <Button size=\"sm\" className=\"bg-blue-600 hover:bg-blue-700\">\n                  Book Now\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover:shadow-lg transition-shadow\">\n            <div className=\"h-48 bg-gray-200 rounded-t-lg flex items-center justify-center\">\n              <i className=\"fas fa-truck text-4xl text-gray-400\"></i>\n            </div>\n            <CardHeader>\n              <div className=\"flex justify-between items-start\">\n                <CardTitle className=\"text-lg\">Mini Excavator</CardTitle>\n                <span className=\"bg-yellow-100 text-yellow-800 text-xs font-medium px-2.5 py-0.5 rounded\">Heavy Machinery</span>\n              </div>\n              <CardDescription>\n                3-ton mini excavator perfect for landscaping and small construction\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2 mb-4\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-500\">Hourly:</span>\n                  <span className=\"font-medium\">₹65/hr</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-500\">Daily:</span>\n                  <span className=\"font-medium\">₹450/day</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-500\">Weekly:</span>\n                  <span className=\"font-medium\">₹2500/week</span>\n                </div>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded\">\n                  2 Available\n                </span>\n                <Button size=\"sm\" className=\"bg-blue-600 hover:bg-blue-700\">\n                  Book Now\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"text-center mt-12\">\n          <Button \n            onClick={() => window.location.href = '/catalog'}\n            size=\"lg\"\n            variant=\"outline\"\n            className=\"text-blue-600 border-blue-600 hover:bg-blue-50\"\n          >\n            View All Equipment\n          </Button>\n        </div>\n      </div>\n\n      {/* Features Section */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-3xl font-bold text-gray-900\">\n            Why Choose RentFlow?\n          </h2>\n          <p className=\"mt-4 text-gray-600\">\n            Everything you need for successful equipment rental\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          <Card>\n            <CardHeader>\n              <div className=\"p-2 bg-blue-50 rounded-lg w-fit\">\n                <i className=\"fas fa-tools text-blue-600 text-xl\"></i>\n              </div>\n              <CardTitle>Quality Equipment</CardTitle>\n              <CardDescription>\n                Professional-grade tools and machinery maintained to the highest standards\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"text-sm text-gray-600 space-y-2\">\n                <li>• Regular maintenance and inspection</li>\n                <li>• Latest models and technology</li>\n                <li>• Comprehensive insurance coverage</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <div className=\"p-2 bg-green-50 rounded-lg w-fit\">\n                <i className=\"fas fa-calendar text-green-600 text-xl\"></i>\n              </div>\n              <CardTitle>Flexible Rental Periods</CardTitle>\n              <CardDescription>\n                Choose from hourly, daily, weekly, or monthly rental options\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"text-sm text-gray-600 space-y-2\">\n                <li>• Competitive pricing for all periods</li>\n                <li>• Easy booking and scheduling</li>\n                <li>• Quick pickup and return process</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <div className=\"p-2 bg-purple-50 rounded-lg w-fit\">\n                <i className=\"fas fa-headset text-purple-600 text-xl\"></i>\n              </div>\n              <CardTitle>24/7 Support</CardTitle>\n              <CardDescription>\n                Round-the-clock customer support for any questions or issues\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"text-sm text-gray-600 space-y-2\">\n                <li>• Stripe integration</li>\n                <li>• Upfront & partial payments</li>\n                <li>• Late fee automation</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <div className=\"p-2 bg-orange-50 rounded-lg w-fit\">\n                <i className=\"fas fa-users text-orange-600 text-xl\"></i>\n              </div>\n              <CardTitle>Customer Portal</CardTitle>\n              <CardDescription>\n                Beautiful customer portal for browsing and booking products\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"text-sm text-gray-600 space-y-2\">\n                <li>• Product catalog</li>\n                <li>• Online booking</li>\n                <li>• Order tracking</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <div className=\"p-2 bg-red-50 rounded-lg w-fit\">\n                <i className=\"fas fa-bell text-red-600 text-xl\"></i>\n              </div>\n              <CardTitle>Smart Notifications</CardTitle>\n              <CardDescription>\n                Automated reminders for customers and staff\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"text-sm text-gray-600 space-y-2\">\n                <li>• Return reminders</li>\n                <li>• Pickup notifications</li>\n                <li>• Payment alerts</li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <div className=\"p-2 bg-indigo-50 rounded-lg w-fit\">\n                <i className=\"fas fa-chart-bar text-indigo-600 text-xl\"></i>\n              </div>\n              <CardTitle>Analytics & Reports</CardTitle>\n              <CardDescription>\n                Comprehensive reporting and business insights\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"text-sm text-gray-600 space-y-2\">\n                <li>• Revenue tracking</li>\n                <li>• Popular products</li>\n                <li>• Customer analytics</li>\n              </ul>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* CTA Section */}\n      <div className=\"bg-blue-600 py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-3xl font-bold text-white\">\n            Ready to transform your rental business?\n          </h2>\n          <p className=\"mt-4 text-blue-100 text-lg\">\n            Join businesses already using RentFlow to streamline their operations\n          </p>\n          <div className=\"mt-8\">\n            <Button \n              onClick={() => window.location.href = '/api/login'}\n              size=\"lg\"\n              variant=\"secondary\"\n              className=\"text-lg px-8 py-3\"\n            >\n              Start Your Free Trial\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-50 py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center mb-4\">\n              <i className=\"fas fa-box-open text-2xl text-blue-600 mr-2\"></i>\n              <span className=\"text-xl font-bold text-gray-900\">RentFlow</span>\n            </div>\n            <p className=\"text-gray-600\">\n              © 2024 RentFlow. All rights reserved.\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":16965},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/forms/booking-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport RentalCalendar from \"@/components/ui/rental-calendar\";\nimport type { ProductWithCategory } from \"@shared/schema\";\n\nconst bookingFormSchema = z.object({\n  startDate: z.date({\n    required_error: \"Start date is required\",\n  }),\n  endDate: z.date({\n    required_error: \"End date is required\",\n  }),\n  quantity: z.number().min(1, \"Quantity must be at least 1\"),\n  pickupAddress: z.string().min(1, \"Pickup address is required\"),\n  returnAddress: z.string().optional(),\n  notes: z.string().optional(),\n}).refine((data) => data.endDate > data.startDate, {\n  message: \"End date must be after start date\",\n  path: [\"endDate\"],\n});\n\ninterface BookingFormProps {\n  product: ProductWithCategory;\n  onSubmit: (data: z.infer<typeof bookingFormSchema>) => void;\n  isLoading: boolean;\n  preSelectedDates?: { from?: Date; to?: Date };\n}\n\nexport default function BookingForm({ product, onSubmit, isLoading, preSelectedDates }: BookingFormProps) {\n  const [selectedDates, setSelectedDates] = useState<{ from?: Date; to?: Date }>(preSelectedDates || {});\n  const [sameAddress, setSameAddress] = useState(true);\n\n  const form = useForm<z.infer<typeof bookingFormSchema>>({\n    resolver: zodResolver(bookingFormSchema),\n    defaultValues: {\n      quantity: 1,\n      pickupAddress: \"\",\n      returnAddress: \"\",\n      notes: \"\",\n      startDate: preSelectedDates?.from,\n      endDate: preSelectedDates?.to,\n    },\n  });\n\n  const calculateTotal = () => {\n    const { startDate, endDate, quantity } = form.watch();\n    \n    if (!startDate || !endDate || !quantity) return null;\n    \n    const duration = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\n    let unitRate = 0;\n    let rateType = \"\";\n    \n    if (duration <= 1 && product.hourlyRate) {\n      const hours = Math.max(1, Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60)));\n      unitRate = Number(product.hourlyRate) * hours;\n      rateType = `${hours} hour${hours > 1 ? 's' : ''}`;\n    } else if (duration <= 7 && product.dailyRate) {\n      unitRate = Number(product.dailyRate) * duration;\n      rateType = `${duration} day${duration > 1 ? 's' : ''}`;\n    } else if (duration <= 30 && product.weeklyRate) {\n      const weeks = Math.ceil(duration / 7);\n      unitRate = Number(product.weeklyRate) * weeks;\n      rateType = `${weeks} week${weeks > 1 ? 's' : ''}`;\n    } else if (product.monthlyRate) {\n      const months = Math.ceil(duration / 30);\n      unitRate = Number(product.monthlyRate) * months;\n      rateType = `${months} month${months > 1 ? 's' : ''}`;\n    } else if (product.dailyRate) {\n      unitRate = Number(product.dailyRate) * duration;\n      rateType = `${duration} day${duration > 1 ? 's' : ''}`;\n    }\n\n    const subtotal = unitRate * quantity;\n    const securityDeposit = product.securityDeposit ? Number(product.securityDeposit) : 0;\n    const total = subtotal + securityDeposit;\n\n    return {\n      duration,\n      rateType,\n      unitRate,\n      subtotal,\n      securityDeposit,\n      total,\n    };\n  };\n\n  const handleDateSelect = (dates: { from?: Date; to?: Date }) => {\n    setSelectedDates(dates);\n    if (dates.from) form.setValue(\"startDate\", dates.from);\n    if (dates.to) form.setValue(\"endDate\", dates.to);\n  };\n\n  const handleSubmit = (data: z.infer<typeof bookingFormSchema>) => {\n    const finalData = {\n      ...data,\n      returnAddress: sameAddress ? data.pickupAddress : data.returnAddress,\n    };\n    onSubmit(finalData);\n  };\n\n  const pricing = calculateTotal();\n  const maxQuantity = Math.min(product.availableQuantity || 0, 10);\n\n  return (\n    <div className=\"space-y-6\">\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n          {/* Date Selection */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Select Rental Period</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <RentalCalendar\n                  selected={selectedDates}\n                  onSelect={handleDateSelect}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"quantity\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Quantity</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          min={1}\n                          max={maxQuantity}\n                          {...field}\n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                        />\n                      </FormControl>\n                      <FormDescription>\n                        Maximum available: {product.availableQuantity}\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Address Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Delivery Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"pickupAddress\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Pickup Address</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Enter the address where we should deliver the equipment...\"\n                        className=\"resize-none\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  id=\"sameAddress\"\n                  checked={sameAddress}\n                  onChange={(e) => setSameAddress(e.target.checked)}\n                  className=\"rounded border-gray-300\"\n                />\n                <label htmlFor=\"sameAddress\" className=\"text-sm text-gray-700\">\n                  Return to same address\n                </label>\n              </div>\n\n              {!sameAddress && (\n                <FormField\n                  control={form.control}\n                  name=\"returnAddress\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Return Address</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Enter the address where we should collect the equipment...\"\n                          className=\"resize-none\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n\n              <FormField\n                control={form.control}\n                name=\"notes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Special Instructions (Optional)</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Any special instructions or requirements...\"\n                        className=\"resize-none\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </CardContent>\n          </Card>\n\n          {/* Pricing Summary */}\n          {pricing && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Booking Summary</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between\">\n                    <span>Rental Duration:</span>\n                    <span>{pricing.rateType}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Rate per unit:</span>\n                    <span>₹{pricing.unitRate.toLocaleString()}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Quantity:</span>\n                    <span>{form.watch(\"quantity\")} × ₹{pricing.unitRate.toLocaleString()}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Subtotal:</span>\n                    <span>₹{pricing.subtotal.toLocaleString()}</span>\n                  </div>\n                  {pricing.securityDeposit > 0 && (\n                    <>\n                      <div className=\"flex justify-between\">\n                        <span>Security Deposit:</span>\n                        <span>₹{pricing.securityDeposit.toLocaleString()}</span>\n                      </div>\n                      <Separator />\n                    </>\n                  )}\n                  <div className=\"flex justify-between text-lg font-bold\">\n                    <span>Total:</span>\n                    <span>₹{pricing.total.toLocaleString()}</span>\n                  </div>\n                  {pricing.securityDeposit > 0 && (\n                    <p className=\"text-sm text-gray-600\">\n                      * Security deposit will be refunded after equipment return\n                    </p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          <Button\n            type=\"submit\"\n            className=\"w-full bg-primary-500 hover:bg-primary-600\"\n            size=\"lg\"\n            disabled={isLoading || !pricing}\n          >\n            {isLoading ? (\n              <>\n                <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                Creating Order...\n              </>\n            ) : (\n              <>\n                <i className=\"fas fa-credit-card mr-2\"></i>\n                Proceed to Payment\n              </>\n            )}\n          </Button>\n        </form>\n      </Form>\n    </div>\n  );\n}\n","size_bytes":10909},"client/src/components/forms/product-form.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertProductSchema } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport type { ProductWithCategory, Category } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst productFormSchema = insertProductSchema.extend({\n  hourlyRate: z.string().optional(),\n  dailyRate: z.string().optional(),\n  weeklyRate: z.string().optional(),\n  monthlyRate: z.string().optional(),\n  securityDeposit: z.string().optional(),\n  totalQuantity: z.string(),\n  availableQuantity: z.string(),\n});\n\ninterface ProductFormProps {\n  product?: ProductWithCategory;\n  categories: Category[];\n  onSuccess: () => void;\n}\n\nexport default function ProductForm({ product, categories, onSuccess }: ProductFormProps) {\n  const { toast } = useToast();\n  \n  const form = useForm<z.infer<typeof productFormSchema>>({\n    resolver: zodResolver(productFormSchema),\n    defaultValues: {\n      name: product?.name || \"\",\n      description: product?.description || \"\",\n      categoryId: product?.categoryId || \"\",\n      imageUrl: product?.imageUrl || \"\",\n      isRentable: product?.isRentable ?? true,\n      totalQuantity: product?.totalQuantity?.toString() || \"1\",\n      availableQuantity: product?.availableQuantity?.toString() || \"1\",\n      hourlyRate: product?.hourlyRate?.toString() || \"\",\n      dailyRate: product?.dailyRate?.toString() || \"\",\n      weeklyRate: product?.weeklyRate?.toString() || \"\",\n      monthlyRate: product?.monthlyRate?.toString() || \"\",\n      securityDeposit: product?.securityDeposit?.toString() || \"\",\n    },\n  });\n\n  const mutation = useMutation({\n    mutationFn: async (data: z.infer<typeof productFormSchema>) => {\n      const payload = {\n        ...data,\n        totalQuantity: parseInt(data.totalQuantity),\n        availableQuantity: parseInt(data.availableQuantity),\n        hourlyRate: data.hourlyRate ? parseFloat(data.hourlyRate) : null,\n        dailyRate: data.dailyRate ? parseFloat(data.dailyRate) : null,\n        weeklyRate: data.weeklyRate ? parseFloat(data.weeklyRate) : null,\n        monthlyRate: data.monthlyRate ? parseFloat(data.monthlyRate) : null,\n        securityDeposit: data.securityDeposit ? parseFloat(data.securityDeposit) : null,\n        categoryId: data.categoryId || null,\n        imageUrl: data.imageUrl || null,\n      };\n\n      if (product) {\n        await apiRequest(\"PUT\", `/api/products/${product.id}`, payload);\n      } else {\n        await apiRequest(\"POST\", \"/api/products\", payload);\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: `Product ${product ? 'updated' : 'created'} successfully`,\n      });\n      onSuccess();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: `Failed to ${product ? 'update' : 'create'} product`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof productFormSchema>) => {\n    mutation.mutate(data);\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"name\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Product Name</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"Enter product name\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"categoryId\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Category</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value || undefined}>\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select a category\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {categories.map((category) => (\n                      <SelectItem key={category.id} value={category.id}>\n                        {category.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"description\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Description</FormLabel>\n              <FormControl>\n                <Textarea \n                  placeholder=\"Describe the product...\"\n                  className=\"resize-none\"\n                  {...field}\n                  value={field.value || \"\"}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"imageUrl\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Image URL</FormLabel>\n              <FormControl>\n                <Input placeholder=\"https://example.com/image.jpg\" {...field} value={field.value || \"\"} />\n              </FormControl>\n              <FormDescription>\n                Optional: URL to an image of the product\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"totalQuantity\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Total Quantity</FormLabel>\n                <FormControl>\n                  <Input type=\"number\" min=\"1\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"availableQuantity\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Available Quantity</FormLabel>\n                <FormControl>\n                  <Input type=\"number\" min=\"0\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"space-y-4\">\n          <h4 className=\"text-lg font-semibold\">Pricing</h4>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <FormField\n              control={form.control}\n              name=\"hourlyRate\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Hourly Rate (₹)</FormLabel>\n                  <FormControl>\n                    <Input type=\"number\" min=\"0\" step=\"0.01\" placeholder=\"0.00\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"dailyRate\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Daily Rate (₹)</FormLabel>\n                  <FormControl>\n                    <Input type=\"number\" min=\"0\" step=\"0.01\" placeholder=\"0.00\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"weeklyRate\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Weekly Rate (₹)</FormLabel>\n                  <FormControl>\n                    <Input type=\"number\" min=\"0\" step=\"0.01\" placeholder=\"0.00\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"monthlyRate\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Monthly Rate (₹)</FormLabel>\n                  <FormControl>\n                    <Input type=\"number\" min=\"0\" step=\"0.01\" placeholder=\"0.00\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n\n          <FormField\n            control={form.control}\n            name=\"securityDeposit\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Security Deposit (₹)</FormLabel>\n                <FormControl>\n                  <Input type=\"number\" min=\"0\" step=\"0.01\" placeholder=\"0.00\" {...field} />\n                </FormControl>\n                <FormDescription>\n                  Refundable security deposit amount\n                </FormDescription>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"isRentable\"\n          render={({ field }) => (\n            <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n              <div className=\"space-y-0.5\">\n                <FormLabel className=\"text-base\">\n                  Available for Rental\n                </FormLabel>\n                <FormDescription>\n                  Enable this product for customer bookings\n                </FormDescription>\n              </div>\n              <FormControl>\n                <Switch\n                  checked={field.value || false}\n                  onCheckedChange={field.onChange}\n                />\n              </FormControl>\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex justify-end space-x-4\">\n          <Button type=\"button\" variant=\"outline\" onClick={onSuccess}>\n            Cancel\n          </Button>\n          <Button type=\"submit\" disabled={mutation.isPending}>\n            {mutation.isPending ? (\n              <>\n                <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                {product ? 'Updating...' : 'Creating...'}\n              </>\n            ) : (\n              <>\n                <i className=\"fas fa-save mr-2\"></i>\n                {product ? 'Update Product' : 'Create Product'}\n              </>\n            )}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":11536},"client/src/components/layout/admin-layout.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AdminLayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function AdminLayout({ children }: AdminLayoutProps) {\n  const { user } = useAuth();\n  const [location, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"/api/auth/logout\", \"POST\");\n    },\n    onSuccess: () => {\n      queryClient.removeQueries();\n      window.location.href = \"/\";\n    },\n    onError: () => {\n      toast({\n        title: \"Logout Error\",\n        description: \"Failed to logout properly\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const navigation = [\n    { name: \"Dashboard\", href: \"/\", icon: \"fas fa-chart-bar\", current: location === \"/\" },\n    { name: \"Products\", href: \"/admin/products\", icon: \"fas fa-box\", current: location === \"/admin/products\" },\n    { name: \"Orders\", href: \"/admin/orders\", icon: \"fas fa-shopping-cart\", current: location === \"/admin/orders\" },\n    { name: \"Invoices\", href: \"/admin/invoices\", icon: \"fas fa-file-invoice\", current: location === \"/admin/invoices\" },\n    { name: \"Transfers\", href: \"/admin/transfers\", icon: \"fas fa-truck\", current: location === \"/admin/transfers\" },\n    { name: \"Customers\", href: \"/admin/customers\", icon: \"fas fa-users\", current: location === \"/admin/customers\" },\n    { name: \"Mobile App\", href: \"/admin/mobile\", icon: \"fas fa-mobile-alt\", current: location === \"/admin/mobile\" },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Top Navigation */}\n      <nav className=\"bg-white shadow-sm border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between h-16\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0 flex items-center\">\n                <i className=\"fas fa-box-open text-2xl text-primary-500 mr-2\"></i>\n                <h1 className=\"text-xl font-bold text-gray-900\">RentFlow</h1>\n              </div>\n              <div className=\"hidden md:ml-10 md:flex md:space-x-8\">\n                {navigation.map((item) => (\n                  <button\n                    key={item.name}\n                    onClick={() => setLocation(item.href)}\n                    className={`${\n                      item.current\n                        ? \"text-primary-600 border-b-2 border-primary-500\"\n                        : \"text-gray-500 hover:text-gray-700\"\n                    } px-1 pt-1 text-sm font-medium`}\n                  >\n                    {item.name}\n                  </button>\n                ))}\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <button className=\"text-gray-400 hover:text-gray-500 relative\">\n                <i className=\"fas fa-bell text-lg\"></i>\n                <span className=\"absolute -mt-1 ml-2 px-1.5 py-0.5 text-xs bg-red-500 text-white rounded-full\">\n                  3\n                </span>\n              </button>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"h-8 w-8 rounded-full bg-gradient-to-br from-primary-500 to-purple-600 flex items-center justify-center\">\n                  <span className=\"text-white font-semibold text-sm\">\n                    {user?.name?.charAt(0) || user?.email?.charAt(0) || 'A'}\n                  </span>\n                </div>\n                <span className=\"text-sm font-medium text-gray-700\">\n                  {user?.name || user?.email}\n                </span>\n                <div className=\"relative\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => logoutMutation.mutate()}\n                    disabled={logoutMutation.isPending}\n                    className=\"text-gray-400 hover:text-gray-600\"\n                  >\n                    <i className=\"fas fa-sign-out-alt mr-1\"></i>\n                    {logoutMutation.isPending ? \"Logging out...\" : \"Logout\"}\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {children}\n      </div>\n    </div>\n  );\n}\n","size_bytes":4670},"client/src/components/layout/customer-layout.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Home, ShoppingCart, Heart, Phone, User, LogOut, Smartphone } from \"lucide-react\";\n\ninterface CustomerLayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function CustomerLayout({ children }: CustomerLayoutProps) {\n  const { user } = useAuth();\n  const [location, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"/api/auth/logout\", \"POST\");\n    },\n    onSuccess: () => {\n      queryClient.removeQueries();\n      window.location.href = \"/\";\n    },\n    onError: () => {\n      toast({\n        title: \"Logout Error\",\n        description: \"Failed to logout properly\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const navigation = [\n    { name: \"Home\", href: \"/\", icon: Home, current: location === \"/\" || location === \"/catalog\" },\n    { name: \"Rental Shop\", href: \"/catalog\", icon: ShoppingCart, current: location.includes(\"/catalog\") || location.includes(\"/booking\") },\n    { name: \"Orders\", href: \"/orders\", icon: ShoppingCart, current: location === \"/orders\" },\n    { name: \"Billing\", href: \"/billing\", icon: ShoppingCart, current: location === \"/billing\" },\n    { name: \"Wishlist\", href: \"/wishlist\", icon: Heart, current: location === \"/wishlist\" },\n    { name: \"Contact us\", href: \"/contact\", icon: Phone, current: location === \"/contact\" },\n    { name: \"Mobile App\", href: \"/mobile\", icon: Smartphone, current: location === \"/mobile\" },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Modern Header Navigation */}\n      <header className=\"bg-white shadow-sm border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            {/* Left: Logo */}\n            <div className=\"flex items-center\">\n              <ShoppingCart className=\"h-8 w-8 text-primary-600 mr-2\" />\n              <span className=\"text-xl font-bold text-gray-900\">RentFlow</span>\n            </div>\n\n            {/* Center: Navigation */}\n            <nav className=\"hidden md:flex space-x-8\">\n              {navigation.map((item) => {\n                const IconComponent = item.icon;\n                return (\n                  <button\n                    key={item.name}\n                    data-testid={`nav-${item.name.toLowerCase().replace(' ', '-')}`}\n                    onClick={() => setLocation(item.href)}\n                    className={`${\n                      item.current\n                        ? \"text-primary-600 border-b-2 border-primary-500\"\n                        : \"text-gray-500 hover:text-gray-700\"\n                    } flex items-center px-1 py-4 text-sm font-medium transition-colors`}\n                  >\n                    <IconComponent className=\"h-4 w-4 mr-2\" />\n                    {item.name}\n                  </button>\n                );\n              })}\n            </nav>\n\n            {/* Right: User Profile & Actions */}\n            <div className=\"flex items-center space-x-4\">\n              {/* Shopping Cart Icon */}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                data-testid=\"cart-icon\"\n                onClick={() => setLocation(\"/orders\")}\n                className=\"relative\"\n              >\n                <ShoppingCart className=\"h-5 w-5\" />\n              </Button>\n\n              {/* User Profile Dropdown */}\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    data-testid=\"user-profile-dropdown\"\n                    className=\"flex items-center space-x-2\"\n                  >\n                    <div className=\"h-8 w-8 rounded-full bg-primary-100 flex items-center justify-center\">\n                      <span className=\"text-primary-600 font-semibold text-sm\">\n                        {user?.name?.charAt(0) || user?.email?.charAt(0) || 'U'}\n                      </span>\n                    </div>\n                    <span className=\"text-sm hidden sm:block\">\n                      {user?.name || 'adam'}\n                    </span>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\" className=\"w-48\">\n                  <DropdownMenuItem\n                    data-testid=\"dropdown-profile\"\n                    onClick={() => setLocation(\"/profile\")}\n                  >\n                    <User className=\"h-4 w-4 mr-2\" />\n                    Profile\n                  </DropdownMenuItem>\n                  <DropdownMenuItem\n                    data-testid=\"dropdown-orders\"\n                    onClick={() => setLocation(\"/orders\")}\n                  >\n                    <ShoppingCart className=\"h-4 w-4 mr-2\" />\n                    My Orders\n                  </DropdownMenuItem>\n                  <DropdownMenuItem\n                    data-testid=\"dropdown-logout\"\n                    onClick={() => logoutMutation.mutate()}\n                    disabled={logoutMutation.isPending}\n                  >\n                    <LogOut className=\"h-4 w-4 mr-2\" />\n                    {logoutMutation.isPending ? \"Logging out...\" : \"Logout\"}\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          </div>\n\n          {/* Mobile Navigation */}\n          <div className=\"md:hidden border-t border-gray-200 pt-2 pb-2\">\n            <div className=\"flex justify-around\">\n              {navigation.map((item) => {\n                const IconComponent = item.icon;\n                return (\n                  <button\n                    key={item.name}\n                    data-testid={`mobile-nav-${item.name.toLowerCase().replace(' ', '-')}`}\n                    onClick={() => setLocation(item.href)}\n                    className={`${\n                      item.current ? \"text-primary-600\" : \"text-gray-500\"\n                    } flex flex-col items-center py-2 text-xs`}\n                  >\n                    <IconComponent className=\"h-5 w-5 mb-1\" />\n                    {item.name}\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"flex-1\">\n        {children}\n      </main>\n    </div>\n  );\n}\n","size_bytes":6907},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }","size_bytes":709},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/product-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport type { ProductWithCategory } from \"@shared/schema\";\n\ninterface ProductCardProps {\n  product: ProductWithCategory;\n  onBook: () => void;\n  selectedDates?: { from?: Date; to?: Date };\n}\n\nexport default function ProductCard({ product, onBook, selectedDates }: ProductCardProps) {\n  const isAvailable = product.availableQuantity && product.availableQuantity > 0;\n  \n  const calculatePrice = () => {\n    if (!selectedDates?.from || !selectedDates?.to) {\n      return null;\n    }\n    \n    const duration = Math.ceil((selectedDates.to.getTime() - selectedDates.from.getTime()) / (1000 * 60 * 60 * 24));\n    \n    if (duration <= 1 && product.hourlyRate) {\n      const hours = Math.max(1, Math.ceil((selectedDates.to.getTime() - selectedDates.from.getTime()) / (1000 * 60 * 60)));\n      return { amount: Number(product.hourlyRate) * hours, unit: `${hours} hour${hours > 1 ? 's' : ''}` };\n    } else if (duration <= 7 && product.dailyRate) {\n      return { amount: Number(product.dailyRate) * duration, unit: `${duration} day${duration > 1 ? 's' : ''}` };\n    } else if (duration <= 30 && product.weeklyRate) {\n      const weeks = Math.ceil(duration / 7);\n      return { amount: Number(product.weeklyRate) * weeks, unit: `${weeks} week${weeks > 1 ? 's' : ''}` };\n    } else if (product.monthlyRate) {\n      const months = Math.ceil(duration / 30);\n      return { amount: Number(product.monthlyRate) * months, unit: `${months} month${months > 1 ? 's' : ''}` };\n    } else if (product.dailyRate) {\n      return { amount: Number(product.dailyRate) * duration, unit: `${duration} day${duration > 1 ? 's' : ''}` };\n    }\n    \n    return null;\n  };\n\n  const calculatedPrice = calculatePrice();\n\n  return (\n    <Card className=\"hover:shadow-md transition-shadow\">\n      <div className=\"aspect-video bg-gradient-to-br from-gray-100 to-gray-200 rounded-t-lg flex items-center justify-center\">\n        {product.imageUrl ? (\n          <img \n            src={product.imageUrl} \n            alt={product.name}\n            className=\"w-full h-full object-cover rounded-t-lg\"\n          />\n        ) : (\n          <i className=\"fas fa-box text-4xl text-gray-400\"></i>\n        )}\n      </div>\n      <CardContent className=\"p-4\">\n        <div className=\"flex justify-between items-start mb-2\">\n          <h4 className=\"text-lg font-semibold text-gray-900\">{product.name}</h4>\n          {product.category && (\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              {product.category.name}\n            </Badge>\n          )}\n        </div>\n        \n        <p className=\"text-sm text-gray-600 mb-3 line-clamp-2\">{product.description}</p>\n        \n        {calculatedPrice ? (\n          <div className=\"mb-3 p-2 bg-primary-50 rounded-lg\">\n            <div className=\"text-lg font-bold text-primary-700\">\n              ₹{calculatedPrice.amount.toLocaleString()}\n            </div>\n            <div className=\"text-xs text-primary-600\">for {calculatedPrice.unit}</div>\n          </div>\n        ) : (\n          <div className=\"space-y-1 mb-3\">\n            {product.hourlyRate && (\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-gray-500\">Hourly:</span>\n                <span className=\"font-medium\">₹{Number(product.hourlyRate)}/hr</span>\n              </div>\n            )}\n            {product.dailyRate && (\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-gray-500\">Daily:</span>\n                <span className=\"font-medium\">₹{Number(product.dailyRate)}/day</span>\n              </div>\n            )}\n            {product.weeklyRate && (\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-gray-500\">Weekly:</span>\n                <span className=\"font-medium\">₹{Number(product.weeklyRate)}/week</span>\n              </div>\n            )}\n          </div>\n        )}\n\n        <div className=\"flex items-center justify-between\">\n          <Badge \n            variant={isAvailable ? \"default\" : \"destructive\"}\n            className=\"text-xs\"\n          >\n            {isAvailable \n              ? `${product.availableQuantity} Available` \n              : \"Out of Stock\"\n            }\n          </Badge>\n          <Button \n            onClick={onBook}\n            disabled={!isAvailable}\n            size=\"sm\"\n            className={`${isAvailable \n              ? \"bg-primary-500 hover:bg-primary-600 text-white\" \n              : \"bg-gray-300 text-gray-500 cursor-not-allowed\"\n            }`}\n          >\n            {isAvailable ? \"Book Now\" : \"Unavailable\"}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4839},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/rental-calendar.tsx":{"content":"import { useState } from \"react\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\nimport { format } from \"date-fns\";\n\ninterface RentalCalendarProps {\n  selected?: { from?: Date; to?: Date };\n  onSelect?: (range: { from?: Date; to?: Date }) => void;\n  className?: string;\n}\n\nexport default function RentalCalendar({ selected, onSelect, className }: RentalCalendarProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [range, setRange] = useState<{ from?: Date; to?: Date }>(selected || {});\n\n  const handleSelect = (selectedRange: { from?: Date; to?: Date }) => {\n    setRange(selectedRange);\n    onSelect?.(selectedRange);\n    \n    // Close popover when both dates are selected\n    if (selectedRange.from && selectedRange.to) {\n      setIsOpen(false);\n    }\n  };\n\n  const formatDateRange = () => {\n    if (!range.from) return \"Select rental dates\";\n    if (!range.to) return format(range.from, \"MMM dd, yyyy\");\n    return `${format(range.from, \"MMM dd\")} - ${format(range.to, \"MMM dd, yyyy\")}`;\n  };\n\n  return (\n    <div className={className}>\n      <Popover open={isOpen} onOpenChange={setIsOpen}>\n        <PopoverTrigger asChild>\n          <Button\n            variant=\"outline\"\n            className={cn(\n              \"w-full justify-start text-left font-normal\",\n              !range.from && \"text-muted-foreground\"\n            )}\n          >\n            <i className=\"fas fa-calendar mr-2\"></i>\n            {formatDateRange()}\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-auto p-0\" align=\"start\">\n          <Calendar\n            initialFocus\n            mode=\"range\"\n            defaultMonth={range.from}\n            selected={{ from: range.from, to: range.to }}\n            onSelect={(selectedRange) => {\n              if (selectedRange) {\n                handleSelect(selectedRange);\n              }\n            }}\n            numberOfMonths={2}\n            disabled={(date) => date < new Date()}\n          />\n          <div className=\"p-3 border-t border-gray-200\">\n            <div className=\"flex justify-between space-x-2\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => {\n                  setRange({});\n                  onSelect?.({});\n                }}\n              >\n                Clear\n              </Button>\n              <Button \n                size=\"sm\"\n                onClick={() => setIsOpen(false)}\n                disabled={!range.from}\n              >\n                Done\n              </Button>\n            </div>\n          </div>\n        </PopoverContent>\n      </Popover>\n    </div>\n  );\n}\n","size_bytes":2813},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/stats-card.tsx":{"content":"interface StatsCardProps {\n  title: string;\n  value: string;\n  icon: string;\n  iconColor: string;\n  iconBg: string;\n  trend?: string;\n  trendPositive?: boolean;\n}\n\nexport default function StatsCard({\n  title,\n  value,\n  icon,\n  iconColor,\n  iconBg,\n  trend,\n  trendPositive = true,\n}: StatsCardProps) {\n  return (\n    <div className=\"bg-white rounded-lg shadow-sm p-6 border border-gray-200\">\n      <div className=\"flex items-center\">\n        <div className={`p-2 ${iconBg} rounded-lg`}>\n          <i className={`${icon} ${iconColor} text-xl`}></i>\n        </div>\n        <div className=\"ml-4\">\n          <p className=\"text-sm font-medium text-gray-600\">{title}</p>\n          <p className=\"text-2xl font-bold text-gray-900\">{value}</p>\n        </div>\n      </div>\n      {trend && (\n        <div className=\"mt-4\">\n          <span className={`text-sm ${trendPositive ? 'text-green-600' : 'text-red-600'}`}>\n            <i className={`fas fa-${trendPositive ? 'arrow-up' : 'exclamation-triangle'} text-xs mr-1`}></i>\n            {trend}\n          </span>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":1094},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":771},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/admin/customers.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport AdminLayout from \"@/components/layout/admin-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport type { User, OrderWithItems } from \"@shared/schema\";\n\nexport default function AdminCustomers() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: orders, isLoading: ordersLoading } = useQuery<OrderWithItems[]>({\n    queryKey: [\"/api/orders\"],\n    enabled: isAuthenticated,\n  });\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  // Extract unique customers from orders\n  const customers = orders ? Array.from(\n    new Map(orders.map((order: OrderWithItems) => [order.customerId, order.customer])).values()\n  ).filter(Boolean) as User[] : [];\n\n  // Calculate customer stats\n  const getCustomerStats = (customerId: string) => {\n    const customerOrders = orders?.filter((order: OrderWithItems) => order.customerId === customerId) || [];\n    const totalOrders = customerOrders.length;\n    const totalSpent = customerOrders.reduce((sum: number, order: OrderWithItems) => sum + Number(order.totalAmount), 0);\n    const activeOrders = customerOrders.filter((order: OrderWithItems) => order.status === 'active').length;\n    \n    return { totalOrders, totalSpent, activeOrders };\n  };\n\n  const formatDate = (date: string | Date | null | undefined) => {\n    if (!date) return 'N/A';\n    return new Date(date).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  return (\n    <AdminLayout>\n      <div className=\"space-y-8\">\n        {/* Header */}\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Customers</h2>\n          <p className=\"text-gray-600\">Manage your customer relationships and history</p>\n        </div>\n\n        {/* Customers List */}\n        {ordersLoading ? (\n          <div className=\"flex justify-center py-12\">\n            <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n          </div>\n        ) : customers.length === 0 ? (\n          <Card>\n            <CardContent className=\"py-12 text-center\">\n              <i className=\"fas fa-users text-gray-300 text-6xl mb-4\"></i>\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No customers yet</h3>\n              <p className=\"text-gray-600\">Customers will appear here when they place orders</p>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {customers.map((customer) => {\n              const stats = getCustomerStats(customer.id);\n              \n              return (\n                <Card key={customer.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"h-12 w-12 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center\">\n                          <span className=\"text-white font-semibold text-lg\">\n                            {customer.name?.charAt(0) || customer.email?.charAt(0) || '?'}\n                          </span>\n                        </div>\n                        <div>\n                          <CardTitle className=\"text-lg\">\n                            {customer.name}\n                          </CardTitle>\n                          <p className=\"text-sm text-gray-600\">{customer.email}</p>\n                          {customer.phone && (\n                            <p className=\"text-sm text-gray-600\">\n                              <i className=\"fas fa-phone mr-1\"></i>\n                              {customer.phone}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                      <Badge variant=\"outline\">\n                        {customer.role}\n                      </Badge>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {/* Stats */}\n                      <div className=\"grid grid-cols-3 gap-4\">\n                        <div className=\"text-center\">\n                          <div className=\"text-2xl font-bold text-gray-900\">{stats.totalOrders}</div>\n                          <div className=\"text-xs text-gray-600\">Total Orders</div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-2xl font-bold text-gray-900\">\n                            ₹{stats.totalSpent.toLocaleString()}\n                          </div>\n                          <div className=\"text-xs text-gray-600\">Total Spent</div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-2xl font-bold text-gray-900\">{stats.activeOrders}</div>\n                          <div className=\"text-xs text-gray-600\">Active Orders</div>\n                        </div>\n                      </div>\n\n                      {/* Address */}\n                      {customer.address && (\n                        <div>\n                          <h5 className=\"font-medium text-gray-900 mb-1\">Address</h5>\n                          <p className=\"text-sm text-gray-600\">{customer.address}</p>\n                        </div>\n                      )}\n\n                      {/* Member Since */}\n                      <div className=\"flex justify-between items-center text-sm text-gray-600\">\n                        <span>Member since {formatDate(customer.createdAt)}</span>\n                        <span>Last update {formatDate(customer.updatedAt)}</span>\n                      </div>\n\n                      {/* Actions */}\n                      <div className=\"flex space-x-2 pt-4 border-t border-gray-200\">\n                        <Button variant=\"outline\" size=\"sm\" className=\"flex-1\">\n                          <i className=\"fas fa-eye mr-2\"></i>\n                          View Orders\n                        </Button>\n                        <Button variant=\"outline\" size=\"sm\" className=\"flex-1\">\n                          <i className=\"fas fa-envelope mr-2\"></i>\n                          Contact\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        )}\n      </div>\n    </AdminLayout>\n  );\n}\n","size_bytes":7510},"client/src/pages/admin/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport AdminLayout from \"@/components/layout/admin-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ShoppingCart, Package, Users, TrendingUp, Calendar, Eye, ChevronRight } from \"lucide-react\";\nimport type { OrderWithItems } from \"@shared/schema\";\n\nexport default function AdminDashboard() {\n  const [timeFilter, setTimeFilter] = useState(\"30\");\n  const [, setLocation] = useLocation();\n\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const { data: orders, isLoading: ordersLoading } = useQuery({\n    queryKey: [\"/api/orders\"],\n  });\n\n  const { data: products, isLoading: productsLoading } = useQuery({\n    queryKey: [\"/api/products\"],\n  });\n\n  const { data: categories, isLoading: categoriesLoading } = useQuery({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const recentOrders = Array.isArray(orders) ? orders.slice(0, 5) : [];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'draft': return 'bg-gray-100 text-gray-800';\n      case 'quoted': return 'bg-blue-100 text-blue-800';\n      case 'confirmed': return 'bg-yellow-100 text-yellow-800'; \n      case 'paid': return 'bg-green-100 text-green-800';\n      case 'picked_up': return 'bg-orange-100 text-orange-800';\n      case 'active': return 'bg-purple-100 text-purple-800';\n      case 'returned': return 'bg-indigo-100 text-indigo-800';\n      case 'completed': return 'bg-green-100 text-green-800';\n      case 'cancelled': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <AdminLayout>\n      <div className=\"space-y-8\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">RentFlow Admin Dashboard</h1>\n            <p className=\"text-gray-600 mt-1\">Manage your rental equipment business</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <Select value={timeFilter} onValueChange={setTimeFilter}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"Time period\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"7\">Last 7 days</SelectItem>\n                <SelectItem value=\"30\">Last 30 days</SelectItem>\n                <SelectItem value=\"90\">Last 90 days</SelectItem>\n                <SelectItem value=\"365\">Last year</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {/* Key Metrics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card className=\"border-l-4 border-l-blue-500\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600 uppercase tracking-wide\">Total Orders</p>\n                  <p className=\"text-3xl font-bold text-gray-900 mt-2\">\n                    {Array.isArray(orders) ? orders.length : 0}\n                  </p>\n                </div>\n                <div className=\"h-12 w-12 bg-blue-100 rounded-xl flex items-center justify-center\">\n                  <ShoppingCart className=\"h-6 w-6 text-blue-600\" />\n                </div>\n              </div>\n              <div className=\"mt-4 flex items-center text-sm\">\n                <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                <span className=\"text-green-600 font-medium\">+12%</span>\n                <span className=\"text-gray-600 ml-2\">from last month</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-l-4 border-l-green-500\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600 uppercase tracking-wide\">Total Revenue</p>\n                  <p className=\"text-3xl font-bold text-gray-900 mt-2\">\n                    {(stats as any)?.monthlyRevenue || '₹0'}\n                  </p>\n                </div>\n                <div className=\"h-12 w-12 bg-green-100 rounded-xl flex items-center justify-center\">\n                  <TrendingUp className=\"h-6 w-6 text-green-600\" />\n                </div>\n              </div>\n              <div className=\"mt-4 flex items-center text-sm\">\n                <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                <span className=\"text-green-600 font-medium\">+18%</span>\n                <span className=\"text-gray-600 ml-2\">from last month</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-l-4 border-l-orange-500\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600 uppercase tracking-wide\">Active Rentals</p>\n                  <p className=\"text-3xl font-bold text-gray-900 mt-2\">\n                    {(stats as any)?.activeRentals || recentOrders.filter((order: any) => order.status === 'active').length}\n                  </p>\n                </div>\n                <div className=\"h-12 w-12 bg-orange-100 rounded-xl flex items-center justify-center\">\n                  <Calendar className=\"h-6 w-6 text-orange-600\" />\n                </div>\n              </div>\n              <div className=\"mt-4 flex items-center text-sm\">\n                <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                <span className=\"text-green-600 font-medium\">+5%</span>\n                <span className=\"text-gray-600 ml-2\">from last month</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-l-4 border-l-purple-500\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600 uppercase tracking-wide\">Equipment Items</p>\n                  <p className=\"text-3xl font-bold text-gray-900 mt-2\">\n                    {Array.isArray(products) ? products.length : 0}\n                  </p>\n                </div>\n                <div className=\"h-12 w-12 bg-purple-100 rounded-xl flex items-center justify-center\">\n                  <Package className=\"h-6 w-6 text-purple-600\" />\n                </div>\n              </div>\n              <div className=\"mt-4 flex items-center text-sm\">\n                <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                <span className=\"text-green-600 font-medium\">+7</span>\n                <span className=\"text-gray-600 ml-2\">new items</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          <Button \n            className=\"p-4 h-auto flex-col space-y-2\" \n            variant=\"outline\" \n            data-testid=\"add-equipment-btn\"\n            onClick={() => setLocation('/admin/products')}\n          >\n            <Package className=\"h-6 w-6\" />\n            <span>Add Equipment</span>\n          </Button>\n          <Button \n            className=\"p-4 h-auto flex-col space-y-2\" \n            variant=\"outline\" \n            data-testid=\"view-orders-btn\"\n            onClick={() => setLocation('/admin/orders')}\n          >\n            <ShoppingCart className=\"h-6 w-6\" />\n            <span>View Orders</span>\n          </Button>\n          <Button \n            className=\"p-4 h-auto flex-col space-y-2\" \n            variant=\"outline\" \n            data-testid=\"manage-customers-btn\"\n            onClick={() => setLocation('/admin/customers')}\n          >\n            <Users className=\"h-6 w-6\" />\n            <span>Manage Customers</span>\n          </Button>\n          <Button \n            className=\"p-4 h-auto flex-col space-y-2\" \n            variant=\"outline\" \n            data-testid=\"view-reports-btn\"\n            onClick={() => setLocation('/admin/transfers')}\n          >\n            <TrendingUp className=\"h-6 w-6\" />\n            <span>View Reports</span>\n          </Button>\n        </div>\n\n        {/* Recent Rental Orders */}\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between\">\n            <CardTitle className=\"flex items-center\">\n              <ShoppingCart className=\"h-5 w-5 mr-2\" />\n              Recent Rental Orders\n            </CardTitle>\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              data-testid=\"view-all-orders-btn\"\n              onClick={() => setLocation('/admin/orders')}\n            >\n              <Eye className=\"h-4 w-4 mr-2\" />\n              View All Orders\n            </Button>\n          </CardHeader>\n          <CardContent>\n            {ordersLoading ? (\n              <div className=\"space-y-4\">\n                {[...Array(5)].map((_, i) => (\n                  <div key={i} className=\"animate-pulse flex items-center space-x-4 p-4 border rounded-lg\">\n                    <div className=\"h-4 bg-gray-200 rounded w-16\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-32\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-24\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-20\"></div>\n                  </div>\n                ))}\n              </div>\n            ) : recentOrders.length === 0 ? (\n              <div className=\"text-center py-12 text-gray-500\">\n                <ShoppingCart className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No rental orders yet</h3>\n                <p className=\"text-gray-600\">Once customers start renting equipment, their orders will appear here.</p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {recentOrders.map((order: OrderWithItems) => (\n                  <div key={order.id} className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 transition-colors\" data-testid={`order-${order.id}`}>\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"h-10 w-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                        <Package className=\"h-5 w-5 text-blue-600\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-gray-900\">Order #{order.orderNumber}</p>\n                        <p className=\"text-sm text-gray-600\">\n                          {order.customer?.name || order.customer?.email || 'Unknown Customer'}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"text-right\">\n                        <p className=\"font-medium text-gray-900\">₹{order.totalAmount}</p>\n                        <p className=\"text-sm text-gray-600\">\n                          {order.createdAt ? new Date(order.createdAt).toLocaleDateString() : 'N/A'}\n                        </p>\n                      </div>\n                      <Badge className={getStatusColor(order.status)}>\n                        {order.status}\n                      </Badge>\n                      <ChevronRight className=\"h-4 w-4 text-gray-400\" />\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Equipment Categories Overview */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Package className=\"h-5 w-5 mr-2\" />\n              Equipment Categories\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {categoriesLoading ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                {[...Array(3)].map((_, i) => (\n                  <div key={i} className=\"animate-pulse p-4 border rounded-lg\">\n                    <div className=\"h-4 bg-gray-200 rounded w-24 mb-2\"></div>\n                    <div className=\"h-6 bg-gray-200 rounded w-16\"></div>\n                  </div>\n                ))}\n              </div>\n            ) : Array.isArray(categories) && categories.length > 0 ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                {categories.map((category: any) => (\n                  <div key={category.id} className=\"p-4 border rounded-lg\" data-testid={`category-${category.id}`}>\n                    <h4 className=\"font-medium text-gray-900\">{category.name}</h4>\n                    <p className=\"text-2xl font-bold text-gray-900 mt-1\">\n                      {Array.isArray(products) ? products.filter(p => p.categoryId === category.id).length : 0}\n                    </p>\n                    <p className=\"text-sm text-gray-600\">items available</p>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8 text-gray-500\">\n                <Package className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                <p>No equipment categories found. Add categories to organize your rental items.</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </AdminLayout>\n  );\n}","size_bytes":13966},"client/src/pages/admin/orders.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport AdminLayout from \"@/components/layout/admin-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport type { OrderWithItems } from \"@shared/schema\";\n\nexport default function AdminOrders() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"ALL\");\n  const [selectedOrder, setSelectedOrder] = useState<OrderWithItems | null>(null);\n  const [isOrderDialogOpen, setIsOrderDialogOpen] = useState(false);\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: orders, isLoading: ordersLoading } = useQuery({\n    queryKey: [\"/api/orders\"],\n    enabled: isAuthenticated,\n  });\n\n  const updateOrderMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      await apiRequest(\"PUT\", `/api/orders/${id}`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      toast({\n        title: \"Success\",\n        description: \"Order status updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update order status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'draft': return 'bg-gray-100 text-gray-800';\n      case 'quoted': return 'bg-blue-100 text-blue-800';\n      case 'confirmed': return 'bg-yellow-100 text-yellow-800'; \n      case 'paid': return 'bg-green-100 text-green-800';\n      case 'picked_up': return 'bg-orange-100 text-orange-800';\n      case 'active': return 'bg-purple-100 text-purple-800';\n      case 'returned': return 'bg-indigo-100 text-indigo-800';\n      case 'completed': return 'bg-green-100 text-green-800';\n      case 'cancelled': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatDate = (date: string | Date) => {\n    return new Date(date).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  const filteredOrders = Array.isArray(orders) ? orders.filter(order => {\n    const matchesSearch = !searchTerm || \n      order.orderNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      order.customer?.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      order.customer?.email?.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesStatus = statusFilter === 'ALL' || order.status === statusFilter.toLowerCase();\n    \n    return matchesSearch && matchesStatus;\n  }) : [];\n\n  const statusCounts = {\n    all: Array.isArray(orders) ? orders.length : 0,\n    quotation: Array.isArray(orders) ? orders.filter(o => o.status === 'quoted').length : 0,\n    reserved: Array.isArray(orders) ? orders.filter(o => o.status === 'confirmed').length : 0,\n    pickup: Array.isArray(orders) ? orders.filter(o => o.status === 'picked_up').length : 0,\n    returned: Array.isArray(orders) ? orders.filter(o => o.status === 'returned').length : 0,\n  };\n\n  const openOrderDialog = (order: OrderWithItems) => {\n    setSelectedOrder(order);\n    setIsOrderDialogOpen(true);\n  };\n\n  return (\n    <AdminLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-gray-900\">Rental Orders</h2>\n            <p className=\"text-gray-600\">Manage your rental orders and track their status</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <Button className=\"bg-purple-600 hover:bg-purple-700 text-white\">\n              Create\n            </Button>\n            <span className=\"text-sm text-gray-500\">1-14/50</span>\n            <div className=\"flex\">\n              <Button variant=\"outline\" size=\"sm\">\n                &lt;\n              </Button>\n              <Button variant=\"outline\" size=\"sm\">\n                &gt;\n              </Button>\n            </div>\n            <div className=\"flex space-x-2\">\n              <Button variant=\"outline\" size=\"sm\">Cart</Button>\n              <Button variant=\"outline\" size=\"sm\">List</Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Search and Filters */}\n        <div className=\"flex justify-between items-center\">\n          <div className=\"flex items-center space-x-4\">\n            <Input\n              placeholder=\"Search orders...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-64\"\n              data-testid=\"input-search-orders\"\n            />\n          </div>\n        </div>\n\n        {/* Status Tabs and Filters */}\n        <div className=\"flex\">\n          <div className=\"w-64 pr-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-sm font-medium\">RENTAL STATUS</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                {[\n                  { key: 'ALL', label: 'ALL', count: statusCounts.all },\n                  { key: 'quotation', label: 'Quotation', count: statusCounts.quotation },\n                  { key: 'reserved', label: 'Reserved', count: statusCounts.reserved },\n                  { key: 'pickup', label: 'Pickup', count: statusCounts.pickup },\n                  { key: 'returned', label: 'Returned', count: statusCounts.returned },\n                ].map((status) => (\n                  <button\n                    key={status.key}\n                    onClick={() => setStatusFilter(status.key)}\n                    className={`w-full text-left px-3 py-2 rounded flex justify-between items-center ${\n                      statusFilter === status.key ? 'bg-blue-50 text-blue-700' : 'hover:bg-gray-50'\n                    }`}\n                    data-testid={`filter-status-${status.key.toLowerCase()}`}\n                  >\n                    <span className=\"text-sm\">{status.label}</span>\n                    <span className=\"text-xs bg-gray-100 px-2 py-1 rounded\">{status.count}</span>\n                  </button>\n                ))}\n              </CardContent>\n            </Card>\n\n            <Card className=\"mt-4\">\n              <CardHeader>\n                <CardTitle className=\"text-sm font-medium\">INVOICE STATUS</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                {[\n                  { label: 'Fully Invoiced', count: 5 },\n                  { label: 'Nothing to invoice', count: 5 },\n                  { label: 'To invoice', count: 5 },\n                ].map((status, index) => (\n                  <div key={index} className=\"flex justify-between items-center py-1\">\n                    <span className=\"text-sm\">{status.label}</span>\n                    <span className=\"text-xs bg-gray-100 px-2 py-1 rounded\">{status.count}</span>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Orders Table */}\n          <div className=\"flex-1\">\n            <Card>\n              <CardContent className=\"p-0\">\n                {ordersLoading ? (\n                  <div className=\"flex justify-center py-8\">\n                    <div className=\"animate-spin w-6 h-6 border-4 border-primary border-t-transparent rounded-full\" />\n                  </div>\n                ) : filteredOrders.length === 0 ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    No orders found\n                  </div>\n                ) : (\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>\n                          <input type=\"checkbox\" className=\"rounded\" />\n                        </TableHead>\n                        <TableHead>Order Reference</TableHead>\n                        <TableHead>Customer</TableHead>\n                        <TableHead>Created by user</TableHead>\n                        <TableHead>Rental state</TableHead>\n                        <TableHead>Tax</TableHead>\n                        <TableHead>Total</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {filteredOrders.map((order) => (\n                        <TableRow \n                          key={order.id} \n                          className=\"hover:bg-gray-50 cursor-pointer\"\n                          onClick={() => openOrderDialog(order)}\n                          data-testid={`row-order-${order.id}`}\n                        >\n                          <TableCell>\n                            <input type=\"checkbox\" className=\"rounded\" />\n                          </TableCell>\n                          <TableCell className=\"font-medium text-blue-600\">\n                            {order.orderNumber}\n                          </TableCell>\n                          <TableCell>{order.customer?.name || 'N/A'}</TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center\">\n                              <div className=\"w-6 h-6 bg-gray-300 rounded-full mr-2\"></div>\n                              <span className=\"text-sm\">Admin</span>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <Badge className={getStatusColor(order.status)}>\n                              {order.status}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>₹0</TableCell>\n                          <TableCell className=\"font-medium\">\n                            ₹{Number(order.totalAmount).toLocaleString()}\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Order Detail Dialog */}\n      <Dialog open={isOrderDialogOpen} onOpenChange={setIsOrderDialogOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center justify-between\">\n              <span>Rental Order Form View</span>\n              <div className=\"flex space-x-2\">\n                <Button variant=\"outline\" size=\"sm\">Save</Button>\n                <Button variant=\"outline\" size=\"sm\">Print</Button>\n                <Button variant=\"outline\" size=\"sm\">Cancel</Button>\n                <Button size=\"sm\" className=\"bg-yellow-400 text-black hover:bg-yellow-500\">\n                  Quotation\n                </Button>\n                <Button size=\"sm\" className=\"bg-green-500 hover:bg-green-600\">\n                  Quotation sent\n                </Button>\n                <Button size=\"sm\" className=\"bg-pink-500 hover:bg-pink-600\">\n                  Rental Order\n                </Button>\n              </div>\n            </DialogTitle>\n          </DialogHeader>\n          \n          {selectedOrder && (\n            <div className=\"space-y-6\">\n              <div className=\"text-2xl font-bold\">{selectedOrder.orderNumber}</div>\n              \n              <div className=\"grid grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-600\">Customer:</label>\n                    <p>{selectedOrder.customer?.name || 'N/A'}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-600\">Invoice Address:</label>\n                    <p>{selectedOrder.customer?.address || 'N/A'}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-600\">Delivery Address:</label>\n                    <p>{selectedOrder.pickupAddress || 'N/A'}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-600\">Rental Template:</label>\n                    <p>Standard Rental</p>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-600\">Expiration:</label>\n                    <p>{formatDate(selectedOrder.endDate)}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-600\">Rental Order Date:</label>\n                    <p>{formatDate(selectedOrder.startDate)}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-600\">Pricelist:</label>\n                    <p>Standard</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-600\">Rental Period:</label>\n                    <p>Daily</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-600\">Rental Duration:</label>\n                    <p>7 days</p>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button size=\"sm\" variant=\"outline\">Update Prices</Button>\n                  </div>\n                </div>\n              </div>\n\n              <Tabs defaultValue=\"order-lines\" className=\"w-full\">\n                <TabsList>\n                  <TabsTrigger value=\"order-lines\">Order lines</TabsTrigger>\n                  <TabsTrigger value=\"other-details\">Other details</TabsTrigger>\n                  <TabsTrigger value=\"rental-notes\">Rental Notes</TabsTrigger>\n                </TabsList>\n                \n                <TabsContent value=\"order-lines\" className=\"space-y-4\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Product</TableHead>\n                        <TableHead>Quantity</TableHead>\n                        <TableHead>Unit Price</TableHead>\n                        <TableHead>Tax</TableHead>\n                        <TableHead>Sub Total</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {selectedOrder.orderItems.map((item) => (\n                        <TableRow key={item.id}>\n                          <TableCell>{item.product.name}</TableCell>\n                          <TableCell>{item.quantity}</TableCell>\n                          <TableCell>₹{Number(item.unitRate).toLocaleString()}</TableCell>\n                          <TableCell>₹0</TableCell>\n                          <TableCell>₹{Number(item.totalAmount).toLocaleString()}</TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </TabsContent>\n                \n                <TabsContent value=\"other-details\">\n                  <div className=\"space-y-4\">\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-600\">Terms & Conditions:</label>\n                      <p className=\"text-sm text-gray-700 mt-1\">\n                        {selectedOrder.notes || \"Standard rental terms and conditions apply.\"}\n                      </p>\n                    </div>\n                  </div>\n                </TabsContent>\n                \n                <TabsContent value=\"rental-notes\">\n                  <div className=\"space-y-4\">\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-600\">Internal Notes:</label>\n                      <p className=\"text-sm text-gray-700 mt-1\">\n                        {selectedOrder.notes || \"No additional notes.\"}\n                      </p>\n                    </div>\n                  </div>\n                </TabsContent>\n              </Tabs>\n\n              <div className=\"border-t pt-4\">\n                <div className=\"flex justify-end space-x-8\">\n                  <div className=\"text-right\">\n                    <p className=\"text-sm text-gray-600\">Untaxed Total: ₹{Number(selectedOrder.totalAmount).toLocaleString()}</p>\n                    <p className=\"text-sm text-gray-600\">Tax: ₹0</p>\n                    <p className=\"text-lg font-bold\">Total: ₹{Number(selectedOrder.totalAmount).toLocaleString()}</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </AdminLayout>\n  );\n}","size_bytes":18239},"client/src/pages/admin/products.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport AdminLayout from \"@/components/layout/admin-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport type { Product, Category, ProductWithCategory } from \"@shared/schema\";\n\nexport default function AdminProducts() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedProduct, setSelectedProduct] = useState<ProductWithCategory | null>(null);\n  const [isProductDialogOpen, setIsProductDialogOpen] = useState(false);\n  const [isCreateMode, setIsCreateMode] = useState(false);\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: products, isLoading: productsLoading } = useQuery({\n    queryKey: [\"/api/products\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: categories, isLoading: categoriesLoading } = useQuery({\n    queryKey: [\"/api/categories\"],\n    enabled: isAuthenticated,\n  });\n\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    categoryId: \"\",\n    imageUrl: \"\",\n    totalQuantity: 1,\n    availableQuantity: 1,\n    hourlyRate: \"\",\n    dailyRate: \"\",\n    weeklyRate: \"\",\n    monthlyRate: \"\",\n    securityDeposit: \"\",\n  });\n\n  const createProductMutation = useMutation({\n    mutationFn: async (productData: any) => {\n      await apiRequest(\"POST\", \"/api/products\", productData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: \"Success\",\n        description: \"Product created successfully\",\n      });\n      setIsProductDialogOpen(false);\n      setFormData({\n        name: \"\",\n        description: \"\",\n        categoryId: \"\",\n        imageUrl: \"\",\n        totalQuantity: 1,\n        availableQuantity: 1,\n        hourlyRate: \"\",\n        dailyRate: \"\",\n        weeklyRate: \"\",\n        monthlyRate: \"\",\n        securityDeposit: \"\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateProductMutation = useMutation({\n    mutationFn: async ({ id, ...productData }: any) => {\n      await apiRequest(\"PUT\", `/api/products/${id}`, productData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: \"Success\",\n        description: \"Product updated successfully\",\n      });\n      setIsProductDialogOpen(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  const filteredProducts = Array.isArray(products) ? products.filter(product => {\n    const matchesSearch = !searchTerm || \n      product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      product.description?.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    return matchesSearch;\n  }) : [];\n\n  const openCreateDialog = () => {\n    setIsCreateMode(true);\n    setSelectedProduct(null);\n    setFormData({\n      name: \"\",\n      description: \"\",\n      categoryId: \"\",\n      imageUrl: \"\",\n      totalQuantity: 1,\n      availableQuantity: 1,\n      hourlyRate: \"\",\n      dailyRate: \"\",\n      weeklyRate: \"\",\n      monthlyRate: \"\",\n      securityDeposit: \"\",\n    });\n    setIsProductDialogOpen(true);\n  };\n\n  const openEditDialog = (product: ProductWithCategory) => {\n    setIsCreateMode(false);\n    setSelectedProduct(product);\n    setFormData({\n      name: product.name,\n      description: product.description || \"\",\n      categoryId: product.categoryId || \"\",\n      imageUrl: product.imageUrl || \"\",\n      totalQuantity: product.totalQuantity || 1,\n      availableQuantity: product.availableQuantity || 1,\n      hourlyRate: product.hourlyRate || \"\",\n      dailyRate: product.dailyRate || \"\",\n      weeklyRate: product.weeklyRate || \"\",\n      monthlyRate: product.monthlyRate || \"\",\n      securityDeposit: product.securityDeposit || \"\",\n    });\n    setIsProductDialogOpen(true);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const submitData = {\n      ...formData,\n      totalQuantity: parseInt(formData.totalQuantity.toString()) || 1,\n      availableQuantity: parseInt(formData.availableQuantity.toString()) || 1,\n      hourlyRate: formData.hourlyRate ? parseFloat(formData.hourlyRate) : null,\n      dailyRate: formData.dailyRate ? parseFloat(formData.dailyRate) : null,\n      weeklyRate: formData.weeklyRate ? parseFloat(formData.weeklyRate) : null,\n      monthlyRate: formData.monthlyRate ? parseFloat(formData.monthlyRate) : null,\n      securityDeposit: formData.securityDeposit ? parseFloat(formData.securityDeposit) : null,\n    };\n\n    if (isCreateMode) {\n      createProductMutation.mutate(submitData);\n    } else if (selectedProduct) {\n      updateProductMutation.mutate({ id: selectedProduct.id, ...submitData });\n    }\n  };\n\n  return (\n    <AdminLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-gray-900\">Product</h2>\n            <p className=\"text-gray-600\">Manage your rental product catalog</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              className=\"bg-purple-600 hover:bg-purple-700 text-white\"\n              onClick={openCreateDialog}\n              data-testid=\"button-create-product\"\n            >\n              Create\n            </Button>\n            <Button variant=\"outline\" className=\"bg-orange-500 hover:bg-orange-600 text-white\">\n              Update Stock\n            </Button>\n            <span className=\"text-sm text-gray-500\">1/80</span>\n            <div className=\"flex\">\n              <Button variant=\"outline\" size=\"sm\">\n                &lt;\n              </Button>\n              <Button variant=\"outline\" size=\"sm\">\n                &gt;\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Search */}\n        <div className=\"flex justify-between items-center\">\n          <div className=\"flex items-center space-x-4\">\n            <Input\n              placeholder=\"Search products...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-64\"\n              data-testid=\"input-search-products\"\n            />\n          </div>\n        </div>\n\n        {/* Products Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n          {productsLoading ? (\n            <div className=\"col-span-full flex justify-center py-8\">\n              <div className=\"animate-spin w-6 h-6 border-4 border-primary border-t-transparent rounded-full\" />\n            </div>\n          ) : filteredProducts.length === 0 ? (\n            <div className=\"col-span-full text-center py-8 text-gray-500\">\n              No products found\n            </div>\n          ) : (\n            filteredProducts.map((product) => (\n              <Card \n                key={product.id} \n                className=\"hover:shadow-lg transition-shadow cursor-pointer\"\n                onClick={() => openEditDialog(product)}\n                data-testid={`card-product-${product.id}`}\n              >\n                <CardContent className=\"p-4\">\n                  <div className=\"aspect-square bg-gray-100 rounded-lg mb-4 flex items-center justify-center\">\n                    {product.imageUrl ? (\n                      <img \n                        src={product.imageUrl} \n                        alt={product.name}\n                        className=\"w-full h-full object-cover rounded-lg\"\n                      />\n                    ) : (\n                      <div className=\"text-gray-400 text-center\">\n                        <div className=\"text-4xl mb-2\">📦</div>\n                        <div className=\"text-sm\">No Image</div>\n                      </div>\n                    )}\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <h3 className=\"font-semibold text-lg\">{product.name}</h3>\n                    \n                    {product.category && (\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {product.category.name}\n                      </Badge>\n                    )}\n                    \n                    <p className=\"text-sm text-gray-600 line-clamp-2\">\n                      {product.description || \"No description available\"}\n                    </p>\n                    \n                    <div className=\"space-y-1\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-gray-500\">Stock:</span>\n                        <span className=\"font-medium\">\n                          {product.availableQuantity}/{product.totalQuantity}\n                        </span>\n                      </div>\n                      \n                      {product.dailyRate && (\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-500\">Daily Rate:</span>\n                          <span className=\"font-medium text-green-600\">\n                            ₹{Number(product.dailyRate).toLocaleString()}\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          )}\n        </div>\n      </div>\n\n      {/* Product Create/Edit Dialog */}\n      <Dialog open={isProductDialogOpen} onOpenChange={setIsProductDialogOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {isCreateMode ? \"Create Product\" : \"Edit Product\"}\n            </DialogTitle>\n          </DialogHeader>\n          \n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* General Product Info */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold\">General Product Info</h3>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"name\">Product Name *</Label>\n                  <Input\n                    id=\"name\"\n                    value={formData.name}\n                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                    required\n                    data-testid=\"input-product-name\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"description\">Description</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={formData.description}\n                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                    rows={3}\n                    data-testid=\"textarea-product-description\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"category\">Category</Label>\n                  <Select \n                    value={formData.categoryId} \n                    onValueChange={(value) => setFormData({ ...formData, categoryId: value })}\n                  >\n                    <SelectTrigger data-testid=\"select-product-category\">\n                      <SelectValue placeholder=\"Select category\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {Array.isArray(categories) && categories.map((category) => (\n                        <SelectItem key={category.id} value={category.id}>\n                          {category.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"imageUrl\">Image URL</Label>\n                  <Input\n                    id=\"imageUrl\"\n                    value={formData.imageUrl}\n                    onChange={(e) => setFormData({ ...formData, imageUrl: e.target.value })}\n                    placeholder=\"https://example.com/image.jpg\"\n                    data-testid=\"input-product-image\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"totalQuantity\">Total Quantity</Label>\n                    <Input\n                      id=\"totalQuantity\"\n                      type=\"number\"\n                      min=\"1\"\n                      value={formData.totalQuantity}\n                      onChange={(e) => setFormData({ ...formData, totalQuantity: parseInt(e.target.value) || 1 })}\n                      data-testid=\"input-total-quantity\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"availableQuantity\">Available Quantity</Label>\n                    <Input\n                      id=\"availableQuantity\"\n                      type=\"number\"\n                      min=\"0\"\n                      value={formData.availableQuantity}\n                      onChange={(e) => setFormData({ ...formData, availableQuantity: parseInt(e.target.value) || 0 })}\n                      data-testid=\"input-available-quantity\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              {/* Rental Pricing */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold\">Rental Pricing</h3>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4 text-sm font-medium text-gray-600 border-b pb-2\">\n                    <div>Rental Period</div>\n                    <div>Price</div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-4 items-center\">\n                    <Label>Hourly Rate</Label>\n                    <div className=\"relative\">\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={formData.hourlyRate}\n                        onChange={(e) => setFormData({ ...formData, hourlyRate: e.target.value })}\n                        placeholder=\"0.00\"\n                        className=\"pl-8\"\n                        data-testid=\"input-hourly-rate\"\n                      />\n                      <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500\">₹</span>\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4 items-center\">\n                    <Label>Daily Rate</Label>\n                    <div className=\"relative\">\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={formData.dailyRate}\n                        onChange={(e) => setFormData({ ...formData, dailyRate: e.target.value })}\n                        placeholder=\"0.00\"\n                        className=\"pl-8\"\n                        data-testid=\"input-daily-rate\"\n                      />\n                      <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500\">₹</span>\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4 items-center\">\n                    <Label>Weekly Rate</Label>\n                    <div className=\"relative\">\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={formData.weeklyRate}\n                        onChange={(e) => setFormData({ ...formData, weeklyRate: e.target.value })}\n                        placeholder=\"0.00\"\n                        className=\"pl-8\"\n                        data-testid=\"input-weekly-rate\"\n                      />\n                      <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500\">₹</span>\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4 items-center\">\n                    <Label>Monthly Rate</Label>\n                    <div className=\"relative\">\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={formData.monthlyRate}\n                        onChange={(e) => setFormData({ ...formData, monthlyRate: e.target.value })}\n                        placeholder=\"0.00\"\n                        className=\"pl-8\"\n                        data-testid=\"input-monthly-rate\"\n                      />\n                      <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500\">₹</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2 mt-6\">\n                  <h4 className=\"font-medium\">Rental Reservation charges</h4>\n                  \n                  <div className=\"grid grid-cols-2 gap-4 items-center\">\n                    <Label>Security Deposit</Label>\n                    <div className=\"relative\">\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={formData.securityDeposit}\n                        onChange={(e) => setFormData({ ...formData, securityDeposit: e.target.value })}\n                        placeholder=\"0.00\"\n                        className=\"pl-8\"\n                        data-testid=\"input-security-deposit\"\n                      />\n                      <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500\">₹</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-4 pt-4 border-t\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => setIsProductDialogOpen(false)}\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createProductMutation.isPending || updateProductMutation.isPending}\n                data-testid=\"button-save-product\"\n              >\n                {createProductMutation.isPending || updateProductMutation.isPending \n                  ? \"Saving...\" \n                  : isCreateMode ? \"Create Product\" : \"Update Product\"\n                }\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </AdminLayout>\n  );\n}","size_bytes":20565},"client/src/pages/customer/booking.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useLocation, useParams } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport CustomerLayout from \"@/components/layout/customer-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Grid3X3, Heart, Calendar as CalendarIcon, Minus, Plus, ShoppingCart } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport type { ProductWithCategory } from \"@shared/schema\";\n\nexport default function CustomerBooking() {\n  const { productId } = useParams<{ productId: string }>();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  \n  // Parse URL parameters for pre-selected dates\n  const urlParams = new URLSearchParams(window.location.search);\n  const [fromDate, setFromDate] = useState<Date | undefined>(\n    urlParams.get('startDate') ? new Date(urlParams.get('startDate')!) : undefined\n  );\n  const [toDate, setToDate] = useState<Date | undefined>(\n    urlParams.get('endDate') ? new Date(urlParams.get('endDate')!) : undefined\n  );\n  const [quantity, setQuantity] = useState(1);\n  const [isInWishlist, setIsInWishlist] = useState(false);\n  const [couponCode, setCouponCode] = useState(\"\");\n\n  const { data: product, isLoading: productLoading } = useQuery<ProductWithCategory>({\n    queryKey: [\"/api/products\", productId],\n    enabled: !!productId,\n  });\n\n  const addToCartMutation = useMutation({\n    mutationFn: async (orderData: any) => {\n      return await apiRequest(\"/api/orders\", \"POST\", orderData);\n    },\n    onSuccess: (order) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      toast({\n        title: \"Added to Cart\",\n        description: \"Item added to your cart successfully!\",\n      });\n      setLocation(`/orders`);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add item to cart. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Calculate rental duration and total price\n  const duration = fromDate && toDate ? \n    Math.ceil((toDate.getTime() - fromDate.getTime()) / (1000 * 60 * 60 * 24)) : 0;\n  const dailyRate = parseFloat(product?.dailyRate || \"0\");\n  const subtotal = duration * dailyRate * quantity;\n  const taxes = subtotal * 0.1; // 10% tax\n  const total = subtotal + taxes;\n\n  const handleAddToCart = () => {\n    if (!fromDate || !toDate) {\n      toast({\n        title: \"Missing Dates\",\n        description: \"Please select rental start and end dates\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (duration <= 0) {\n      toast({\n        title: \"Invalid Duration\",\n        description: \"End date must be after start date\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const orderData = {\n      productId,\n      quantity,\n      startDate: fromDate.toISOString(),\n      endDate: toDate.toISOString(),\n      totalAmount: total,\n    };\n\n    addToCartMutation.mutate(orderData);\n  };\n\n  const handleWishlistToggle = () => {\n    setIsInWishlist(!isInWishlist);\n    toast({\n      title: isInWishlist ? \"Removed from Wishlist\" : \"Added to Wishlist\",\n      description: isInWishlist ? \"Item removed from your wishlist\" : \"Item added to your wishlist\",\n    });\n  };\n\n  if (productLoading) {\n    return (\n      <CustomerLayout>\n        <div className=\"flex justify-center py-12\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n        </div>\n      </CustomerLayout>\n    );\n  }\n\n  if (!product) {\n    return (\n      <CustomerLayout>\n        <Card>\n          <CardContent className=\"py-12 text-center\">\n            <Grid3X3 className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Product not found</h3>\n            <p className=\"text-gray-600 mb-6\">The product you're looking for doesn't exist or has been removed.</p>\n            <Button onClick={() => setLocation(\"/catalog\")}>\n              Back to Catalog\n            </Button>\n          </CardContent>\n        </Card>\n      </CustomerLayout>\n    );\n  }\n\n  return (\n    <CustomerLayout>\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        {/* Breadcrumb */}\n        <nav className=\"flex mb-6\" aria-label=\"Breadcrumb\">\n          <ol className=\"flex items-center space-x-2 text-sm text-gray-500\">\n            <li>\n              <button onClick={() => setLocation(\"/catalog\")} className=\"hover:text-gray-700\">\n                All Products\n              </button>\n            </li>\n            <li className=\"flex items-center\">\n              <span className=\"mx-2\">/</span>\n              <span className=\"text-gray-900\">{product.name}</span>\n            </li>\n          </ol>\n        </nav>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Left: Product Image and Details */}\n          <div className=\"space-y-6\">\n            {/* Product Image */}\n            <Card>\n              <CardContent className=\"p-0\">\n                <div className=\"aspect-square bg-gray-100 rounded-lg flex items-center justify-center\">\n                  {product.imageUrl ? (\n                    <img \n                      src={product.imageUrl} \n                      alt={product.name}\n                      className=\"w-full h-full object-cover rounded-lg\"\n                    />\n                  ) : (\n                    <div className=\"text-gray-400\">\n                      <Grid3X3 className=\"h-16 w-16 mx-auto mb-2\" />\n                      <p className=\"text-sm\">No image available</p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Add to Wishlist */}\n            <Button \n              variant=\"outline\" \n              className=\"w-full\"\n              onClick={handleWishlistToggle}\n              data-testid=\"add-to-wishlist-button\"\n            >\n              <Heart className={`h-4 w-4 mr-2 ${isInWishlist ? 'fill-red-500 text-red-500' : ''}`} />\n              {isInWishlist ? \"Remove from\" : \"Add to\"} wish list\n            </Button>\n\n            {/* Product Description */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <h3 className=\"font-semibold text-lg mb-3\">Product descriptions</h3>\n                <div className=\"space-y-2 text-sm text-gray-600\">\n                  <p>{product.description || \"No description available\"}</p>\n                  <p>••••</p>\n                  <p>••••</p>\n                  <p>••••</p>\n                </div>\n                <Button variant=\"link\" className=\"p-0 h-auto text-sm mt-2\">\n                  Read More &gt;\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right: Product Info and Booking */}\n          <div className=\"space-y-6\">\n            {/* Product Header */}\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">{product.name}</h1>\n              <div className=\"flex items-center gap-4 mb-4\">\n                <span className=\"text-2xl font-bold text-gray-900\">\n                  ₹ {dailyRate.toFixed(2)}\n                </span>\n                <span className=\"text-gray-600\">( ₹{dailyRate.toFixed(2)} / per unit )</span>\n              </div>\n            </div>\n\n            {/* Date Selection */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  From :\n                </label>\n                <Popover>\n                  <PopoverTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      className={`w-full justify-start text-left font-normal ${!fromDate && \"text-muted-foreground\"}`}\n                      data-testid=\"from-date-picker\"\n                    >\n                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                      {fromDate ? format(fromDate, \"dd/MM/yyyy\") : \"DD/MM/YYYY\"}\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-auto p-0\">\n                    <Calendar\n                      mode=\"single\"\n                      selected={fromDate}\n                      onSelect={setFromDate}\n                      initialFocus\n                    />\n                  </PopoverContent>\n                </Popover>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  to :\n                </label>\n                <Popover>\n                  <PopoverTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      className={`w-full justify-start text-left font-normal ${!toDate && \"text-muted-foreground\"}`}\n                      data-testid=\"to-date-picker\"\n                    >\n                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                      {toDate ? format(toDate, \"dd/MM/yyyy\") : \"DD/MM/YYYY\"}\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-auto p-0\">\n                    <Calendar\n                      mode=\"single\"\n                      selected={toDate}\n                      onSelect={setToDate}\n                      initialFocus\n                    />\n                  </PopoverContent>\n                </Popover>\n              </div>\n            </div>\n\n            {/* Quantity Selector */}\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setQuantity(Math.max(1, quantity - 1))}\n                disabled={quantity <= 1}\n                data-testid=\"quantity-decrease\"\n              >\n                <Minus className=\"h-4 w-4\" />\n              </Button>\n              <span className=\"font-medium text-lg w-8 text-center\" data-testid=\"quantity-display\">\n                {quantity}\n              </span>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setQuantity(quantity + 1)}\n                data-testid=\"quantity-increase\"\n              >\n                <Plus className=\"h-4 w-4\" />\n              </Button>\n              <Button \n                className=\"ml-auto\"\n                onClick={handleAddToCart}\n                disabled={addToCartMutation.isPending || !fromDate || !toDate}\n                data-testid=\"add-to-cart-button\"\n              >\n                <Heart className=\"h-4 w-4 mr-2\" />\n                Add to Cart\n              </Button>\n            </div>\n\n            {/* Coupon Code */}\n            <div>\n              <h4 className=\"font-medium text-gray-900 mb-3\">Apply Coupon</h4>\n              <div className=\"flex gap-2\">\n                <Input\n                  placeholder=\"Coupon Code\"\n                  value={couponCode}\n                  onChange={(e) => setCouponCode(e.target.value)}\n                  data-testid=\"coupon-input\"\n                />\n                <Button variant=\"default\" data-testid=\"apply-coupon-button\">\n                  Apply\n                </Button>\n              </div>\n            </div>\n\n            {/* Terms & Conditions */}\n            <div>\n              <h4 className=\"font-medium text-gray-900 mb-2\">Terms & condition</h4>\n              <div className=\"text-sm text-gray-600 space-y-1\">\n                <p>••••</p>\n                <p>••••</p>\n                <p>••••</p>\n              </div>\n            </div>\n\n            {/* Share */}\n            <div>\n              <h4 className=\"font-medium text-gray-900 mb-2\">Share :</h4>\n              {/* Social share buttons can be added here */}\n            </div>\n          </div>\n        </div>\n      </div>\n    </CustomerLayout>\n  );\n}","size_bytes":12489},"client/src/pages/customer/catalog.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport CustomerLayout from \"@/components/layout/customer-layout\";\nimport ProductCard from \"@/components/ui/product-card\";\nimport RentalCalendar from \"@/components/ui/rental-calendar\";\nimport QuickRentWidget from \"@/components/ui/quick-rent-widget\";\nimport LiveAvailability from \"@/components/ui/live-availability\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Grid3X3, List, Search, SlidersHorizontal, Zap, Clock } from \"lucide-react\";\nimport type { ProductWithCategory } from \"@shared/schema\";\n\nexport default function CustomerCatalog() {\n  const [, setLocation] = useLocation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n  const [selectedDates, setSelectedDates] = useState<{ from?: Date; to?: Date }>({});\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [priceRange, setPriceRange] = useState<{ min: string; max: string }>({ min: \"\", max: \"\" });\n  const [sortBy, setSortBy] = useState<string>(\"name\");\n\n  const { data: products, isLoading: productsLoading } = useQuery({\n    queryKey: [\"/api/products\", selectedDates.from, selectedDates.to],\n    queryFn: () => {\n      const params = new URLSearchParams();\n      if (selectedDates.from) params.set('startDate', selectedDates.from.toISOString());\n      if (selectedDates.to) params.set('endDate', selectedDates.to.toISOString());\n      \n      return fetch(`/api/products?${params.toString()}`).then(res => res.json());\n    },\n  });\n\n  const { data: categories } = useQuery({\n    queryKey: [\"/api/categories\"],\n  });\n\n  // Filter and sort products\n  const filteredProducts = products?.filter((product: ProductWithCategory) => {\n    const matchesSearch = !searchTerm || \n      product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      product.description?.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesCategory = !selectedCategory || selectedCategory === \"all\" || product.categoryId === selectedCategory;\n    \n    const matchesPrice = (!priceRange.min || parseFloat(product.dailyRate || \"0\") >= parseFloat(priceRange.min)) &&\n                         (!priceRange.max || parseFloat(product.dailyRate || \"0\") <= parseFloat(priceRange.max));\n    \n    return matchesSearch && matchesCategory && matchesPrice;\n  })?.sort((a: ProductWithCategory, b: ProductWithCategory) => {\n    switch (sortBy) {\n      case \"price-low\":\n        return parseFloat(a.dailyRate || \"0\") - parseFloat(b.dailyRate || \"0\");\n      case \"price-high\":\n        return parseFloat(b.dailyRate || \"0\") - parseFloat(a.dailyRate || \"0\");\n      case \"name\":\n      default:\n        return a.name.localeCompare(b.name);\n    }\n  }) || [];\n\n  const handleBookProduct = (productId: string) => {\n    setLocation(`/catalog/${productId}`);\n  };\n\n  return (\n    <CustomerLayout>\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        {/* Hero Section */}\n        <div className=\"mb-8\">\n          <div className=\"bg-gradient-to-r from-blue-600 to-blue-800 rounded-xl p-8 text-white\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-3xl font-bold mb-2\">Professional Equipment Rental</h1>\n                <p className=\"text-blue-100 text-lg\">\n                  Rent high-quality equipment instantly • Real-time availability • Instant booking\n                </p>\n                <div className=\"flex items-center gap-4 mt-4\">\n                  <Badge className=\"bg-white/20 text-white border-white/30\">\n                    <Zap className=\"h-3 w-3 mr-1\" />\n                    Quick Rent Available\n                  </Badge>\n                  <Badge className=\"bg-white/20 text-white border-white/30\">\n                    <Clock className=\"h-3 w-3 mr-1\" />\n                    Real-time Updates\n                  </Badge>\n                </div>\n              </div>\n              <div className=\"hidden md:block\">\n                <div className=\"text-right\">\n                  <div className=\"text-2xl font-bold\">{filteredProducts.length}+</div>\n                  <div className=\"text-blue-100\">Items Available</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex gap-6\">\n          {/* Left Sidebar - Product Attributes */}\n          <div className=\"w-64 flex-shrink-0\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center\">\n                  <SlidersHorizontal className=\"h-5 w-5 mr-2\" />\n                  Product attributes\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Rental Period Selection */}\n                <div>\n                  <h4 className=\"font-medium text-sm text-gray-700 mb-3\">Rental Period</h4>\n                  <RentalCalendar\n                    selected={selectedDates}\n                    onSelect={setSelectedDates}\n                    className=\"w-full\"\n                  />\n                </div>\n\n                <Separator />\n\n                {/* Price Range */}\n                <div>\n                  <h4 className=\"font-medium text-sm text-gray-700 mb-3\">Price range</h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"grid grid-cols-2 gap-2\">\n                      <Input\n                        placeholder=\"Min\"\n                        type=\"number\"\n                        value={priceRange.min}\n                        onChange={(e) => setPriceRange(prev => ({ ...prev, min: e.target.value }))}\n                        data-testid=\"price-min-input\"\n                      />\n                      <Input\n                        placeholder=\"Max\"\n                        type=\"number\"\n                        value={priceRange.max}\n                        onChange={(e) => setPriceRange(prev => ({ ...prev, max: e.target.value }))}\n                        data-testid=\"price-max-input\"\n                      />\n                    </div>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      className=\"w-full\"\n                      onClick={() => setPriceRange({ min: \"\", max: \"\" })}\n                    >\n                      Clear Filters\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"flex-1\">\n            {/* Category Filter Bar */}\n            <div className=\"flex gap-3 mb-6 overflow-x-auto\">\n              <Button\n                variant={selectedCategory === \"all\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setSelectedCategory(\"all\")}\n                data-testid=\"category-all\"\n              >\n                Category 1\n              </Button>\n              {Array.isArray(categories) && categories.map((category) => (\n                <Button\n                  key={category.id}\n                  variant={selectedCategory === category.id ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setSelectedCategory(category.id)}\n                  data-testid={`category-${category.name.toLowerCase()}`}\n                >\n                  {category.name}\n                </Button>\n              ))}\n            </div>\n\n            {/* Search and Controls */}\n            <div className=\"flex gap-4 mb-6 items-center\">\n              {/* Price List Dropdown */}\n              <Select value={sortBy} onValueChange={setSortBy}>\n                <SelectTrigger className=\"w-40\" data-testid=\"sort-dropdown\">\n                  <SelectValue placeholder=\"Price List\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"name\">Name</SelectItem>\n                  <SelectItem value=\"price-low\">Price: Low to High</SelectItem>\n                  <SelectItem value=\"price-high\">Price: High to Low</SelectItem>\n                </SelectContent>\n              </Select>\n\n              {/* Search Bar */}\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Search products...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"search-input\"\n                />\n              </div>\n\n              {/* Sort Dropdown */}\n              <Select>\n                <SelectTrigger className=\"w-32\" data-testid=\"sort-by-dropdown\">\n                  <SelectValue placeholder=\"Sort by\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"name\">Name</SelectItem>\n                  <SelectItem value=\"price\">Price</SelectItem>\n                  <SelectItem value=\"popular\">Popular</SelectItem>\n                </SelectContent>\n              </Select>\n\n              {/* View Toggle */}\n              <div className=\"flex border rounded-lg\">\n                <Button\n                  variant={viewMode === \"grid\" ? \"default\" : \"ghost\"}\n                  size=\"sm\"\n                  onClick={() => setViewMode(\"grid\")}\n                  className=\"rounded-r-none\"\n                  data-testid=\"view-grid-button\"\n                >\n                  <Grid3X3 className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  variant={viewMode === \"list\" ? \"default\" : \"ghost\"}\n                  size=\"sm\"\n                  onClick={() => setViewMode(\"list\")}\n                  className=\"rounded-l-none\"\n                  data-testid=\"view-list-button\"\n                >\n                  <List className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n\n            {/* Products Display */}\n            {productsLoading ? (\n              <div className={viewMode === \"grid\" ? \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\" : \"space-y-4\"}>\n                {[...Array(6)].map((_, i) => (\n                  <Card key={i} className=\"animate-pulse\">\n                    <div className={viewMode === \"grid\" ? \"h-48 bg-gray-200 rounded-t-lg\" : \"h-24 bg-gray-200 rounded-l-lg\"}></div>\n                    <CardContent className=\"p-4\">\n                      <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                      <div className=\"h-3 bg-gray-200 rounded mb-4\"></div>\n                      <div className=\"space-y-2\">\n                        <div className=\"h-3 bg-gray-200 rounded\"></div>\n                        <div className=\"h-3 bg-gray-200 rounded\"></div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : filteredProducts.length === 0 ? (\n              <Card>\n                <CardContent className=\"py-12 text-center\">\n                  <Search className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                    {searchTerm || selectedCategory !== \"all\" ? \"No products found\" : \"No products available\"}\n                  </h3>\n                  <p className=\"text-gray-600\">\n                    {searchTerm || selectedCategory !== \"all\"\n                      ? \"Try adjusting your search criteria or filters\"\n                      : \"Products will appear here when they become available\"\n                    }\n                  </p>\n                </CardContent>\n              </Card>\n            ) : (\n              <>\n                {viewMode === \"grid\" ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\" data-testid=\"products-grid\">\n                    {filteredProducts.map((product: ProductWithCategory) => (\n                      <div key={product.id} className=\"relative group\">\n                        <ProductCard\n                          product={product}\n                          onBook={() => handleBookProduct(product.id)}\n                          selectedDates={selectedDates}\n                        />\n                        {/* Live Availability Badge */}\n                        <div className=\"absolute top-3 left-3 z-10\">\n                          <LiveAvailability \n                            productId={product.id}\n                            startDate={selectedDates.from}\n                            endDate={selectedDates.to}\n                          />\n                        </div>\n                        {/* Quick Rent Widget - shows on hover */}\n                        <div className=\"absolute top-3 right-3 z-10 opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\n                          <QuickRentWidget \n                            product={product} \n                            className=\"w-72 transform scale-90 group-hover:scale-100 transition-transform duration-300\"\n                          />\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\" data-testid=\"products-list\">\n                    {filteredProducts.map((product: ProductWithCategory) => (\n                      <Card key={product.id} className=\"flex items-center p-4 hover:shadow-md transition-shadow\">\n                        <div className=\"w-20 h-20 bg-gray-100 rounded-lg mr-4 flex-shrink-0 flex items-center justify-center\">\n                          {product.imageUrl ? (\n                            <img \n                              src={product.imageUrl} \n                              alt={product.name}\n                              className=\"w-full h-full object-cover rounded-lg\"\n                            />\n                          ) : (\n                            <i className=\"fas fa-box text-2xl text-gray-400\"></i>\n                          )}\n                        </div>\n                        <div className=\"flex-1\">\n                          <div className=\"flex justify-between items-start\">\n                            <div>\n                              <h4 className=\"text-lg font-semibold text-gray-900\">{product.name}</h4>\n                              <p className=\"text-sm text-gray-600 mt-1\">{product.description}</p>\n                              <div className=\"flex items-center gap-4 mt-2\">\n                                {product.category && (\n                                  <Badge variant=\"secondary\" className=\"text-xs\">\n                                    {product.category.name}\n                                  </Badge>\n                                )}\n                                <Badge \n                                  variant={product.availableQuantity && product.availableQuantity > 0 ? \"default\" : \"destructive\"}\n                                  className=\"text-xs\"\n                                >\n                                  {product.availableQuantity && product.availableQuantity > 0\n                                    ? `${product.availableQuantity} Available` \n                                    : \"Out of Stock\"\n                                  }\n                                </Badge>\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              <div className=\"space-y-1\">\n                                {product.hourlyRate && (\n                                  <div className=\"text-sm\">\n                                    <span className=\"text-gray-500\">Hourly:</span>\n                                    <span className=\"font-medium ml-1\">₹{Number(product.hourlyRate)}/hr</span>\n                                  </div>\n                                )}\n                                {product.dailyRate && (\n                                  <div className=\"text-sm\">\n                                    <span className=\"text-gray-500\">Daily:</span>\n                                    <span className=\"font-medium ml-1\">₹{Number(product.dailyRate)}/day</span>\n                                  </div>\n                                )}\n                                {product.weeklyRate && (\n                                  <div className=\"text-sm\">\n                                    <span className=\"text-gray-500\">Weekly:</span>\n                                    <span className=\"font-medium ml-1\">₹{Number(product.weeklyRate)}/week</span>\n                                  </div>\n                                )}\n                              </div>\n                              <Button \n                                onClick={() => handleBookProduct(product.id)}\n                                disabled={!product.availableQuantity || product.availableQuantity <= 0}\n                                size=\"sm\"\n                                className=\"mt-3\"\n                              >\n                                Book Now\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n\n                {/* Pagination */}\n                <div className=\"flex justify-center mt-8\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Button variant=\"outline\" size=\"sm\" disabled data-testid=\"pagination-prev\">\n                      &lt;\n                    </Button>\n                    <Button variant=\"default\" size=\"sm\" data-testid=\"pagination-1\">1</Button>\n                    <Button variant=\"outline\" size=\"sm\" data-testid=\"pagination-2\">2</Button>\n                    <Button variant=\"outline\" size=\"sm\" data-testid=\"pagination-3\">3</Button>\n                    <Button variant=\"outline\" size=\"sm\" data-testid=\"pagination-4\">4</Button>\n                    <span className=\"text-sm text-gray-500\">... 10</span>\n                    <Button variant=\"outline\" size=\"sm\" data-testid=\"pagination-next\">\n                      &gt;\n                    </Button>\n                  </div>\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </CustomerLayout>\n  );\n}\n","size_bytes":18967},"client/src/pages/customer/orders.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport CustomerLayout from \"@/components/layout/customer-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport type { OrderWithItems } from \"@shared/schema\";\n\nexport default function CustomerOrders() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: orders, isLoading: ordersLoading } = useQuery({\n    queryKey: [\"/api/orders\"],\n    enabled: isAuthenticated,\n  });\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'draft': return 'secondary';\n      case 'quoted': return 'outline';\n      case 'confirmed': return 'default';\n      case 'paid': return 'default';\n      case 'picked_up': return 'default';\n      case 'active': return 'default';\n      case 'returned': return 'outline';\n      case 'completed': return 'outline';\n      case 'cancelled': return 'destructive';\n      default: return 'secondary';\n    }\n  };\n\n  const formatDate = (date: string | Date) => {\n    return new Date(date).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  const getDurationDays = (startDate: string | Date, endDate: string | Date) => {\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    const diffTime = Math.abs(end.getTime() - start.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return diffDays;\n  };\n\n  return (\n    <CustomerLayout>\n      <div className=\"space-y-8\">\n        {/* Header */}\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">My Orders</h2>\n          <p className=\"text-gray-600\">Track your rental orders and history</p>\n        </div>\n\n        {/* Orders List */}\n        {ordersLoading ? (\n          <div className=\"flex justify-center py-12\">\n            <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n          </div>\n        ) : !Array.isArray(orders) || orders.length === 0 ? (\n          <Card>\n            <CardContent className=\"py-12 text-center\">\n              <i className=\"fas fa-shopping-cart text-gray-300 text-6xl mb-4\"></i>\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No orders yet</h3>\n              <p className=\"text-gray-600 mb-6\">Start browsing our catalog to place your first order</p>\n              <Button className=\"bg-primary-500 hover:bg-primary-600\">\n                <i className=\"fas fa-search mr-2\"></i>\n                Browse Catalog\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"space-y-6\">\n            {Array.isArray(orders) && orders.map((order: OrderWithItems) => (\n              <Card key={order.id} className=\"hover:shadow-md transition-shadow\">\n                <CardHeader>\n                  <div className=\"flex justify-between items-start\">\n                    <div>\n                      <CardTitle className=\"flex items-center gap-3\">\n                        <span>{order.orderNumber}</span>\n                        <Badge variant={getStatusColor(order.status)}>\n                          {order.status}\n                        </Badge>\n                        <Badge variant={order.paymentStatus === 'paid' ? 'default' : 'secondary'}>\n                          {order.paymentStatus}\n                        </Badge>\n                      </CardTitle>\n                      <div className=\"flex items-center space-x-4 mt-2 text-sm text-gray-600\">\n                        <span>\n                          <i className=\"fas fa-calendar mr-1\"></i>\n                          {formatDate(order.startDate)} - {formatDate(order.endDate)}\n                        </span>\n                        <span>\n                          <i className=\"fas fa-clock mr-1\"></i>\n                          {getDurationDays(order.startDate, order.endDate)} days\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-2xl font-bold text-gray-900\">\n                        ₹{Number(order.totalAmount).toLocaleString()}\n                      </div>\n                      <div className=\"text-sm text-gray-600\">\n                        Ordered {formatDate(order.createdAt!)}\n                      </div>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {/* Order Items */}\n                    <div>\n                      <h4 className=\"font-medium text-gray-900 mb-2\">Items</h4>\n                      <div className=\"space-y-2\">\n                        {order.orderItems.map((item) => (\n                          <div key={item.id} className=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-12 h-12 bg-gray-200 rounded-lg flex items-center justify-center\">\n                                <i className=\"fas fa-box text-gray-400\"></i>\n                              </div>\n                              <div>\n                                <span className=\"font-medium\">{item.product.name}</span>\n                                <div className=\"text-sm text-gray-600\">\n                                  Quantity: {item.quantity} × ₹{Number(item.unitRate).toLocaleString()}\n                                </div>\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              <div className=\"font-medium\">₹{Number(item.totalAmount).toLocaleString()}</div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    {/* Addresses */}\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      {order.pickupAddress && (\n                        <div>\n                          <h5 className=\"font-medium text-gray-900 mb-1\">Pickup Address</h5>\n                          <p className=\"text-sm text-gray-600\">{order.pickupAddress}</p>\n                        </div>\n                      )}\n                      {order.returnAddress && (\n                        <div>\n                          <h5 className=\"font-medium text-gray-900 mb-1\">Return Address</h5>\n                          <p className=\"text-sm text-gray-600\">{order.returnAddress}</p>\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Notes */}\n                    {order.notes && (\n                      <div>\n                        <h5 className=\"font-medium text-gray-900 mb-1\">Special Instructions</h5>\n                        <p className=\"text-sm text-gray-600\">{order.notes}</p>\n                      </div>\n                    )}\n\n                    {/* Action Buttons */}\n                    <div className=\"flex justify-between items-center pt-4 border-t border-gray-200\">\n                      <div className=\"flex space-x-2\">\n                        {order.status === 'draft' && order.paymentStatus === 'pending' && (\n                          <Button \n                            size=\"sm\"\n                            className=\"bg-primary-500 hover:bg-primary-600\"\n                            onClick={() => window.location.href = `/checkout/${order.id}`}\n                          >\n                            <i className=\"fas fa-credit-card mr-2\"></i>\n                            Complete Payment\n                          </Button>\n                        )}\n                        {order.status === 'active' && (\n                          <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\n                            <i className=\"fas fa-check mr-1\"></i>\n                            Currently Rented\n                          </Badge>\n                        )}\n                        {order.status === 'completed' && (\n                          <Badge variant=\"outline\" className=\"text-gray-600\">\n                            <i className=\"fas fa-check-circle mr-1\"></i>\n                            Completed\n                          </Badge>\n                        )}\n                      </div>\n                      \n                      <div className=\"flex space-x-2\">\n                        <Button variant=\"outline\" size=\"sm\">\n                          <i className=\"fas fa-eye mr-2\"></i>\n                          View Details\n                        </Button>\n                        {(order.status === 'completed' || order.status === 'active') && (\n                          <Button variant=\"outline\" size=\"sm\">\n                            <i className=\"fas fa-download mr-2\"></i>\n                            Invoice\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </CustomerLayout>\n  );\n}\n","size_bytes":10182},"server/auth.ts":{"content":"import bcrypt from \"bcryptjs\";\nimport passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\nimport type { User } from \"@shared/schema\";\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET || \"dev-secret-key\",\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Local strategy for email/password authentication\n  passport.use(new LocalStrategy({\n    usernameField: 'email',\n    passwordField: 'password'\n  }, async (email, password, done) => {\n    try {\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return done(null, false, { message: 'Invalid email or password' });\n      }\n\n      const isValid = await bcrypt.compare(password, user.password);\n      if (!isValid) {\n        return done(null, false, { message: 'Invalid email or password' });\n      }\n\n      return done(null, user);\n    } catch (error) {\n      return done(error);\n    }\n  }));\n\n  passport.serializeUser((user: any, done) => {\n    done(null, user.id);\n  });\n\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      if (!user) {\n        return done(null, false);\n      }\n      done(null, user);\n    } catch (error) {\n      done(null, false);\n    }\n  });\n}\n\nexport const isAuthenticated: RequestHandler = (req, res, next) => {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ message: \"Unauthorized\" });\n};\n\nexport const isAdmin: RequestHandler = (req, res, next) => {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n  \n  const user = req.user as User;\n  if (user.role !== 'admin') {\n    return res.status(403).json({ message: \"Admin access required\" });\n  }\n  \n  next();\n};\n\nexport async function hashPassword(password: string): Promise<string> {\n  return await bcrypt.hash(password, 12);\n}","size_bytes":2665},"client/src/pages/auth/login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { loginUserSchema, type LoginUser } from \"@shared/schema\";\nimport { OtpVerification } from \"./otp-verification\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showOtpVerification, setShowOtpVerification] = useState(false);\n  const [userData, setUserData] = useState<any>(null);\n\n  const form = useForm<LoginUser>({\n    resolver: zodResolver(loginUserSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginUser) => {\n      return await apiRequest(\"POST\", \"/api/auth/login\", data);\n    },\n    onSuccess: (user) => {\n      if (user.requiresOtp) {\n        // Show OTP verification screen\n        setUserData(user);\n        setShowOtpVerification(true);\n        toast({\n          title: \"OTP Sent\",\n          description: user.message || \"Please check your email for verification code\",\n        });\n      } else {\n        // Direct login (backward compatibility)\n        toast({\n          title: \"Success\",\n          description: \"Logged in successfully\",\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n        \n        // Redirect based on user role\n        if (user.role === 'admin') {\n          setLocation(\"/admin\");\n        } else {\n          setLocation(\"/\");\n        }\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message || \"Invalid email or password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginUser) => {\n    loginMutation.mutate(data);\n  };\n\n  const handleOtpVerified = (verifiedUser: any) => {\n    queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    toast({\n      title: \"Success\",\n      description: \"Login verified successfully\",\n    });\n    \n    // Redirect based on user role\n    if (verifiedUser.role === 'admin') {\n      setLocation(\"/admin\");\n    } else {\n      setLocation(\"/\");\n    }\n  };\n\n  // Show OTP verification if needed\n  if (showOtpVerification && userData) {\n    return (\n      <OtpVerification\n        userId={userData.id}\n        email={userData.email}\n        purpose=\"login\"\n        onVerified={handleOtpVerified}\n      />\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8\">\n      <div className=\"sm:mx-auto sm:w-full sm:max-w-md\">\n        <Card>\n          <CardHeader className=\"space-y-1\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-2xl font-bold text-blue-600\">\n                Rental Management\n              </CardTitle>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setLocation(\"/\")}\n                className=\"text-blue-600 border-blue-600 hover:bg-blue-50\"\n              >\n                Home\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"email\"\n                          placeholder=\"Enter your email\"\n                          className=\"w-full\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"password\"\n                          placeholder=\"Enter your password\"\n                          className=\"w-full\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 rounded-full\"\n                  disabled={loginMutation.isPending}\n                >\n                  {loginMutation.isPending ? \"Signing In...\" : \"SIGN IN\"}\n                </Button>\n              </form>\n            </Form>\n\n            <div className=\"text-center space-y-2\">\n              <div className=\"bg-blue-50 p-3 rounded-lg border border-blue-200 mb-4\">\n                <p className=\"text-sm font-medium text-blue-800\">Admin Login</p>\n                <p className=\"text-xs text-blue-600\">Email: admin@rental.com | Password: admin123</p>\n              </div>\n              <p className=\"text-sm text-gray-600\">\n                don't have account?{\" \"}\n                <button\n                  onClick={() => setLocation(\"/register\")}\n                  className=\"text-blue-600 hover:text-blue-700 font-medium\"\n                >\n                  Register here\n                </button>\n              </p>\n              <p className=\"text-sm text-gray-600\">\n                <button className=\"text-blue-600 hover:text-blue-700\">\n                  forgot username / password\n                </button>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":6523},"client/src/pages/auth/register.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { registerUserSchema, type RegisterUser } from \"@shared/schema\";\nimport { OtpVerification } from \"./otp-verification\";\n\nexport default function Register() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [passwordStrength, setPasswordStrength] = useState(0);\n  const [showOtpVerification, setShowOtpVerification] = useState(false);\n  const [userData, setUserData] = useState<any>(null);\n\n  const form = useForm<RegisterUser>({\n    resolver: zodResolver(registerUserSchema),\n    defaultValues: {\n      email: \"\",\n      name: \"\",\n      phone: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: RegisterUser) => {\n      return await apiRequest(\"POST\", \"/api/auth/register\", data);\n    },\n    onSuccess: (user) => {\n      if (user.requiresOtp) {\n        // Show OTP verification screen\n        setUserData(user);\n        setShowOtpVerification(true);\n        toast({\n          title: \"Registration Successful\",\n          description: user.message || \"Please verify your email with the OTP code\",\n        });\n      } else {\n        // Direct registration success (backward compatibility)\n        toast({\n          title: \"Success\",\n          description: \"Account created successfully! Please log in.\",\n        });\n        setLocation(\"/login\");\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message || \"Failed to create account\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const calculatePasswordStrength = (password: string) => {\n    let strength = 0;\n    if (password.length >= 8) strength += 25;\n    if (/[A-Z]/.test(password)) strength += 25;\n    if (/[a-z]/.test(password)) strength += 25;\n    if (/[0-9]/.test(password)) strength += 25;\n    return strength;\n  };\n\n  const watchPassword = form.watch(\"password\");\n  \n  // Update password strength when password changes\n  if (watchPassword) {\n    const strength = calculatePasswordStrength(watchPassword);\n    if (strength !== passwordStrength) {\n      setPasswordStrength(strength);\n    }\n  }\n\n  const onSubmit = (data: RegisterUser) => {\n    registerMutation.mutate(data);\n  };\n\n  const handleOtpVerified = (verifiedUser: any) => {\n    toast({\n      title: \"Email Verified\",\n      description: \"Your account has been verified successfully. Please log in.\",\n    });\n    setLocation(\"/login\");\n  };\n\n  // Show OTP verification if needed\n  if (showOtpVerification && userData) {\n    return (\n      <OtpVerification\n        userId={userData.id}\n        email={userData.email}\n        purpose=\"signup\"\n        onVerified={handleOtpVerified}\n      />\n    );\n  }\n\n  const getPasswordStrengthText = () => {\n    if (passwordStrength <= 25) return \"weak\";\n    if (passwordStrength <= 50) return \"fair\";\n    if (passwordStrength <= 75) return \"good\";\n    return \"strong\";\n  };\n\n  const getPasswordStrengthColor = () => {\n    if (passwordStrength <= 25) return \"bg-red-500\";\n    if (passwordStrength <= 50) return \"bg-yellow-500\";\n    if (passwordStrength <= 75) return \"bg-blue-500\";\n    return \"bg-green-500\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8\">\n      <div className=\"sm:mx-auto sm:w-full sm:max-w-md\">\n        <Card>\n          <CardHeader className=\"space-y-1\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-2xl font-bold text-blue-600\">\n                Rental Management\n              </CardTitle>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setLocation(\"/\")}\n                className=\"text-blue-600 border-blue-600 hover:bg-blue-50\"\n              >\n                Home\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Your Email</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"email\"\n                          placeholder=\"admin\"\n                          className=\"w-full\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Your Name</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"text\"\n                          placeholder=\"e.g. John Doe\"\n                          className=\"w-full\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"phone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Your Phone</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          value={field.value || ''}\n                          type=\"tel\"\n                          placeholder=\"e.g. 9098980900\"\n                          className=\"w-full\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"password\"\n                          placeholder=\"•••••\"\n                          className=\"w-full\"\n                        />\n                      </FormControl>\n                      {watchPassword && (\n                        <div className=\"space-y-2\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Progress \n                              value={passwordStrength} \n                              className=\"flex-1 h-2\"\n                              style={{\n                                background: `linear-gradient(to right, ${\n                                  passwordStrength <= 25 ? '#ef4444' :\n                                  passwordStrength <= 50 ? '#eab308' :\n                                  passwordStrength <= 75 ? '#3b82f6' : '#22c55e'\n                                } ${passwordStrength}%, #e5e7eb ${passwordStrength}%)`\n                              }}\n                            />\n                            <span className=\"text-sm text-gray-600\">\n                              password meter: {getPasswordStrengthText()}\n                            </span>\n                          </div>\n                        </div>\n                      )}\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"confirmPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Confirm Password</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"password\"\n                          placeholder=\"•••••\"\n                          className=\"w-full\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 rounded-full\"\n                  disabled={registerMutation.isPending}\n                >\n                  {registerMutation.isPending ? \"Creating Account...\" : \"SIGN UP\"}\n                </Button>\n              </form>\n            </Form>\n\n            <div className=\"text-center\">\n              <p className=\"text-sm text-gray-600\">\n                already have account?{\" \"}\n                <button\n                  onClick={() => setLocation(\"/login\")}\n                  className=\"text-blue-600 hover:text-blue-700 font-medium\"\n                >\n                  Login\n                </button>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":9941},"client/src/pages/admin/transfers.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport AdminLayout from \"@/components/layout/admin-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport type { OrderWithItems } from \"@shared/schema\";\n\nexport default function AdminTransfers() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [transferType, setTransferType] = useState(\"pickup\");\n  const [selectedTransfer, setSelectedTransfer] = useState<OrderWithItems | null>(null);\n  const [isTransferDialogOpen, setIsTransferDialogOpen] = useState(false);\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: orders, isLoading: ordersLoading } = useQuery({\n    queryKey: [\"/api/orders\"],\n    enabled: isAuthenticated,\n  });\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'draft': return 'bg-yellow-100 text-yellow-800';\n      case 'ready': return 'bg-pink-100 text-pink-800';\n      case 'done': return 'bg-green-100 text-green-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatDate = (date: string | Date) => {\n    return new Date(date).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  const pickupOrders = Array.isArray(orders) ? orders.filter(order => \n    order.status === 'confirmed' || order.status === 'paid'\n  ) : [];\n\n  const returnOrders = Array.isArray(orders) ? orders.filter(order => \n    order.status === 'active'\n  ) : [];\n\n  const openTransferDialog = (order: OrderWithItems, type: 'pickup' | 'return') => {\n    setSelectedTransfer(order);\n    setTransferType(type);\n    setIsTransferDialogOpen(true);\n  };\n\n  return (\n    <AdminLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-gray-900\">Transfer</h2>\n            <p className=\"text-gray-600\">Manage pickup and return operations</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <Button className=\"bg-purple-600 hover:bg-purple-700 text-white\">\n              Create\n            </Button>\n            <span className=\"text-sm text-gray-500\">1/80</span>\n            <div className=\"flex\">\n              <Button variant=\"outline\" size=\"sm\">\n                &lt;\n              </Button>\n              <Button variant=\"outline\" size=\"sm\">\n                &gt;\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Transfer Type Tabs */}\n        <Tabs defaultValue=\"pickup\" className=\"w-full\">\n          <TabsList>\n            <TabsTrigger value=\"pickup\">Pickup Transfers</TabsTrigger>\n            <TabsTrigger value=\"return\">Return Transfers</TabsTrigger>\n          </TabsList>\n          \n          {/* Pickup Transfers */}\n          <TabsContent value=\"pickup\" className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {pickupOrders.length === 0 ? (\n                <div className=\"col-span-full text-center py-8 text-gray-500\">\n                  No pickup transfers available\n                </div>\n              ) : (\n                pickupOrders.map((order) => (\n                  <Card \n                    key={order.id}\n                    className=\"hover:shadow-lg transition-shadow cursor-pointer\"\n                    onClick={() => openTransferDialog(order, 'pickup')}\n                  >\n                    <CardContent className=\"p-6\">\n                      <div className=\"space-y-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <h3 className=\"font-semibold text-lg\">PICKUP/OUT/{order.orderNumber}</h3>\n                          <div className=\"flex space-x-2\">\n                            <Badge className=\"bg-yellow-100 text-yellow-800\">Draft</Badge>\n                            <Badge className=\"bg-pink-100 text-pink-800\">Ready</Badge>\n                            <Badge className=\"bg-green-100 text-green-800\">Done</Badge>\n                          </div>\n                        </div>\n                        \n                        <div className=\"space-y-2 text-sm\">\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-gray-600\">Customer:</span>\n                            <span className=\"font-medium\">{order.customer?.name || 'N/A'}</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-gray-600\">Schedule Date:</span>\n                            <span>{formatDate(order.startDate)}</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-gray-600\">Responsible:</span>\n                            <span>Admin</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-gray-600\">Transfer Type:</span>\n                            <span>Pickup</span>\n                          </div>\n                        </div>\n\n                        <div className=\"border-t pt-4\">\n                          <div className=\"text-sm font-medium mb-2\">Transfer Items:</div>\n                          <div className=\"space-y-1\">\n                            {order.orderItems.map((item) => (\n                              <div key={item.id} className=\"flex justify-between text-sm\">\n                                <span>{item.product.name}</span>\n                                <span>{item.quantity}</span>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n\n                        <div className=\"border-t pt-4 text-right\">\n                          <div className=\"text-sm text-gray-600\">Untaxed Total: ₹{Number(order.totalAmount).toLocaleString()}</div>\n                          <div className=\"text-sm text-gray-600\">Tax: ₹0</div>\n                          <div className=\"font-bold\">Total: ₹{Number(order.totalAmount).toLocaleString()}</div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))\n              )}\n            </div>\n          </TabsContent>\n\n          {/* Return Transfers */}\n          <TabsContent value=\"return\" className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {returnOrders.length === 0 ? (\n                <div className=\"col-span-full text-center py-8 text-gray-500\">\n                  No return transfers available\n                </div>\n              ) : (\n                returnOrders.map((order) => (\n                  <Card \n                    key={order.id}\n                    className=\"hover:shadow-lg transition-shadow cursor-pointer\"\n                    onClick={() => openTransferDialog(order, 'return')}\n                  >\n                    <CardContent className=\"p-6\">\n                      <div className=\"space-y-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <h3 className=\"font-semibold text-lg\">Return/In/{order.orderNumber}</h3>\n                          <div className=\"flex space-x-2\">\n                            <Badge className=\"bg-pink-100 text-pink-800\">Draft</Badge>\n                            <Badge className=\"bg-yellow-100 text-yellow-800\">Waiting</Badge>\n                            <Badge className=\"bg-orange-100 text-orange-800\">Ready</Badge>\n                            <Badge className=\"bg-pink-200 text-pink-800\">Done</Badge>\n                          </div>\n                        </div>\n                        \n                        <div className=\"space-y-2 text-sm\">\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-gray-600\">Received from Customer:</span>\n                            <span className=\"font-medium\">{order.customer?.name || 'N/A'}</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-gray-600\">Schedule Date:</span>\n                            <span>{formatDate(order.endDate)}</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-gray-600\">Responsible:</span>\n                            <span>Admin</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-gray-600\">Transfer Type:</span>\n                            <Badge className=\"bg-purple-100 text-purple-800\">Impassioned Frog</Badge>\n                          </div>\n                        </div>\n\n                        <div className=\"border-t pt-4\">\n                          <div className=\"text-sm font-medium mb-2\">Transfer Items:</div>\n                          <div className=\"space-y-1\">\n                            {order.orderItems.map((item) => (\n                              <div key={item.id} className=\"flex justify-between text-sm\">\n                                <span>{item.product.name}</span>\n                                <span>{item.quantity}</span>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n\n                        <div className=\"border-t pt-4 text-right\">\n                          <div className=\"text-sm text-gray-600\">Untaxed Total: ₹{Number(order.totalAmount).toLocaleString()}</div>\n                          <div className=\"text-sm text-gray-600\">Tax: ₹0</div>\n                          <div className=\"font-bold\">Total: ₹{Number(order.totalAmount).toLocaleString()}</div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))\n              )}\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* Transfer Detail Dialog */}\n      <Dialog open={isTransferDialogOpen} onOpenChange={setIsTransferDialogOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center justify-between\">\n              <span>{transferType === 'pickup' ? 'Pickup' : 'Return'} Transfer</span>\n              <div className=\"flex space-x-2\">\n                <Button variant=\"outline\" size=\"sm\">Check Availability</Button>\n                <Button variant=\"outline\" size=\"sm\">Confirm</Button>\n                <Button variant=\"outline\" size=\"sm\">Cancel</Button>\n                {transferType === 'pickup' ? (\n                  <>\n                    <Button size=\"sm\" className=\"bg-yellow-400 text-black hover:bg-yellow-500\">\n                      Draft\n                    </Button>\n                    <Button size=\"sm\" className=\"bg-pink-500 hover:bg-pink-600\">\n                      Ready\n                    </Button>\n                    <Button size=\"sm\" className=\"bg-green-500 hover:bg-green-600\">\n                      Done\n                    </Button>\n                  </>\n                ) : (\n                  <>\n                    <Button size=\"sm\" className=\"bg-pink-200 text-pink-800 hover:bg-pink-300\">\n                      Draft\n                    </Button>\n                    <Button size=\"sm\" className=\"bg-yellow-400 text-black hover:bg-yellow-500\">\n                      Waiting\n                    </Button>\n                    <Button size=\"sm\" className=\"bg-orange-500 hover:bg-orange-600\">\n                      Ready\n                    </Button>\n                    <Button size=\"sm\" className=\"bg-pink-500 hover:bg-pink-600\">\n                      Done\n                    </Button>\n                  </>\n                )}\n              </div>\n            </DialogTitle>\n          </DialogHeader>\n          \n          {selectedTransfer && (\n            <div className=\"space-y-6\">\n              <div className=\"text-2xl font-bold\">\n                {transferType === 'pickup' ? 'PICKUP/OUT/' : 'Return/In/'}{selectedTransfer.orderNumber}\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  {transferType === 'pickup' ? (\n                    <>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-600\">Customer:</label>\n                        <p>{selectedTransfer.customer?.name || 'N/A'}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-600\">Invoice Address:</label>\n                        <p>{selectedTransfer.customer?.address || 'N/A'}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-600\">Delivery Address:</label>\n                        <p>{selectedTransfer.pickupAddress || 'N/A'}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-600\">Source Location:</label>\n                        <p>Main Warehouse</p>\n                      </div>\n                    </>\n                  ) : (\n                    <>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-600\">Received from Customer:</label>\n                        <p>{selectedTransfer.customer?.name || 'N/A'}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-600\">Pickup Address:</label>\n                        <p>{selectedTransfer.customer?.address || 'N/A'}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-600\">Destination Location:</label>\n                        <p>Main Warehouse</p>\n                      </div>\n                    </>\n                  )}\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-600\">Schedule Date:</label>\n                    <p>{formatDate(transferType === 'pickup' ? selectedTransfer.startDate : selectedTransfer.endDate)}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-600\">Responsible:</label>\n                    <p>Admin</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-600\">Transfer Type:</label>\n                    <p>{transferType === 'pickup' ? 'Pickup' : 'Return'}</p>\n                  </div>\n                </div>\n              </div>\n\n              <Tabs defaultValue=\"transfer-lines\" className=\"w-full\">\n                <TabsList>\n                  <TabsTrigger value=\"transfer-lines\">Transfer lines</TabsTrigger>\n                  <TabsTrigger value=\"other-details\">Other details</TabsTrigger>\n                  <TabsTrigger value=\"transfer-notes\">Transfer Notes</TabsTrigger>\n                </TabsList>\n                \n                <TabsContent value=\"transfer-lines\" className=\"space-y-4\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Product</TableHead>\n                        <TableHead>Quantity</TableHead>\n                        <TableHead>Unit Price</TableHead>\n                        <TableHead>Tax</TableHead>\n                        <TableHead>Sub Total</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {selectedTransfer.orderItems.map((item) => (\n                        <TableRow key={item.id}>\n                          <TableCell>{item.product.name}</TableCell>\n                          <TableCell>{item.quantity}</TableCell>\n                          <TableCell>₹{Number(item.unitRate).toLocaleString()}</TableCell>\n                          <TableCell>₹0</TableCell>\n                          <TableCell>₹{Number(item.totalAmount).toLocaleString()}</TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </TabsContent>\n                \n                <TabsContent value=\"other-details\">\n                  <div className=\"space-y-4\">\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-600\">Notes:</label>\n                      <p className=\"text-sm text-gray-700 mt-1\">\n                        {selectedTransfer.notes || \"No additional notes.\"}\n                      </p>\n                    </div>\n                  </div>\n                </TabsContent>\n                \n                <TabsContent value=\"transfer-notes\">\n                  <div className=\"space-y-4\">\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-600\">Transfer Notes:</label>\n                      <Textarea \n                        placeholder=\"Add transfer notes...\"\n                        className=\"mt-1\"\n                      />\n                    </div>\n                  </div>\n                </TabsContent>\n              </Tabs>\n\n              <div className=\"border-t pt-4\">\n                <div className=\"flex justify-end space-x-8\">\n                  <div className=\"text-right\">\n                    <p className=\"text-sm text-gray-600\">Untaxed Total: ₹{Number(selectedTransfer.totalAmount).toLocaleString()}</p>\n                    <p className=\"text-sm text-gray-600\">Tax: ₹0</p>\n                    <p className=\"text-lg font-bold\">Total: ₹{Number(selectedTransfer.totalAmount).toLocaleString()}</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </AdminLayout>\n  );\n}","size_bytes":19886},"client/src/pages/customer/contact.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport CustomerLayout from \"@/components/layout/customer-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Phone, Mail, MapPin, Clock } from \"lucide-react\";\n\nexport default function CustomerContact() {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    subject: \"\",\n    message: \"\",\n  });\n  const { toast } = useToast();\n\n  const submitMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      // Simulate contact form submission\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      return { success: true };\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Message sent successfully\",\n        description: \"We'll get back to you within 24 hours\",\n      });\n      setFormData({ name: \"\", email: \"\", subject: \"\", message: \"\" });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    submitMutation.mutate(formData);\n  };\n\n  const handleChange = (field: keyof typeof formData) => (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    setFormData(prev => ({ ...prev, [field]: e.target.value }));\n  };\n\n  return (\n    <CustomerLayout>\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-2xl font-bold text-gray-900 flex items-center\">\n            <Phone className=\"h-6 w-6 mr-2 text-blue-500\" />\n            Contact Us\n          </h1>\n          <p className=\"text-gray-600 mt-2\">Get in touch with our rental experts</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Contact Information */}\n          <div className=\"lg:col-span-1\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Get in Touch</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"flex items-start\">\n                  <Phone className=\"h-5 w-5 text-blue-500 mt-1 mr-3\" />\n                  <div>\n                    <h4 className=\"font-medium text-gray-900\">Phone</h4>\n                    <p className=\"text-gray-600\">+1 (555) 123-4567</p>\n                    <p className=\"text-sm text-gray-500\">Available 24/7</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start\">\n                  <Mail className=\"h-5 w-5 text-blue-500 mt-1 mr-3\" />\n                  <div>\n                    <h4 className=\"font-medium text-gray-900\">Email</h4>\n                    <p className=\"text-gray-600\">support@rentflow.com</p>\n                    <p className=\"text-sm text-gray-500\">Response within 24 hours</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start\">\n                  <MapPin className=\"h-5 w-5 text-blue-500 mt-1 mr-3\" />\n                  <div>\n                    <h4 className=\"font-medium text-gray-900\">Address</h4>\n                    <p className=\"text-gray-600\">123 Rental Street<br />Equipment City, RC 12345</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start\">\n                  <Clock className=\"h-5 w-5 text-blue-500 mt-1 mr-3\" />\n                  <div>\n                    <h4 className=\"font-medium text-gray-900\">Business Hours</h4>\n                    <p className=\"text-gray-600\">Monday - Friday: 8AM - 8PM</p>\n                    <p className=\"text-gray-600\">Saturday: 9AM - 6PM</p>\n                    <p className=\"text-gray-600\">Sunday: 10AM - 4PM</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Contact Form */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Send us a Message</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleSubmit} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Name *\n                      </label>\n                      <Input\n                        value={formData.name}\n                        onChange={handleChange(\"name\")}\n                        placeholder=\"Your full name\"\n                        required\n                        data-testid=\"contact-name-input\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Email *\n                      </label>\n                      <Input\n                        type=\"email\"\n                        value={formData.email}\n                        onChange={handleChange(\"email\")}\n                        placeholder=\"your.email@example.com\"\n                        required\n                        data-testid=\"contact-email-input\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Subject *\n                    </label>\n                    <Input\n                      value={formData.subject}\n                      onChange={handleChange(\"subject\")}\n                      placeholder=\"How can we help you?\"\n                      required\n                      data-testid=\"contact-subject-input\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Message *\n                    </label>\n                    <Textarea\n                      value={formData.message}\n                      onChange={handleChange(\"message\")}\n                      placeholder=\"Tell us more about your rental needs...\"\n                      rows={6}\n                      required\n                      data-testid=\"contact-message-input\"\n                    />\n                  </div>\n\n                  <Button\n                    type=\"submit\"\n                    disabled={submitMutation.isPending}\n                    className=\"w-full md:w-auto\"\n                    data-testid=\"contact-submit-button\"\n                  >\n                    {submitMutation.isPending ? \"Sending...\" : \"Send Message\"}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </CustomerLayout>\n  );\n}","size_bytes":7152},"client/src/pages/customer/wishlist.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport CustomerLayout from \"@/components/layout/customer-layout\";\nimport ProductCard from \"@/components/ui/product-card\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Heart } from \"lucide-react\";\nimport type { ProductWithCategory } from \"@shared/schema\";\n\nexport default function CustomerWishlist() {\n  const { data: wishlistProducts, isLoading } = useQuery({\n    queryKey: [\"/api/products\"],\n    queryFn: () => fetch(\"/api/products\").then(res => res.json()),\n  });\n\n  // Filter to show only a few sample products in wishlist for demo\n  const sampleWishlist = wishlistProducts?.slice(0, 3) || [];\n\n  return (\n    <CustomerLayout>\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-2xl font-bold text-gray-900 flex items-center\">\n            <Heart className=\"h-6 w-6 mr-2 text-red-500\" />\n            My Wishlist\n          </h1>\n          <p className=\"text-gray-600 mt-2\">Save your favorite rental items for later</p>\n        </div>\n\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[...Array(6)].map((_, i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <div className=\"h-48 bg-gray-200 rounded-t-lg\"></div>\n                <CardContent className=\"p-4\">\n                  <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded mb-4\"></div>\n                  <div className=\"space-y-2\">\n                    <div className=\"h-3 bg-gray-200 rounded\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : !sampleWishlist || sampleWishlist.length === 0 ? (\n          <Card>\n            <CardContent className=\"py-16 text-center\">\n              <Heart className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                Your wishlist is empty\n              </h3>\n              <p className=\"text-gray-600 mb-6\">\n                Start browsing our catalog and add items to your wishlist by clicking the heart icon\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {sampleWishlist.map((product: ProductWithCategory) => (\n              <ProductCard\n                key={product.id}\n                product={product}\n                onBook={() => window.location.href = `/catalog/${product.id}`}\n                selectedDates={{}}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n    </CustomerLayout>\n  );\n}","size_bytes":2863},"client/src/pages/admin/invoices.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport AdminLayout from \"@/components/layout/admin-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { FileText, Eye, CreditCard, Calendar, Clock, DollarSign, AlertCircle, CheckCircle } from \"lucide-react\";\nimport type { InvoiceWithDetails } from \"@shared/schema\";\n\nexport default function AdminInvoices() {\n  const [selectedInvoice, setSelectedInvoice] = useState<InvoiceWithDetails | null>(null);\n  const [filterStatus, setFilterStatus] = useState<string>(\"all\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: invoices = [], isLoading } = useQuery({\n    queryKey: [\"/api/invoices\"],\n  });\n\n  const generateInvoiceMutation = useMutation({\n    mutationFn: async (orderId: string) => {\n      const response = await apiRequest(\"POST\", `/api/invoices/generate/${orderId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Invoice Generated\",\n        description: \"Invoice has been generated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to generate invoice\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const payInvoiceMutation = useMutation({\n    mutationFn: async ({ invoiceId, amount, paymentType }: { invoiceId: string; amount?: number; paymentType: 'partial' | 'full' }) => {\n      const response = await apiRequest(\"POST\", `/api/invoices/${invoiceId}/pay`, {\n        amount,\n        paymentType\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      if (data.clientSecret) {\n        // In a real implementation, you would integrate with Stripe Elements here\n        toast({\n          title: \"Payment Initiated\",\n          description: \"Payment process started. Please complete the payment.\",\n        });\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to process payment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredInvoices = invoices.filter((invoice: InvoiceWithDetails) => {\n    if (filterStatus === \"all\") return true;\n    return invoice.status === filterStatus;\n  });\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'paid':\n        return <Badge className=\"bg-green-100 text-green-800\"><CheckCircle className=\"w-3 h-3 mr-1\" />Paid</Badge>;\n      case 'overdue':\n        return <Badge variant=\"destructive\"><AlertCircle className=\"w-3 h-3 mr-1\" />Overdue</Badge>;\n      case 'sent':\n        return <Badge variant=\"outline\"><Clock className=\"w-3 h-3 mr-1\" />Sent</Badge>;\n      case 'draft':\n        return <Badge variant=\"secondary\">Draft</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const formatCurrency = (amount: string | number) => {\n    return `₹${Number(amount).toLocaleString()}`;\n  };\n\n  const formatDate = (date: string | Date) => {\n    return new Date(date).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <AdminLayout>\n        <div className=\"h-screen flex items-center justify-center\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n        </div>\n      </AdminLayout>\n    );\n  }\n\n  return (\n    <AdminLayout>\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Invoice Management</h1>\n            <p className=\"text-gray-600 mt-2\">Manage and track all rental invoices</p>\n          </div>\n          <div className=\"flex space-x-3\">\n            <Select value={filterStatus} onValueChange={setFilterStatus}>\n              <SelectTrigger className=\"w-[180px]\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Invoices</SelectItem>\n                <SelectItem value=\"draft\">Draft</SelectItem>\n                <SelectItem value=\"sent\">Sent</SelectItem>\n                <SelectItem value=\"paid\">Paid</SelectItem>\n                <SelectItem value=\"overdue\">Overdue</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {/* Invoice Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card className=\"border-l-4 border-l-blue-500\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Total Invoices</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{invoices.length}</p>\n                </div>\n                <FileText className=\"h-8 w-8 text-blue-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-l-4 border-l-green-500\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Paid Invoices</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {invoices.filter((inv: InvoiceWithDetails) => inv.status === 'paid').length}\n                  </p>\n                </div>\n                <CheckCircle className=\"h-8 w-8 text-green-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-l-4 border-l-red-500\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Overdue</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {invoices.filter((inv: InvoiceWithDetails) => inv.status === 'overdue').length}\n                  </p>\n                </div>\n                <AlertCircle className=\"h-8 w-8 text-red-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-l-4 border-l-purple-500\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Total Value</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {formatCurrency(\n                      invoices.reduce((sum: number, inv: InvoiceWithDetails) => sum + Number(inv.totalAmount), 0)\n                    )}\n                  </p>\n                </div>\n                <DollarSign className=\"h-8 w-8 text-purple-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Invoices List */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <FileText className=\"h-5 w-5 mr-2\" />\n              All Invoices\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {filteredInvoices.length === 0 ? (\n              <div className=\"text-center py-12 text-gray-500\">\n                <FileText className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No invoices found</h3>\n                <p className=\"text-gray-600\">\n                  {filterStatus === \"all\" \n                    ? \"Start by generating invoices for your orders.\" \n                    : `No invoices with status \"${filterStatus}\" found.`\n                  }\n                </p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {filteredInvoices.map((invoice: InvoiceWithDetails) => (\n                  <div key={invoice.id} className=\"border rounded-lg p-4 hover:bg-gray-50 transition-colors\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"h-10 w-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                          <FileText className=\"h-5 w-5 text-blue-600\" />\n                        </div>\n                        <div>\n                          <h3 className=\"font-medium text-gray-900\">{invoice.invoiceNumber}</h3>\n                          <p className=\"text-sm text-gray-600\">\n                            Order: {invoice.order.orderNumber} • Customer: {invoice.customer.name}\n                          </p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"text-right\">\n                          <p className=\"font-medium text-gray-900\">{formatCurrency(invoice.totalAmount)}</p>\n                          <p className=\"text-sm text-gray-600\">\n                            Due: {formatDate(invoice.dueDate)}\n                          </p>\n                        </div>\n                        \n                        {getStatusBadge(invoice.status)}\n                        \n                        <div className=\"flex space-x-2\">\n                          <Dialog>\n                            <DialogTrigger asChild>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => setSelectedInvoice(invoice)}\n                              >\n                                <Eye className=\"h-4 w-4 mr-2\" />\n                                View\n                              </Button>\n                            </DialogTrigger>\n                            <DialogContent className=\"max-w-2xl\">\n                              <DialogHeader>\n                                <DialogTitle>Invoice Details</DialogTitle>\n                              </DialogHeader>\n                              {selectedInvoice && (\n                                <div className=\"space-y-4\">\n                                  <div className=\"grid grid-cols-2 gap-4\">\n                                    <div>\n                                      <Label>Invoice Number</Label>\n                                      <p className=\"font-medium\">{selectedInvoice.invoiceNumber}</p>\n                                    </div>\n                                    <div>\n                                      <Label>Status</Label>\n                                      <div className=\"mt-1\">{getStatusBadge(selectedInvoice.status)}</div>\n                                    </div>\n                                    <div>\n                                      <Label>Customer</Label>\n                                      <p className=\"font-medium\">{selectedInvoice.customer.name}</p>\n                                    </div>\n                                    <div>\n                                      <Label>Due Date</Label>\n                                      <p className=\"font-medium\">{formatDate(selectedInvoice.dueDate)}</p>\n                                    </div>\n                                  </div>\n                                  \n                                  <div className=\"border-t pt-4\">\n                                    <div className=\"grid grid-cols-2 gap-4\">\n                                      <div>\n                                        <Label>Subtotal</Label>\n                                        <p className=\"font-medium\">{formatCurrency(selectedInvoice.subtotal)}</p>\n                                      </div>\n                                      <div>\n                                        <Label>Tax</Label>\n                                        <p className=\"font-medium\">{formatCurrency(selectedInvoice.taxAmount)}</p>\n                                      </div>\n                                      <div>\n                                        <Label>Late Fee</Label>\n                                        <p className=\"font-medium\">{formatCurrency(selectedInvoice.lateFee || '0')}</p>\n                                      </div>\n                                      <div>\n                                        <Label>Total Amount</Label>\n                                        <p className=\"text-lg font-bold\">{formatCurrency(selectedInvoice.totalAmount)}</p>\n                                      </div>\n                                    </div>\n                                  </div>\n                                  \n                                  <div className=\"border-t pt-4\">\n                                    <Label>Paid Amount</Label>\n                                    <p className=\"font-medium text-green-600\">{formatCurrency(selectedInvoice.paidAmount)}</p>\n                                    <Label className=\"mt-2\">Outstanding Balance</Label>\n                                    <p className=\"font-medium text-red-600\">\n                                      {formatCurrency(Number(selectedInvoice.totalAmount) - Number(selectedInvoice.paidAmount))}\n                                    </p>\n                                  </div>\n                                  \n                                  {selectedInvoice.status !== 'paid' && (\n                                    <div className=\"border-t pt-4 flex space-x-2\">\n                                      <Button\n                                        onClick={() => {\n                                          // Navigate to payment page instead of inline payment\n                                          window.open(`/invoice-payment/${selectedInvoice.id}`, '_blank');\n                                        }}\n                                        disabled={payInvoiceMutation.isPending}\n                                      >\n                                        <CreditCard className=\"h-4 w-4 mr-2\" />\n                                        Pay Now\n                                      </Button>\n                                    </div>\n                                  )}\n                                </div>\n                              )}\n                            </DialogContent>\n                          </Dialog>\n                          \n                          {invoice.status !== 'paid' && (\n                            <Button\n                              size=\"sm\"\n                              onClick={() => {\n                                window.open(`/invoice-payment/${invoice.id}`, '_blank');\n                              }}\n                            >\n                              <CreditCard className=\"h-4 w-4 mr-2\" />\n                              Pay Now\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </AdminLayout>\n  );\n}","size_bytes":15953},"client/src/pages/invoice-payment.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLocation, useRouter } from 'wouter';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Elements, CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { CreditCard, Shield, ArrowLeft, CheckCircle } from 'lucide-react';\n\nconst stripePublicKey = import.meta.env.VITE_STRIPE_PUBLIC_KEY;\nconst stripePromise = stripePublicKey ? loadStripe(stripePublicKey) : null;\n\ninterface PaymentFormProps {\n  invoiceId: string;\n  amount: number;\n  paymentType: 'full' | 'partial';\n  onSuccess: () => void;\n}\n\nfunction PaymentForm({ invoiceId, amount, paymentType, onSuccess }: PaymentFormProps) {\n  const stripe = useStripe();\n  const elements = useElements();\n  const [loading, setLoading] = useState(false);\n  const [clientSecret, setClientSecret] = useState('');\n  const { toast } = useToast();\n\n  useEffect(() => {\n    // Create payment intent\n    apiRequest('POST', `/api/invoices/${invoiceId}/pay`, {\n      amount,\n      paymentType\n    })\n      .then(res => res.json())\n      .then(data => {\n        setClientSecret(data.clientSecret);\n      })\n      .catch(error => {\n        toast({\n          title: 'Error',\n          description: error.message || 'Failed to initialize payment',\n          variant: 'destructive'\n        });\n      });\n  }, [invoiceId, amount, paymentType, toast]);\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n    \n    if (!stripe || !elements || !clientSecret) {\n      return;\n    }\n\n    setLoading(true);\n\n    const card = elements.getElement(CardElement);\n    if (!card) {\n      setLoading(false);\n      return;\n    }\n\n    const { error, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: card,\n      }\n    });\n\n    if (error) {\n      toast({\n        title: 'Payment Failed',\n        description: error.message,\n        variant: 'destructive'\n      });\n    } else if (paymentIntent?.status === 'succeeded') {\n      toast({\n        title: 'Payment Successful',\n        description: 'Your payment has been processed successfully.',\n      });\n      onSuccess();\n    }\n\n    setLoading(false);\n  };\n\n  const cardOptions = {\n    style: {\n      base: {\n        fontSize: '16px',\n        color: '#424770',\n        '::placeholder': {\n          color: '#aab7c4',\n        },\n      },\n    },\n  };\n\n  if (!clientSecret) {\n    return (\n      <div className=\"flex justify-center items-center py-8\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <div className=\"p-4 border rounded-lg\">\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n          Card Information\n        </label>\n        <CardElement options={cardOptions} />\n      </div>\n\n      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n        <div className=\"flex items-center\">\n          <Shield className=\"h-5 w-5 text-blue-600 mr-2\" />\n          <div>\n            <h4 className=\"text-sm font-medium text-blue-900\">Secure Payment</h4>\n            <p className=\"text-sm text-blue-700\">\n              Your payment information is encrypted and secure.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <Button\n        type=\"submit\"\n        disabled={!stripe || loading}\n        className=\"w-full\"\n        size=\"lg\"\n      >\n        {loading ? (\n          <div className=\"flex items-center\">\n            <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2\" />\n            Processing Payment...\n          </div>\n        ) : (\n          <>\n            <CreditCard className=\"h-4 w-4 mr-2\" />\n            Pay ₹{amount.toLocaleString()}\n          </>\n        )}\n      </Button>\n    </form>\n  );\n}\n\nexport default function InvoicePayment() {\n  const [location] = useLocation();\n  const [, navigate] = useRouter();\n  const [invoice, setInvoice] = useState<any>(null);\n  const [paymentType, setPaymentType] = useState<'full' | 'partial'>('full');\n  const [customAmount, setCustomAmount] = useState('');\n  const [paymentSuccess, setPaymentSuccess] = useState(false);\n  const { toast } = useToast();\n\n  // Extract invoice ID from URL\n  const invoiceId = location.split('/').pop();\n\n  useEffect(() => {\n    if (invoiceId) {\n      apiRequest('GET', `/api/invoices/${invoiceId}`)\n        .then(res => res.json())\n        .then(setInvoice)\n        .catch(error => {\n          toast({\n            title: 'Error',\n            description: 'Failed to load invoice details',\n            variant: 'destructive'\n          });\n          navigate('/');\n        });\n    }\n  }, [invoiceId, navigate, toast]);\n\n  if (!invoice) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (paymentSuccess) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <CheckCircle className=\"h-16 w-16 text-green-500 mx-auto mb-4\" />\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Payment Successful!</h2>\n              <p className=\"text-gray-600 mb-6\">\n                Your payment has been processed successfully.\n              </p>\n              <Button onClick={() => navigate('/')} className=\"w-full\">\n                Return to Dashboard\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const outstandingAmount = Number(invoice.totalAmount) - Number(invoice.paidAmount);\n  const paymentAmount = paymentType === 'full' ? outstandingAmount : Number(customAmount);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"max-w-2xl mx-auto px-4\">\n        <div className=\"mb-6\">\n          <Button \n            variant=\"ghost\" \n            onClick={() => navigate(-1)}\n            className=\"mb-4\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back\n          </Button>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Payment</h1>\n          <p className=\"text-gray-600 mt-2\">Complete your invoice payment</p>\n        </div>\n\n        <div className=\"grid gap-6 lg:grid-cols-2\">\n          {/* Invoice Summary */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Invoice Summary</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex justify-between\">\n                <span>Invoice Number:</span>\n                <span className=\"font-medium\">{invoice.invoiceNumber}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Customer:</span>\n                <span className=\"font-medium\">{invoice.customer.name}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Total Amount:</span>\n                <span className=\"font-medium\">₹{Number(invoice.totalAmount).toLocaleString()}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Paid Amount:</span>\n                <span className=\"font-medium text-green-600\">₹{Number(invoice.paidAmount).toLocaleString()}</span>\n              </div>\n              <div className=\"flex justify-between border-t pt-2\">\n                <span className=\"font-medium\">Outstanding:</span>\n                <span className=\"font-bold text-red-600\">₹{outstandingAmount.toLocaleString()}</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Payment Form */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Payment Details</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {!stripePublicKey ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n                    <div className=\"flex items-center\">\n                      <CreditCard className=\"h-5 w-5 text-yellow-600 mr-2\" />\n                      <div>\n                        <h4 className=\"text-sm font-medium text-yellow-900\">Payment Configuration Required</h4>\n                        <p className=\"text-sm text-yellow-700\">\n                          Stripe integration is not configured. Please contact support.\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <Elements stripe={stripePromise}>\n                  <PaymentForm\n                    invoiceId={invoice.id}\n                    amount={paymentAmount}\n                    paymentType={paymentType}\n                    onSuccess={() => setPaymentSuccess(true)}\n                  />\n                </Elements>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":9477},"server/seed-invoices.ts":{"content":"import { db } from \"./db\";\nimport { storage } from \"./storage\";\nimport { orders, invoices } from \"@shared/schema\";\n\nasync function seedInvoices() {\n  try {\n    console.log(\"Starting invoice seeding...\");\n\n    // Get all orders that don't have invoices yet\n    const allOrders = await storage.getOrders();\n    console.log(`Found ${allOrders.length} total orders`);\n\n    let invoicesCreated = 0;\n\n    for (const order of allOrders) {\n      // Check if invoice already exists\n      const existingInvoice = await storage.getInvoiceByOrder(order.id);\n      if (existingInvoice) {\n        console.log(`Invoice already exists for order ${order.orderNumber}`);\n        continue;\n      }\n\n      // Create invoice for this order\n      const invoiceNumber = await storage.generateInvoiceNumber();\n      const dueDate = new Date();\n      dueDate.setDate(dueDate.getDate() + 30); // 30 days from now\n\n      const invoice = await storage.createInvoice({\n        invoiceNumber,\n        orderId: order.id,\n        customerId: order.customerId,\n        dueDate,\n        subtotal: order.totalAmount,\n        taxAmount: '0',\n        totalAmount: order.totalAmount,\n        paidAmount: order.paymentStatus === 'paid' ? order.totalAmount : '0',\n        status: order.paymentStatus === 'paid' ? 'paid' : 'sent'\n      });\n\n      console.log(`Created invoice ${invoice.invoiceNumber} for order ${order.orderNumber}`);\n      invoicesCreated++;\n    }\n\n    console.log(`Successfully created ${invoicesCreated} invoices`);\n  } catch (error) {\n    console.error(\"Error seeding invoices:\", error);\n  } finally {\n    process.exit(0);\n  }\n}\n\n// Run the seeding if this file is executed directly\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nif (import.meta.url === `file://${process.argv[1]}`) {\n  seedInvoices();\n}\n\nexport { seedInvoices };","size_bytes":1924},"server/email.ts":{"content":"import sgMail from '@sendgrid/mail';\n\nif (!process.env.SENDGRID_API_KEY) {\n  console.warn('SENDGRID_API_KEY not found. Email functionality will be disabled.');\n} else {\n  sgMail.setApiKey(process.env.SENDGRID_API_KEY);\n}\n\ninterface EmailParams {\n  to: string;\n  from: string;\n  subject: string;\n  text?: string;\n  html?: string;\n}\n\nexport async function sendEmail(params: EmailParams): Promise<boolean> {\n  if (!process.env.SENDGRID_API_KEY) {\n    console.log('Email would be sent to:', params.to, 'Subject:', params.subject);\n    return false;\n  }\n\n  try {\n    await sgMail.send({\n      to: params.to,\n      from: params.from,\n      subject: params.subject,\n      text: params.text,\n      html: params.html,\n    });\n    return true;\n  } catch (error) {\n    console.error('SendGrid email error:', error);\n    return false;\n  }\n}\n\nexport function generateOrderConfirmationEmail(order: any, user: any): string {\n  const formatDate = (date: string | Date) => {\n    return new Date(date).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  const getDurationDays = (startDate: string | Date, endDate: string | Date) => {\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    const diffTime = Math.abs(end.getTime() - start.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return diffDays;\n  };\n\n  const itemsTotal = order.orderItems.reduce((sum: number, item: any) => {\n    return sum + Number(item.totalAmount);\n  }, 0);\n\n  return `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset=\"utf-8\">\n      <title>Order Confirmation - RentFlow</title>\n      <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; }\n        .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n        .header { background: #2563eb; color: white; padding: 20px; text-align: center; }\n        .logo { font-size: 24px; font-weight: bold; }\n        .content { padding: 30px 20px; }\n        .order-details { background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0; }\n        .item { padding: 10px 0; border-bottom: 1px solid #e5e7eb; }\n        .item:last-child { border-bottom: none; }\n        .total { font-size: 18px; font-weight: bold; color: #2563eb; text-align: right; margin-top: 20px; }\n        .footer { text-align: center; padding: 20px; color: #6b7280; font-size: 14px; }\n        .btn { display: inline-block; background: #2563eb; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 20px 0; }\n        .success-badge { background: #10b981; color: white; padding: 8px 16px; border-radius: 20px; font-size: 14px; display: inline-block; }\n      </style>\n    </head>\n    <body>\n      <div class=\"container\">\n        <div class=\"header\">\n          <div class=\"logo\">🛠️ RentFlow</div>\n          <h1>Payment Confirmation & Rental Ticket</h1>\n        </div>\n        \n        <div class=\"content\">\n          <div style=\"text-align: center; margin-bottom: 30px;\">\n            <div class=\"success-badge\">✅ Payment Successful</div>\n            <h2>Thank you for your payment, ${user.name}!</h2>\n            <p>Your rental order has been confirmed and is ready for pickup.</p>\n          </div>\n\n          <div class=\"order-details\">\n            <h3>📋 Order Details</h3>\n            <table style=\"width: 100%; border-collapse: collapse;\">\n              <tr>\n                <td><strong>Order Number:</strong></td>\n                <td style=\"text-align: right;\">${order.orderNumber}</td>\n              </tr>\n              <tr>\n                <td><strong>Order Date:</strong></td>\n                <td style=\"text-align: right;\">${formatDate(order.createdAt)}</td>\n              </tr>\n              <tr>\n                <td><strong>Rental Period:</strong></td>\n                <td style=\"text-align: right;\">\n                  ${formatDate(order.startDate)} - ${formatDate(order.endDate)}\n                  <br><small>(${getDurationDays(order.startDate, order.endDate)} days)</small>\n                </td>\n              </tr>\n              <tr>\n                <td><strong>Status:</strong></td>\n                <td style=\"text-align: right;\"><span style=\"background: #10b981; color: white; padding: 4px 8px; border-radius: 4px; font-size: 12px;\">PAID</span></td>\n              </tr>\n            </table>\n          </div>\n\n          <div class=\"order-details\">\n            <h3>📦 Rental Items</h3>\n            ${order.orderItems.map((item: any) => `\n              <div class=\"item\">\n                <div style=\"display: flex; justify-content: space-between; align-items: center;\">\n                  <div>\n                    <strong>${item.product.name}</strong>\n                    <br>\n                    <small style=\"color: #6b7280;\">Quantity: ${item.quantity} × ₹${Number(item.unitRate).toLocaleString()}</small>\n                  </div>\n                  <div style=\"font-weight: bold;\">\n                    ₹${Number(item.totalAmount).toLocaleString()}\n                  </div>\n                </div>\n              </div>\n            `).join('')}\n            \n            ${order.securityDeposit && Number(order.securityDeposit) > 0 ? `\n              <div class=\"item\">\n                <div style=\"display: flex; justify-content: space-between; align-items: center;\">\n                  <div>\n                    <strong>Security Deposit</strong>\n                    <br>\n                    <small style=\"color: #6b7280;\">(Refundable upon return)</small>\n                  </div>\n                  <div style=\"font-weight: bold;\">\n                    ₹${Number(order.securityDeposit).toLocaleString()}\n                  </div>\n                </div>\n              </div>\n            ` : ''}\n            \n            <div class=\"total\">\n              Total Amount Paid: ₹${Number(order.totalAmount).toLocaleString()}\n            </div>\n          </div>\n\n          ${order.pickupAddress || order.returnAddress ? `\n            <div class=\"order-details\">\n              <h3>📍 Pickup & Return Information</h3>\n              ${order.pickupAddress ? `\n                <div style=\"margin-bottom: 15px;\">\n                  <strong>Pickup Address:</strong><br>\n                  <span style=\"color: #6b7280;\">${order.pickupAddress}</span>\n                </div>\n              ` : ''}\n              ${order.returnAddress ? `\n                <div>\n                  <strong>Return Address:</strong><br>\n                  <span style=\"color: #6b7280;\">${order.returnAddress}</span>\n                </div>\n              ` : ''}\n            </div>\n          ` : ''}\n\n          <div class=\"order-details\">\n            <h3>⚠️ Important Information</h3>\n            <ul style=\"margin: 10px 0; padding-left: 20px;\">\n              <li><strong>Pickup:</strong> Please bring this email confirmation and a valid ID</li>\n              <li><strong>Return:</strong> Items must be returned by ${formatDate(order.endDate)} to avoid late fees</li>\n              <li><strong>Condition:</strong> Please return items in the same condition as received</li>\n              <li><strong>Support:</strong> Contact us for any questions or to extend rental period</li>\n            </ul>\n          </div>\n\n          <div style=\"text-align: center;\">\n            <a href=\"${process.env.REPLIT_DOMAINS ? `https://${process.env.REPLIT_DOMAINS.split(',')[0]}/orders` : '#'}\" class=\"btn\">\n              View Order Status\n            </a>\n          </div>\n        </div>\n\n        <div class=\"footer\">\n          <p><strong>RentFlow - Professional Equipment Rental</strong></p>\n          <p>This is your official rental ticket and payment receipt.</p>\n          <p>Keep this email for your records and present it during pickup.</p>\n          <p>Need help? Contact us at support@rentflow.com or call us at +91-XXXX-XXXX</p>\n        </div>\n      </div>\n    </body>\n    </html>\n  `;\n}\n\nexport function generatePaymentReceiptEmail(order: any, user: any, paymentDetails: any): string {\n  const formatDate = (date: string | Date) => {\n    return new Date(date).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  return `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset=\"utf-8\">\n      <title>Payment Receipt - RentFlow</title>\n      <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; }\n        .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n        .header { background: #059669; color: white; padding: 20px; text-align: center; }\n        .logo { font-size: 24px; font-weight: bold; }\n        .content { padding: 30px 20px; }\n        .receipt-details { background: #f0fdf4; padding: 20px; border: 2px solid #10b981; border-radius: 8px; margin: 20px 0; }\n        .row { display: flex; justify-content: space-between; padding: 8px 0; border-bottom: 1px solid #d1fae5; }\n        .row:last-child { border-bottom: none; font-weight: bold; font-size: 18px; }\n        .footer { text-align: center; padding: 20px; color: #6b7280; font-size: 14px; }\n      </style>\n    </head>\n    <body>\n      <div class=\"container\">\n        <div class=\"header\">\n          <div class=\"logo\">💳 RentFlow</div>\n          <h1>Payment Receipt</h1>\n        </div>\n        \n        <div class=\"content\">\n          <div style=\"text-align: center; margin-bottom: 30px;\">\n            <h2>Payment Successful</h2>\n            <p>Your payment has been processed successfully.</p>\n          </div>\n\n          <div class=\"receipt-details\">\n            <h3>💳 Payment Details</h3>\n            <div class=\"row\">\n              <span>Transaction ID:</span>\n              <span>${paymentDetails.id || 'N/A'}</span>\n            </div>\n            <div class=\"row\">\n              <span>Payment Date:</span>\n              <span>${formatDate(new Date())}</span>\n            </div>\n            <div class=\"row\">\n              <span>Payment Method:</span>\n              <span>Credit/Debit Card</span>\n            </div>\n            <div class=\"row\">\n              <span>Order Number:</span>\n              <span>${order.orderNumber}</span>\n            </div>\n            <div class=\"row\">\n              <span>Amount Paid:</span>\n              <span>₹${Number(order.totalAmount).toLocaleString()}</span>\n            </div>\n          </div>\n\n          <div style=\"text-align: center; padding: 20px; background: #f8fafc; border-radius: 8px;\">\n            <p><strong>Receipt Number: REC-${Date.now()}</strong></p>\n            <p>This serves as your official payment receipt.</p>\n          </div>\n        </div>\n\n        <div class=\"footer\">\n          <p><strong>RentFlow - Professional Equipment Rental</strong></p>\n          <p>Thank you for choosing RentFlow for your equipment rental needs.</p>\n          <p>This is an automated receipt. Please save it for your records.</p>\n        </div>\n      </div>\n    </body>\n    </html>\n  `;\n}","size_bytes":11062},"client/src/pages/enhanced-billing.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport CustomerLayout from \"@/components/layout/customer-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Download, \n  Eye, \n  Calendar, \n  CreditCard, \n  Receipt, \n  FileText, \n  TrendingUp, \n  Clock, \n  CheckCircle2, \n  AlertCircle,\n  Search,\n  Filter,\n  BarChart3,\n  DollarSign\n} from \"lucide-react\";\n\nexport default function EnhancedBilling() {\n  const [selectedPeriod, setSelectedPeriod] = useState(\"all\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  \n  const { data: orders, isLoading } = useQuery({\n    queryKey: [\"/api/orders\"],\n  });\n\n  const { data: invoices } = useQuery({\n    queryKey: [\"/api/invoices\"],\n  });\n\n  // Calculate comprehensive statistics\n  const stats = {\n    totalRentals: orders?.length || 0,\n    totalSpent: orders?.reduce((sum: number, order: any) => sum + parseFloat(order.totalAmount || 0), 0) || 0,\n    activeRentals: orders?.filter((order: any) => order.status === 'confirmed').length || 0,\n    completedRentals: orders?.filter((order: any) => order.status === 'completed').length || 0,\n    totalDays: orders?.reduce((sum: number, order: any) => {\n      if (order.startDate && order.endDate) {\n        const start = new Date(order.startDate);\n        const end = new Date(order.endDate);\n        return sum + Math.ceil((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));\n      }\n      return sum;\n    }, 0) || 0\n  };\n\n  const formatCurrency = (amount: string | number) => {\n    return `₹${parseFloat(amount.toString()).toLocaleString()}`;\n  };\n\n  const formatDateRange = (startDate: string, endDate: string) => {\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    const days = Math.ceil((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));\n    \n    return {\n      dateRange: `${start.toLocaleDateString()} - ${end.toLocaleDateString()}`,\n      duration: `${days} day${days > 1 ? 's' : ''}`\n    };\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status?.toLowerCase()) {\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'confirmed':\n      case 'paid':\n        return 'bg-green-100 text-green-800 border-green-200';\n      case 'cancelled':\n        return 'bg-red-100 text-red-800 border-red-200';\n      case 'completed':\n        return 'bg-blue-100 text-blue-800 border-blue-200';\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status?.toLowerCase()) {\n      case 'pending':\n        return <Clock className=\"h-4 w-4\" />;\n      case 'confirmed':\n      case 'paid':\n        return <CheckCircle2 className=\"h-4 w-4\" />;\n      case 'cancelled':\n        return <AlertCircle className=\"h-4 w-4\" />;\n      case 'completed':\n        return <CheckCircle2 className=\"h-4 w-4\" />;\n      default:\n        return <Clock className=\"h-4 w-4\" />;\n    }\n  };\n\n  const filteredOrders = orders?.filter((order: any) => {\n    const matchesSearch = !searchTerm || \n      order.orderNumber?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      order.items?.some((item: any) => item.productName?.toLowerCase().includes(searchTerm.toLowerCase()));\n    \n    const matchesPeriod = selectedPeriod === \"all\" || order.status === selectedPeriod;\n    \n    return matchesSearch && matchesPeriod;\n  }) || [];\n\n  return (\n    <CustomerLayout>\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Billing Dashboard</h1>\n          <p className=\"text-gray-600\">\n            Complete overview of your rental history from first day to last date\n          </p>\n        </div>\n\n        {/* Statistics Overview */}\n        <div className=\"grid md:grid-cols-5 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Receipt className=\"h-8 w-8 text-blue-500\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Total Rentals</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{stats.totalRentals}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <DollarSign className=\"h-8 w-8 text-green-500\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Total Spent</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{formatCurrency(stats.totalSpent)}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Clock className=\"h-8 w-8 text-orange-500\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Active Rentals</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{stats.activeRentals}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <CheckCircle2 className=\"h-8 w-8 text-green-500\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Completed</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{stats.completedRentals}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Calendar className=\"h-8 w-8 text-purple-500\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Total Days</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{stats.totalDays}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters and Search */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col md:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                  <Input\n                    placeholder=\"Search by order number or product...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n              <Select value={selectedPeriod} onValueChange={setSelectedPeriod}>\n                <SelectTrigger className=\"w-full md:w-48\">\n                  <Filter className=\"h-4 w-4 mr-2\" />\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Orders</SelectItem>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"confirmed\">Active</SelectItem>\n                  <SelectItem value=\"completed\">Completed</SelectItem>\n                  <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                </SelectContent>\n              </Select>\n              <Button variant=\"outline\" className=\"w-full md:w-auto\">\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export Report\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Main Content */}\n        <Tabs defaultValue=\"orders\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"orders\">Rental History</TabsTrigger>\n            <TabsTrigger value=\"invoices\">Invoices & Receipts</TabsTrigger>\n            <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n          </TabsList>\n\n          {/* Rental History Tab */}\n          <TabsContent value=\"orders\" className=\"space-y-6\">\n            {isLoading ? (\n              <div className=\"space-y-4\">\n                {[...Array(5)].map((_, i) => (\n                  <Card key={i} className=\"animate-pulse\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"h-6 bg-gray-200 rounded mb-4\"></div>\n                      <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                      <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : filteredOrders.length === 0 ? (\n              <Card>\n                <CardContent className=\"p-12 text-center\">\n                  <Receipt className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No rentals found</h3>\n                  <p className=\"text-gray-600 mb-6\">\n                    {searchTerm ? \"Try adjusting your search criteria\" : \"Start renting equipment to see your history\"}\n                  </p>\n                  <Button onClick={() => window.location.href = '/'}>\n                    Browse Equipment\n                  </Button>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"space-y-4\">\n                {filteredOrders.map((order: any) => (\n                  <Card key={order.id} className=\"hover:shadow-md transition-shadow\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start justify-between mb-4\">\n                        <div>\n                          <div className=\"flex items-center gap-3 mb-2\">\n                            <h3 className=\"text-lg font-semibold\">Order #{order.orderNumber}</h3>\n                            <Badge className={`flex items-center gap-1 ${getStatusColor(order.status)}`}>\n                              {getStatusIcon(order.status)}\n                              {order.status?.toUpperCase() || 'PENDING'}\n                            </Badge>\n                          </div>\n                          <p className=\"text-sm text-gray-600 mb-2\">\n                            Placed on {new Date(order.createdAt).toLocaleDateString()}\n                          </p>\n                          {order.startDate && order.endDate && (\n                            <div className=\"text-sm text-gray-600\">\n                              <div className=\"flex items-center gap-2\">\n                                <Calendar className=\"h-4 w-4\" />\n                                <span>\n                                  {formatDateRange(order.startDate, order.endDate).dateRange}\n                                </span>\n                                <Badge variant=\"secondary\" className=\"text-xs\">\n                                  {formatDateRange(order.startDate, order.endDate).duration}\n                                </Badge>\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"text-2xl font-bold text-green-600\">\n                            {formatCurrency(order.totalAmount)}\n                          </p>\n                          <div className=\"flex gap-2 mt-2\">\n                            <Button variant=\"outline\" size=\"sm\">\n                              <Eye className=\"h-4 w-4 mr-1\" />\n                              View Details\n                            </Button>\n                            <Button variant=\"outline\" size=\"sm\">\n                              <Download className=\"h-4 w-4 mr-1\" />\n                              Receipt\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n\n                      <Separator className=\"mb-4\" />\n\n                      {/* Order Items */}\n                      <div className=\"space-y-3\">\n                        <h4 className=\"font-medium text-gray-900\">Rented Items:</h4>\n                        {order.items?.map((item: any, index: number) => (\n                          <div key={index} className=\"flex items-center justify-between bg-gray-50 p-3 rounded-lg\">\n                            <div className=\"flex items-center gap-3\">\n                              <div className=\"w-12 h-12 bg-gray-200 rounded-lg flex items-center justify-center\">\n                                <span className=\"text-xl\">🔧</span>\n                              </div>\n                              <div>\n                                <p className=\"font-medium\">{item.productName || 'Equipment'}</p>\n                                <p className=\"text-sm text-gray-600\">Quantity: {item.quantity}</p>\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              <p className=\"font-semibold\">{formatCurrency(item.totalAmount)}</p>\n                              <p className=\"text-sm text-gray-600\">\n                                {formatCurrency(item.unitRate)}/day\n                              </p>\n                            </div>\n                          </div>\n                        )) || (\n                          <div className=\"bg-gray-50 p-3 rounded-lg\">\n                            <p className=\"text-gray-600\">Order details loading...</p>\n                          </div>\n                        )}\n                      </div>\n\n                      {/* Additional Information */}\n                      {order.customerDetails && (\n                        <div className=\"mt-4 p-3 bg-blue-50 rounded-lg\">\n                          <p className=\"text-sm font-medium text-blue-900 mb-1\">Delivery Address:</p>\n                          <p className=\"text-sm text-blue-800\">\n                            {order.customerDetails.address}, {order.customerDetails.city}\n                          </p>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </TabsContent>\n\n          {/* Invoices Tab */}\n          <TabsContent value=\"invoices\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <FileText className=\"h-5 w-5\" />\n                  Invoices & Receipts\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {invoices && invoices.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {invoices.map((invoice: any) => (\n                      <div key={invoice.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                        <div>\n                          <p className=\"font-medium\">Invoice #{invoice.invoiceNumber}</p>\n                          <p className=\"text-sm text-gray-600\">{new Date(invoice.createdAt).toLocaleDateString()}</p>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <Badge className={getStatusColor(invoice.status)}>\n                            {invoice.status}\n                          </Badge>\n                          <p className=\"font-semibold\">{formatCurrency(invoice.amount)}</p>\n                          <Button variant=\"outline\" size=\"sm\">\n                            <Download className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <FileText className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n                    <p className=\"text-gray-600\">No invoices available</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Analytics Tab */}\n          <TabsContent value=\"analytics\" className=\"space-y-6\">\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <BarChart3 className=\"h-5 w-5\" />\n                    Spending Overview\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between\">\n                      <span>Average Order Value</span>\n                      <span className=\"font-semibold\">\n                        {formatCurrency(stats.totalSpent / Math.max(stats.totalRentals, 1))}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Average Rental Duration</span>\n                      <span className=\"font-semibold\">\n                        {Math.round(stats.totalDays / Math.max(stats.totalRentals, 1))} days\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Most Active Month</span>\n                      <span className=\"font-semibold\">Current</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <TrendingUp className=\"h-5 w-5\" />\n                    Rental Patterns\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between\">\n                      <span>Success Rate</span>\n                      <span className=\"font-semibold text-green-600\">\n                        {stats.totalRentals > 0 \n                          ? Math.round(((stats.completedRentals + stats.activeRentals) / stats.totalRentals) * 100)\n                          : 0}%\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Repeat Customer</span>\n                      <span className=\"font-semibold\">\n                        {stats.totalRentals > 1 ? \"Yes\" : \"New\"}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Preferred Duration</span>\n                      <span className=\"font-semibold\">\n                        {stats.totalDays / Math.max(stats.totalRentals, 1) > 7 ? \"Weekly\" : \"Daily\"}\n                      </span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </CustomerLayout>\n  );\n}","size_bytes":19905},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Zap, \n  Clock, \n  Shield, \n  Star, \n  ArrowRight, \n  Search, \n  CheckCircle,\n  Users,\n  Calendar,\n  CreditCard\n} from \"lucide-react\";\nimport QuickRentWidget from \"@/components/ui/quick-rent-widget\";\nimport LiveAvailability from \"@/components/ui/live-availability\";\nimport type { ProductWithCategory } from \"@shared/schema\";\n\nexport default function Home() {\n  const { user, isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { data: products, isLoading } = useQuery({\n    queryKey: [\"/api/products\"],\n  });\n\n  const { data: categories } = useQuery({\n    queryKey: [\"/api/categories\"],\n  });\n\n  // Get featured/popular products\n  const featuredProducts = products?.slice(0, 6) || [];\n  \n  const filteredProducts = products?.filter((product: ProductWithCategory) => \n    !searchTerm || \n    product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    product.description?.toLowerCase().includes(searchTerm.toLowerCase())\n  ).slice(0, 8) || [];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-white\">\n      {/* Hero Section */}\n      <section className=\"relative overflow-hidden bg-gradient-to-r from-blue-600 via-blue-700 to-blue-800\">\n        <div className=\"absolute inset-0 bg-black/10\"></div>\n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20\">\n          <div className=\"text-center\">\n            <h1 className=\"text-5xl font-bold text-white mb-6\">\n              Rent Equipment\n              <span className=\"block text-blue-200\">The Smart Way</span>\n            </h1>\n            <p className=\"text-xl text-blue-100 mb-8 max-w-3xl mx-auto\">\n              Browse thousands of items, book instantly with real-time availability, \n              collect your rental details seamlessly, and pay securely. Everything tracked in your personal billing dashboard.\n            </p>\n            \n            {/* Key Features */}\n            <div className=\"flex flex-wrap justify-center gap-4 mb-10\">\n              <Badge className=\"bg-white/20 text-white border-white/30 px-4 py-2\">\n                <Zap className=\"h-4 w-4 mr-2\" />\n                Instant Booking\n              </Badge>\n              <Badge className=\"bg-white/20 text-white border-white/30 px-4 py-2\">\n                <Clock className=\"h-4 w-4 mr-2\" />\n                Real-time Updates\n              </Badge>\n              <Badge className=\"bg-white/20 text-white border-white/30 px-4 py-2\">\n                <Shield className=\"h-4 w-4 mr-2\" />\n                Secure Payments\n              </Badge>\n              <Badge className=\"bg-white/20 text-white border-white/30 px-4 py-2\">\n                <Star className=\"h-4 w-4 mr-2\" />\n                Complete Tracking\n              </Badge>\n            </div>\n\n            {/* Search Bar */}\n            <div className=\"max-w-2xl mx-auto mb-8\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                <Input\n                  placeholder=\"Search for equipment to rent...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-12 pr-4 py-4 text-lg bg-white/95 border-white/20 focus:bg-white rounded-full shadow-lg\"\n                />\n                {searchTerm && (\n                  <Button \n                    onClick={() => setLocation('/catalog')}\n                    className=\"absolute right-2 top-2 rounded-full\"\n                    size=\"sm\"\n                  >\n                    <ArrowRight className=\"h-4 w-4\" />\n                  </Button>\n                )}\n              </div>\n            </div>\n\n            {/* CTA Buttons */}\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button \n                size=\"lg\" \n                onClick={() => setLocation('/catalog')}\n                className=\"bg-white text-blue-600 hover:bg-blue-50 px-8 py-4 text-lg font-semibold rounded-full shadow-lg\"\n              >\n                Browse Equipment\n                <ArrowRight className=\"ml-2 h-5 w-5\" />\n              </Button>\n              {isAuthenticated ? (\n                <Button \n                  size=\"lg\" \n                  variant=\"outline\"\n                  onClick={() => setLocation('/customer/billing')}\n                  className=\"border-white text-white hover:bg-white hover:text-blue-600 px-8 py-4 text-lg font-semibold rounded-full\"\n                >\n                  View My Rentals\n                </Button>\n              ) : (\n                <Button \n                  size=\"lg\" \n                  variant=\"outline\"\n                  onClick={() => window.location.href = '/api/login'}\n                  className=\"border-white text-white hover:bg-white hover:text-blue-600 px-8 py-4 text-lg font-semibold rounded-full\"\n                >\n                  Sign In to Rent\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* How It Works Section */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">How It Works</h2>\n            <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n              Rent equipment in 4 simple steps - from browsing to billing, everything is seamless\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"bg-blue-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Search className=\"h-8 w-8 text-blue-600\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">1. Browse & Search</h3>\n              <p className=\"text-gray-600\">Search thousands of items with real-time availability and instant pricing</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"bg-green-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Calendar className=\"h-8 w-8 text-green-600\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">2. Select Dates</h3>\n              <p className=\"text-gray-600\">Pick your rental dates and get instant pricing with our Quick Rent feature</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"bg-purple-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Users className=\"h-8 w-8 text-purple-600\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">3. Fill Details</h3>\n              <p className=\"text-gray-600\">Complete your information with our user-friendly form - all details collected securely</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"bg-orange-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <CreditCard className=\"h-8 w-8 text-orange-600\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">4. Pay & Track</h3>\n              <p className=\"text-gray-600\">Secure payment with Stripe, then track everything in your billing dashboard</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Products */}\n      <section className=\"py-20 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">\n              {searchTerm ? `Search Results for \"${searchTerm}\"` : \"Popular Equipment\"}\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n              {searchTerm \n                ? `Found ${filteredProducts.length} items matching your search`\n                : \"Most rented equipment with instant availability\"\n              }\n            </p>\n          </div>\n\n          {isLoading ? (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {[...Array(6)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <div className=\"h-48 bg-gray-200 rounded-t-lg\"></div>\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded mb-4\"></div>\n                    <div className=\"h-8 bg-gray-200 rounded\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {filteredProducts.map((product: ProductWithCategory) => (\n                <Card key={product.id} className=\"group hover:shadow-xl transition-all duration-300 relative overflow-hidden\">\n                  <div className=\"relative\">\n                    <div className=\"h-48 bg-gradient-to-br from-blue-100 to-blue-200 flex items-center justify-center\">\n                      {product.imageUrl ? (\n                        <img \n                          src={product.imageUrl} \n                          alt={product.name}\n                          className=\"w-full h-full object-cover\"\n                        />\n                      ) : (\n                        <div className=\"text-4xl\">🔧</div>\n                      )}\n                    </div>\n                    \n                    {/* Live Availability */}\n                    <div className=\"absolute top-3 left-3\">\n                      <LiveAvailability productId={product.id} />\n                    </div>\n                  </div>\n                  \n                  <CardContent className=\"p-6\">\n                    <h3 className=\"text-xl font-semibold mb-2\">{product.name}</h3>\n                    <p className=\"text-gray-600 mb-4\">{product.description}</p>\n                    \n                    <div className=\"flex justify-between items-center mb-4\">\n                      <div>\n                        <span className=\"text-2xl font-bold text-green-600\">\n                          ₹{product.dailyRate || 0}\n                        </span>\n                        <span className=\"text-gray-500\">/day</span>\n                      </div>\n                      <Badge variant=\"secondary\">\n                        {product.availableQuantity || 0} available\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"space-y-3\">\n                      <Button \n                        onClick={() => setLocation(`/catalog/${product.id}`)}\n                        className=\"w-full\"\n                        variant=\"outline\"\n                      >\n                        View Details\n                      </Button>\n                      \n                      {/* Quick Rent for authenticated users */}\n                      {isAuthenticated && (\n                        <div className=\"border-t pt-3\">\n                          <QuickRentWidget product={product} />\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n\n          {searchTerm && filteredProducts.length === 0 && (\n            <div className=\"text-center py-12\">\n              <div className=\"text-6xl mb-4\">🔍</div>\n              <h3 className=\"text-2xl font-semibold text-gray-900 mb-2\">No results found</h3>\n              <p className=\"text-gray-600 mb-6\">Try different search terms or browse our catalog</p>\n              <Button onClick={() => setLocation('/catalog')}>\n                Browse All Equipment\n              </Button>\n            </div>\n          )}\n\n          {/* View All Button */}\n          {!searchTerm && (\n            <div className=\"text-center mt-12\">\n              <Button \n                size=\"lg\" \n                onClick={() => setLocation('/catalog')}\n                className=\"px-8 py-4 text-lg\"\n              >\n                View All Equipment\n                <ArrowRight className=\"ml-2 h-5 w-5\" />\n              </Button>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Benefits Section */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">Why Choose RentFlow?</h2>\n            <p className=\"text-xl text-gray-600\">\n              The most user-friendly rental platform with complete transparency\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <Card className=\"p-6 text-center\">\n              <CheckCircle className=\"h-12 w-12 text-green-500 mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold mb-2\">Instant Booking</h3>\n              <p className=\"text-gray-600\">\n                Book equipment instantly with our Quick Rent feature. See real-time availability and pricing.\n              </p>\n            </Card>\n\n            <Card className=\"p-6 text-center\">\n              <Shield className=\"h-12 w-12 text-blue-500 mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold mb-2\">Secure & Safe</h3>\n              <p className=\"text-gray-600\">\n                All payments secured with Stripe. Complete rental tracking from first day to last date.\n              </p>\n            </Card>\n\n            <Card className=\"p-6 text-center\">\n              <Users className=\"h-12 w-12 text-purple-500 mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold mb-2\">Complete Support</h3>\n              <p className=\"text-gray-600\">\n                User-friendly forms, email confirmations, and complete billing dashboard for all your rentals.\n              </p>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-gradient-to-r from-blue-600 to-blue-800\">\n        <div className=\"max-w-4xl mx-auto text-center px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-4xl font-bold text-white mb-4\">Ready to Rent?</h2>\n          <p className=\"text-xl text-blue-100 mb-8\">\n            Join thousands of satisfied customers who rent equipment the smart way\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button \n              size=\"lg\" \n              onClick={() => setLocation('/catalog')}\n              className=\"bg-white text-blue-600 hover:bg-blue-50 px-8 py-4 text-lg font-semibold rounded-full\"\n            >\n              Start Renting Now\n              <ArrowRight className=\"ml-2 h-5 w-5\" />\n            </Button>\n            \n            {!isAuthenticated && (\n              <Button \n                size=\"lg\" \n                variant=\"outline\"\n                onClick={() => window.location.href = '/api/login'}\n                className=\"border-white text-white hover:bg-white hover:text-blue-600 px-8 py-4 text-lg font-semibold rounded-full\"\n              >\n                Create Account\n              </Button>\n            )}\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":16050},"client/src/pages/order-success.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useParams } from \"wouter\";\nimport CustomerLayout from \"@/components/layout/customer-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CheckCircle, Download, Mail, Calendar } from \"lucide-react\";\n\nexport default function OrderSuccess() {\n  const { orderId } = useParams<{ orderId: string }>();\n\n  const { data: order, isLoading } = useQuery({\n    queryKey: [\"/api/orders\", orderId],\n    enabled: !!orderId,\n  });\n\n  const formatDate = (date: string | Date) => {\n    return new Date(date).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  const getDurationDays = (startDate: string | Date, endDate: string | Date) => {\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    const diffTime = Math.abs(end.getTime() - start.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return diffDays;\n  };\n\n  if (isLoading) {\n    return (\n      <CustomerLayout>\n        <div className=\"flex justify-center py-12\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n        </div>\n      </CustomerLayout>\n    );\n  }\n\n  if (!order) {\n    return (\n      <CustomerLayout>\n        <Card>\n          <CardContent className=\"py-12 text-center\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Order not found</h3>\n            <p className=\"text-gray-600 mb-6\">The order you're looking for doesn't exist.</p>\n            <Button onClick={() => window.location.href = \"/orders\"}>\n              Back to Orders\n            </Button>\n          </CardContent>\n        </Card>\n      </CustomerLayout>\n    );\n  }\n\n  return (\n    <CustomerLayout>\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        {/* Success Header */}\n        <Card className=\"bg-green-50 border-green-200\">\n          <CardContent className=\"py-8 text-center\">\n            <CheckCircle className=\"h-16 w-16 text-green-500 mx-auto mb-4\" />\n            <h1 className=\"text-2xl font-bold text-green-900 mb-2\">\n              Payment Successful!\n            </h1>\n            <p className=\"text-green-700 text-lg\">\n              Your rental order has been confirmed and is ready for pickup.\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Order Details */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Order Confirmation - {order.orderNumber}</span>\n              <Badge variant=\"default\" className=\"bg-green-600\">\n                PAID & CONFIRMED\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-4\">\n                <div>\n                  <h4 className=\"font-medium text-gray-900 mb-2\">Rental Period</h4>\n                  <div className=\"flex items-center text-gray-600\">\n                    <Calendar className=\"h-4 w-4 mr-2\" />\n                    <span>\n                      {formatDate(order.startDate)} - {formatDate(order.endDate)}\n                      <span className=\"text-sm ml-2\">({getDurationDays(order.startDate, order.endDate)} days)</span>\n                    </span>\n                  </div>\n                </div>\n\n                <div>\n                  <h4 className=\"font-medium text-gray-900 mb-2\">Total Amount Paid</h4>\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    ₹{Number(order.totalAmount).toLocaleString()}\n                  </div>\n                </div>\n\n                <div>\n                  <h4 className=\"font-medium text-gray-900 mb-2\">Payment Status</h4>\n                  <Badge variant=\"default\" className=\"bg-green-600\">\n                    Payment Completed\n                  </Badge>\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div>\n                  <h4 className=\"font-medium text-gray-900 mb-2\">Next Steps</h4>\n                  <ul className=\"space-y-2 text-sm text-gray-600\">\n                    <li className=\"flex items-start\">\n                      <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                      <span>Check your email for rental ticket and receipt</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                      <span>Bring your ID and this confirmation for pickup</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                      <span>Return equipment by the due date to avoid late fees</span>\n                    </li>\n                  </ul>\n                </div>\n\n                <div className=\"bg-blue-50 p-4 rounded-lg\">\n                  <div className=\"flex items-center text-blue-800 mb-2\">\n                    <Mail className=\"h-4 w-4 mr-2\" />\n                    <span className=\"font-medium\">Email Confirmation Sent</span>\n                  </div>\n                  <p className=\"text-sm text-blue-700\">\n                    Your rental ticket and payment receipt have been sent to your email address.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Rental Items */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Rental Items</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {order.orderItems.map((item: any) => (\n                <div key={item.id} className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                  <div className=\"flex items-center\">\n                    <div className=\"w-12 h-12 bg-gray-200 rounded-lg mr-4 flex items-center justify-center\">\n                      <i className=\"fas fa-box text-gray-400\"></i>\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium text-gray-900\">{item.product.name}</h4>\n                      <p className=\"text-sm text-gray-600\">\n                        Quantity: {item.quantity} × ₹{Number(item.unitRate).toLocaleString()}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"font-bold text-gray-900\">\n                    ₹{Number(item.totalAmount).toLocaleString()}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Action Buttons */}\n        <div className=\"flex flex-col sm:flex-row gap-4\">\n          <Button \n            onClick={() => window.location.href = \"/orders\"}\n            size=\"lg\"\n            className=\"flex-1\"\n          >\n            View All Orders\n          </Button>\n          <Button \n            onClick={() => window.location.href = \"/catalog\"}\n            variant=\"outline\"\n            size=\"lg\"\n            className=\"flex-1\"\n          >\n            Continue Shopping\n          </Button>\n          <Button \n            onClick={() => window.print()}\n            variant=\"outline\"\n            size=\"lg\"\n            className=\"flex-1\"\n          >\n            <Download className=\"h-4 w-4 mr-2\" />\n            Print Receipt\n          </Button>\n        </div>\n\n        {/* Important Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Important Information</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <h4 className=\"font-medium text-gray-900 mb-2\">Pickup Information</h4>\n                <ul className=\"text-sm text-gray-600 space-y-1\">\n                  <li>• Bring a valid government ID</li>\n                  <li>• Present this order confirmation</li>\n                  <li>• Check equipment condition before leaving</li>\n                </ul>\n              </div>\n              <div>\n                <h4 className=\"font-medium text-gray-900 mb-2\">Return Policy</h4>\n                <ul className=\"text-sm text-gray-600 space-y-1\">\n                  <li>• Return by the due date to avoid late fees</li>\n                  <li>• Equipment must be in original condition</li>\n                  <li>• Security deposit will be refunded upon return</li>\n                </ul>\n              </div>\n            </div>\n            \n            <div className=\"mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n              <div className=\"flex items-center\">\n                <i className=\"fas fa-exclamation-triangle text-yellow-600 mr-2\"></i>\n                <div>\n                  <h5 className=\"font-medium text-yellow-900\">Need Help?</h5>\n                  <p className=\"text-sm text-yellow-700\">\n                    Contact our support team at support@rentflow.com or call +91-XXXX-XXXX\n                  </p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </CustomerLayout>\n  );\n}","size_bytes":9550},"client/src/components/ui/enhanced-booking-form.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CalendarIcon, User, Phone, Mail, MapPin, CreditCard, Shield } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\n// Enhanced booking form schema with comprehensive user details\nconst bookingSchema = z.object({\n  // Personal Information\n  fullName: z.string().min(2, \"Full name must be at least 2 characters\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  phone: z.string().min(10, \"Phone number must be at least 10 digits\"),\n  alternatePhone: z.string().optional(),\n  \n  // Address Information\n  address: z.string().min(10, \"Please provide complete address\"),\n  city: z.string().min(2, \"City is required\"),\n  state: z.string().min(2, \"State is required\"),\n  zipCode: z.string().min(4, \"ZIP code is required\"),\n  \n  // Pickup and Return Addresses\n  pickupAddress: z.string().min(10, \"Pickup address is required\"),\n  returnAddress: z.string().optional(),\n  sameAddress: z.boolean().default(true),\n  \n  // Rental Details\n  startDate: z.date({ required_error: \"Start date is required\" }),\n  endDate: z.date({ required_error: \"End date is required\" }),\n  quantity: z.number().min(1, \"Quantity must be at least 1\"),\n  purpose: z.string().min(10, \"Please describe the rental purpose\"),\n  \n  // Additional Information\n  companyName: z.string().optional(),\n  emergencyContact: z.string().optional(),\n  specialRequirements: z.string().optional(),\n  \n  // Agreement\n  agreeToTerms: z.boolean().refine((val) => val === true, \"You must agree to terms and conditions\"),\n});\n\ntype BookingFormData = z.infer<typeof bookingSchema>;\n\ninterface EnhancedBookingFormProps {\n  product: any;\n  onComplete?: (orderId: string) => void;\n  className?: string;\n}\n\nexport default function EnhancedBookingForm({ product, onComplete, className = \"\" }: EnhancedBookingFormProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [step, setStep] = useState(1);\n  const totalSteps = 4;\n\n  const form = useForm<BookingFormData>({\n    resolver: zodResolver(bookingSchema),\n    defaultValues: {\n      fullName: user?.name || \"\",\n      email: user?.email || \"\",\n      startDate: product.selectedDates?.from || new Date(),\n      endDate: product.selectedDates?.to || new Date(Date.now() + 24 * 60 * 60 * 1000),\n      quantity: product.quantity || 1,\n      agreeToTerms: false,\n      sameAddress: true,\n      pickupAddress: \"\",\n      returnAddress: \"\",\n    },\n  });\n\n  const { watch } = form;\n  const startDate = watch(\"startDate\");\n  const endDate = watch(\"endDate\");\n  const quantity = watch(\"quantity\");\n\n  const calculateDays = () => {\n    if (!startDate || !endDate) return 0;\n    const diffTime = Math.abs(endDate.getTime() - startDate.getTime());\n    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  };\n\n  const calculateTotal = () => {\n    const days = calculateDays();\n    const rate = parseFloat(product.dailyRate || \"0\");\n    const rentalAmount = days * rate * quantity;\n    const deposit = parseFloat(product.securityDeposit || \"0\");\n    return {\n      rental: rentalAmount,\n      deposit: deposit,\n      total: rentalAmount + deposit,\n      days: days\n    };\n  };\n\n  const createOrderMutation = useMutation({\n    mutationFn: async (data: BookingFormData) => {\n      const pricing = calculateTotal();\n      \n      const orderData = {\n        startDate: data.startDate.toISOString(),\n        endDate: data.endDate.toISOString(),\n        totalAmount: pricing.total,\n        \n        // Customer details\n        customerDetails: {\n          fullName: data.fullName,\n          email: data.email,\n          phone: data.phone,\n          alternatePhone: data.alternatePhone,\n          address: data.address,\n          city: data.city,\n          state: data.state,\n          zipCode: data.zipCode,\n          companyName: data.companyName,\n          emergencyContact: data.emergencyContact,\n        },\n        \n        // Pickup and Return Addresses\n        pickupAddress: data.pickupAddress,\n        returnAddress: data.sameAddress ? data.pickupAddress : data.returnAddress,\n        \n        // Rental details\n        rentalPurpose: data.purpose,\n        specialRequirements: data.specialRequirements,\n        \n        items: [{\n          productId: product.id,\n          quantity: data.quantity,\n          unitRate: product.dailyRate || 0,\n          totalAmount: pricing.rental\n        }]\n      };\n\n      const response = await apiRequest(\"POST\", \"/api/orders\", orderData);\n      return response;\n    },\n    onSuccess: (order) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      toast({\n        title: \"Booking Created Successfully!\",\n        description: `Order ${order.orderNumber} has been created. Proceed to payment.`,\n      });\n      \n      if (onComplete) {\n        onComplete(order.id);\n      } else {\n        window.location.href = `/checkout/${order.id}`;\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Booking Failed\",\n        description: error.message || \"Failed to create booking. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: BookingFormData) => {\n    createOrderMutation.mutate(data);\n  };\n\n  const nextStep = async () => {\n    const fieldsToValidate: (keyof BookingFormData)[] = [];\n    \n    switch (step) {\n      case 1:\n        fieldsToValidate.push(\"fullName\", \"email\", \"phone\");\n        break;\n      case 2:\n        fieldsToValidate.push(\"address\", \"city\", \"state\", \"zipCode\");\n        break;\n      case 3:\n        fieldsToValidate.push(\"pickupAddress\");\n        if (!form.getValues(\"sameAddress\")) {\n          fieldsToValidate.push(\"returnAddress\");\n        }\n        fieldsToValidate.push(\"startDate\", \"endDate\", \"quantity\", \"purpose\");\n        break;\n      case 4:\n        fieldsToValidate.push(\"agreeToTerms\");\n        break;\n    }\n\n    const isValid = await form.trigger(fieldsToValidate);\n    if (isValid) {\n      setStep(step + 1);\n    }\n  };\n\n  const prevStep = () => {\n    setStep(step - 1);\n  };\n\n  const pricing = calculateTotal();\n\n  return (\n    <Card className={`max-w-2xl mx-auto ${className}`}>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <CreditCard className=\"h-5 w-5\" />\n          Complete Your Rental Booking\n        </CardTitle>\n        \n        {/* Progress Indicator */}\n        <div className=\"flex items-center gap-2\">\n          {[1, 2, 3, 4].map((s) => (\n            <div\n              key={s}\n              className={`flex-1 h-2 rounded-full ${\n                s <= step ? \"bg-blue-500\" : \"bg-gray-200\"\n              }`}\n            />\n          ))}\n        </div>\n        <p className=\"text-sm text-gray-600\">Step {step} of {totalSteps}</p>\n      </CardHeader>\n\n      <CardContent>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          \n          {/* Step 1: Personal Information */}\n          {step === 1 && (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-2 mb-4\">\n                <User className=\"h-5 w-5 text-blue-500\" />\n                <h3 className=\"text-lg font-semibold\">Personal Information</h3>\n              </div>\n\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"fullName\">Full Name *</Label>\n                  <Input\n                    id=\"fullName\"\n                    {...form.register(\"fullName\")}\n                    placeholder=\"Your complete name\"\n                  />\n                  {form.formState.errors.fullName && (\n                    <p className=\"text-red-500 text-sm mt-1\">\n                      {form.formState.errors.fullName.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"email\">Email Address *</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    {...form.register(\"email\")}\n                    placeholder=\"your.email@example.com\"\n                  />\n                  {form.formState.errors.email && (\n                    <p className=\"text-red-500 text-sm mt-1\">\n                      {form.formState.errors.email.message}\n                    </p>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"phone\">Phone Number *</Label>\n                  <Input\n                    id=\"phone\"\n                    {...form.register(\"phone\")}\n                    placeholder=\"+91 9876543210\"\n                  />\n                  {form.formState.errors.phone && (\n                    <p className=\"text-red-500 text-sm mt-1\">\n                      {form.formState.errors.phone.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"alternatePhone\">Alternate Phone</Label>\n                  <Input\n                    id=\"alternatePhone\"\n                    {...form.register(\"alternatePhone\")}\n                    placeholder=\"Backup contact number\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"companyName\">Company Name (Optional)</Label>\n                <Input\n                  id=\"companyName\"\n                  {...form.register(\"companyName\")}\n                  placeholder=\"Your company or organization\"\n                />\n              </div>\n            </div>\n          )}\n\n          {/* Step 2: Address Information */}\n          {step === 2 && (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-2 mb-4\">\n                <MapPin className=\"h-5 w-5 text-blue-500\" />\n                <h3 className=\"text-lg font-semibold\">Address Information</h3>\n              </div>\n\n              <div>\n                <Label htmlFor=\"address\">Complete Address *</Label>\n                <Textarea\n                  id=\"address\"\n                  {...form.register(\"address\")}\n                  placeholder=\"House/Flat No., Street, Area, Landmark\"\n                  rows={3}\n                />\n                {form.formState.errors.address && (\n                  <p className=\"text-red-500 text-sm mt-1\">\n                    {form.formState.errors.address.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"grid md:grid-cols-3 gap-4\">\n                <div>\n                  <Label htmlFor=\"city\">City *</Label>\n                  <Input\n                    id=\"city\"\n                    {...form.register(\"city\")}\n                    placeholder=\"Your city\"\n                  />\n                  {form.formState.errors.city && (\n                    <p className=\"text-red-500 text-sm mt-1\">\n                      {form.formState.errors.city.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"state\">State *</Label>\n                  <Input\n                    id=\"state\"\n                    {...form.register(\"state\")}\n                    placeholder=\"Your state\"\n                  />\n                  {form.formState.errors.state && (\n                    <p className=\"text-red-500 text-sm mt-1\">\n                      {form.formState.errors.state.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"zipCode\">ZIP Code *</Label>\n                  <Input\n                    id=\"zipCode\"\n                    {...form.register(\"zipCode\")}\n                    placeholder=\"PIN code\"\n                  />\n                  {form.formState.errors.zipCode && (\n                    <p className=\"text-red-500 text-sm mt-1\">\n                      {form.formState.errors.zipCode.message}\n                    </p>\n                  )}\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"emergencyContact\">Emergency Contact</Label>\n                <Input\n                  id=\"emergencyContact\"\n                  {...form.register(\"emergencyContact\")}\n                  placeholder=\"Name and phone of emergency contact\"\n                />\n              </div>\n            </div>\n          )}\n\n          {/* Step 3: Rental Details */}\n          {step === 3 && (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-2 mb-4\">\n                <CalendarIcon className=\"h-5 w-5 text-blue-500\" />\n                <h3 className=\"text-lg font-semibold\">Rental Details</h3>\n              </div>\n\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <Label>Start Date *</Label>\n                  <Popover>\n                    <PopoverTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        className={`w-full justify-start text-left font-normal ${\n                          !startDate && \"text-muted-foreground\"\n                        }`}\n                      >\n                        <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                        {startDate ? format(startDate, \"PPP\") : \"Select start date\"}\n                      </Button>\n                    </PopoverTrigger>\n                    <PopoverContent className=\"w-auto p-0\">\n                      <Calendar\n                        mode=\"single\"\n                        selected={startDate}\n                        onSelect={(date) => form.setValue(\"startDate\", date!)}\n                        disabled={(date) => date < new Date()}\n                        initialFocus\n                      />\n                    </PopoverContent>\n                  </Popover>\n                  {form.formState.errors.startDate && (\n                    <p className=\"text-red-500 text-sm mt-1\">\n                      {form.formState.errors.startDate.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label>End Date *</Label>\n                  <Popover>\n                    <PopoverTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        className={`w-full justify-start text-left font-normal ${\n                          !endDate && \"text-muted-foreground\"\n                        }`}\n                      >\n                        <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                        {endDate ? format(endDate, \"PPP\") : \"Select end date\"}\n                      </Button>\n                    </PopoverTrigger>\n                    <PopoverContent className=\"w-auto p-0\">\n                      <Calendar\n                        mode=\"single\"\n                        selected={endDate}\n                        onSelect={(date) => form.setValue(\"endDate\", date!)}\n                        disabled={(date) => date < (startDate || new Date())}\n                        initialFocus\n                      />\n                    </PopoverContent>\n                  </Popover>\n                  {form.formState.errors.endDate && (\n                    <p className=\"text-red-500 text-sm mt-1\">\n                      {form.formState.errors.endDate.message}\n                    </p>\n                  )}\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"quantity\">Quantity *</Label>\n                <Input\n                  id=\"quantity\"\n                  type=\"number\"\n                  min=\"1\"\n                  max={product.availableQuantity || 1}\n                  {...form.register(\"quantity\", { valueAsNumber: true })}\n                />\n                {form.formState.errors.quantity && (\n                  <p className=\"text-red-500 text-sm mt-1\">\n                    {form.formState.errors.quantity.message}\n                  </p>\n                )}\n              </div>\n\n              <div>\n                <Label htmlFor=\"purpose\">Rental Purpose *</Label>\n                <Textarea\n                  id=\"purpose\"\n                  {...form.register(\"purpose\")}\n                  placeholder=\"Describe how you'll use this equipment\"\n                  rows={3}\n                />\n                {form.formState.errors.purpose && (\n                  <p className=\"text-red-500 text-sm mt-1\">\n                    {form.formState.errors.purpose.message}\n                  </p>\n                )}\n              </div>\n\n              <div>\n                <Label htmlFor=\"specialRequirements\">Special Requirements</Label>\n                <Textarea\n                  id=\"specialRequirements\"\n                  {...form.register(\"specialRequirements\")}\n                  placeholder=\"Any special requirements or instructions\"\n                  rows={2}\n                />\n              </div>\n\n              {/* Pickup and Return Address Section */}\n              <div className=\"space-y-4 mt-6\">\n                <div className=\"flex items-center gap-2 mb-4\">\n                  <MapPin className=\"h-5 w-5 text-blue-500\" />\n                  <h4 className=\"text-md font-semibold\">Pickup & Return Address</h4>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"pickupAddress\">Pickup Address *</Label>\n                  <Textarea\n                    id=\"pickupAddress\"\n                    {...form.register(\"pickupAddress\")}\n                    placeholder=\"Where should we deliver the equipment?\"\n                    rows={3}\n                  />\n                  {form.formState.errors.pickupAddress && (\n                    <p className=\"text-red-500 text-sm mt-1\">\n                      {form.formState.errors.pickupAddress.message}\n                    </p>\n                  )}\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"sameAddress\"\n                    {...form.register(\"sameAddress\")}\n                    className=\"rounded border-gray-300\"\n                  />\n                  <Label htmlFor=\"sameAddress\" className=\"text-sm\">\n                    Return to the same address\n                  </Label>\n                </div>\n\n                {!form.watch(\"sameAddress\") && (\n                  <div>\n                    <Label htmlFor=\"returnAddress\">Return Address *</Label>\n                    <Textarea\n                      id=\"returnAddress\"\n                      {...form.register(\"returnAddress\")}\n                      placeholder=\"Where should we collect the equipment?\"\n                      rows={3}\n                    />\n                    {form.formState.errors.returnAddress && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {form.formState.errors.returnAddress.message}\n                      </p>\n                    )}\n                  </div>\n                )}\n              </div>\n\n              {/* Price Summary */}\n              {startDate && endDate && (\n                <Card className=\"bg-blue-50 border-blue-200\">\n                  <CardContent className=\"p-4\">\n                    <h4 className=\"font-semibold mb-3\">Price Breakdown</h4>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span>Rental ({pricing.days} days × {quantity} items)</span>\n                        <span>₹{pricing.rental.toLocaleString()}</span>\n                      </div>\n                      {pricing.deposit > 0 && (\n                        <div className=\"flex justify-between\">\n                          <span>Security Deposit</span>\n                          <span>₹{pricing.deposit.toLocaleString()}</span>\n                        </div>\n                      )}\n                      <Separator />\n                      <div className=\"flex justify-between font-semibold\">\n                        <span>Total Amount</span>\n                        <span>₹{pricing.total.toLocaleString()}</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          )}\n\n          {/* Step 4: Review and Agreement */}\n          {step === 4 && (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-2 mb-4\">\n                <Shield className=\"h-5 w-5 text-blue-500\" />\n                <h3 className=\"text-lg font-semibold\">Review & Agreement</h3>\n              </div>\n\n              {/* Order Summary */}\n              <Card className=\"bg-gray-50\">\n                <CardContent className=\"p-4\">\n                  <h4 className=\"font-semibold mb-3\">Booking Summary</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div><strong>Product:</strong> {product.name}</div>\n                    <div><strong>Customer:</strong> {form.watch(\"fullName\")}</div>\n                    <div><strong>Email:</strong> {form.watch(\"email\")}</div>\n                    <div><strong>Phone:</strong> {form.watch(\"phone\")}</div>\n                    <div><strong>Address:</strong> {form.watch(\"address\")}, {form.watch(\"city\")}</div>\n                    <div><strong>Rental Period:</strong> {startDate && format(startDate, \"PPP\")} to {endDate && format(endDate, \"PPP\")}</div>\n                    <div><strong>Quantity:</strong> {quantity}</div>\n                    <div><strong>Total Amount:</strong> ₹{pricing.total.toLocaleString()}</div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Terms Agreement */}\n              <div className=\"flex items-start space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  id=\"agreeToTerms\"\n                  {...form.register(\"agreeToTerms\")}\n                  className=\"mt-1\"\n                />\n                <Label htmlFor=\"agreeToTerms\" className=\"text-sm leading-relaxed\">\n                  I agree to the terms and conditions, rental policies, and confirm that all information provided is accurate. \n                  I understand that the security deposit will be refunded after successful return of the equipment.\n                </Label>\n              </div>\n              {form.formState.errors.agreeToTerms && (\n                <p className=\"text-red-500 text-sm\">\n                  {form.formState.errors.agreeToTerms.message}\n                </p>\n              )}\n            </div>\n          )}\n\n          {/* Navigation Buttons */}\n          <div className=\"flex justify-between pt-6\">\n            {step > 1 && (\n              <Button type=\"button\" variant=\"outline\" onClick={prevStep}>\n                Previous\n              </Button>\n            )}\n            \n            {step < totalSteps ? (\n              <Button type=\"button\" onClick={nextStep} className=\"ml-auto\">\n                Next Step\n              </Button>\n            ) : (\n              <Button \n                type=\"submit\" \n                disabled={createOrderMutation.isPending}\n                className=\"ml-auto\"\n              >\n                {createOrderMutation.isPending ? (\n                  <>\n                    <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2\" />\n                    Creating Booking...\n                  </>\n                ) : (\n                  \"Complete Booking\"\n                )}\n              </Button>\n            )}\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":24652},"client/src/components/ui/live-availability.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Clock, CheckCircle, AlertCircle } from \"lucide-react\";\n\ninterface LiveAvailabilityProps {\n  productId: string;\n  startDate?: Date;\n  endDate?: Date;\n  className?: string;\n}\n\nexport default function LiveAvailability({ productId, startDate, endDate, className = \"\" }: LiveAvailabilityProps) {\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n  \n  const { data: availability, isLoading, refetch } = useQuery({\n    queryKey: [\"/api/products\", productId, \"availability\", startDate, endDate],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (startDate) params.set('startDate', startDate.toISOString());\n      if (endDate) params.set('endDate', endDate.toISOString());\n      \n      const response = await fetch(`/api/products/${productId}/availability?${params.toString()}`);\n      return response.json();\n    },\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  // Auto-refresh every 30 seconds\n  useEffect(() => {\n    const interval = setInterval(() => {\n      refetch();\n      setLastUpdated(new Date());\n    }, 30000);\n\n    return () => clearInterval(interval);\n  }, [refetch]);\n\n  const getAvailabilityStatus = () => {\n    if (isLoading) return { status: \"loading\", message: \"Checking availability...\", icon: Clock };\n    if (!availability) return { status: \"unknown\", message: \"Unable to check\", icon: AlertCircle };\n    \n    const available = availability.availableQuantity || 0;\n    const total = availability.totalQuantity || 0;\n    \n    if (available === 0) {\n      return { status: \"unavailable\", message: \"Not Available\", icon: AlertCircle };\n    } else if (available < total * 0.3) {\n      return { status: \"limited\", message: `Only ${available} left`, icon: AlertCircle };\n    } else {\n      return { status: \"available\", message: `${available} available`, icon: CheckCircle };\n    }\n  };\n\n  const { status, message, icon: Icon } = getAvailabilityStatus();\n\n  const statusStyles = {\n    available: \"bg-green-100 text-green-800 border-green-200\",\n    limited: \"bg-yellow-100 text-yellow-800 border-yellow-200\",\n    unavailable: \"bg-red-100 text-red-800 border-red-200\",\n    loading: \"bg-gray-100 text-gray-800 border-gray-200\",\n    unknown: \"bg-gray-100 text-gray-800 border-gray-200\"\n  };\n\n  return (\n    <div className={`space-y-2 ${className}`}>\n      <div className=\"flex items-center justify-between\">\n        <Badge \n          variant=\"outline\" \n          className={`flex items-center gap-1 px-3 py-1 ${statusStyles[status as keyof typeof statusStyles]}`}\n        >\n          <Icon className=\"h-3 w-3\" />\n          {message}\n        </Badge>\n        \n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => refetch()}\n          disabled={isLoading}\n          className=\"text-xs text-gray-500\"\n        >\n          Refresh\n        </Button>\n      </div>\n      \n      <div className=\"text-xs text-gray-500 flex items-center gap-1\">\n        <Clock className=\"h-3 w-3\" />\n        Updated: {lastUpdated.toLocaleTimeString()}\n      </div>\n      \n      {startDate && endDate && (\n        <div className=\"text-xs text-gray-600\">\n          For: {startDate.toLocaleDateString()} - {endDate.toLocaleDateString()}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":3446},"client/src/components/ui/quick-rent-widget.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CalendarIcon, Clock, Zap } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport LiveAvailability from \"./live-availability\";\n\ninterface QuickRentWidgetProps {\n  product: any;\n  className?: string;\n}\n\nexport default function QuickRentWidget({ product, className = \"\" }: QuickRentWidgetProps) {\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [startDate, setStartDate] = useState<Date>();\n  const [endDate, setEndDate] = useState<Date>();\n  const [quantity, setQuantity] = useState(1);\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const quickRentMutation = useMutation({\n    mutationFn: async () => {\n      if (!startDate || !endDate) {\n        throw new Error(\"Please select rental dates\");\n      }\n\n      const orderData = {\n        startDate: startDate.toISOString(),\n        endDate: endDate.toISOString(),\n        totalAmount: calculateTotal(),\n        items: [{\n          productId: product.id,\n          quantity: quantity,\n          unitRate: product.dailyRate || 0,\n          totalAmount: calculateItemTotal()\n        }]\n      };\n\n      const response = await apiRequest(\"POST\", \"/api/orders\", orderData);\n      return response.json();\n    },\n    onSuccess: (order) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      toast({\n        title: \"Order Created Successfully!\",\n        description: `Order ${order.orderNumber} has been created. Proceed to payment.`,\n      });\n      \n      // Redirect to checkout\n      window.location.href = `/checkout/${order.id}`;\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Order Creation Failed\",\n        description: error.message || \"Failed to create order. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const calculateDays = () => {\n    if (!startDate || !endDate) return 0;\n    const diffTime = Math.abs(endDate.getTime() - startDate.getTime());\n    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  };\n\n  const calculateItemTotal = () => {\n    const days = calculateDays();\n    const rate = parseFloat(product.dailyRate || \"0\");\n    return days * rate * quantity;\n  };\n\n  const calculateTotal = () => {\n    const itemTotal = calculateItemTotal();\n    const deposit = parseFloat(product.securityDeposit || \"0\");\n    return itemTotal + deposit;\n  };\n\n  if (!isAuthenticated) {\n    return (\n      <Card className={className}>\n        <CardContent className=\"p-4\">\n          <div className=\"text-center space-y-3\">\n            <Zap className=\"h-8 w-8 text-blue-500 mx-auto\" />\n            <h4 className=\"font-medium\">Quick Rent</h4>\n            <p className=\"text-sm text-gray-600\">Sign in to rent instantly</p>\n            <Button \n              onClick={() => window.location.href = \"/api/login\"}\n              size=\"sm\"\n              className=\"w-full\"\n            >\n              Sign In to Rent\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={className}>\n      <CardContent className=\"p-4\">\n        <div className=\"space-y-4\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <Zap className=\"h-5 w-5 text-blue-500\" />\n              <h4 className=\"font-medium\">Quick Rent</h4>\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                Fast Booking\n              </Badge>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsExpanded(!isExpanded)}\n            >\n              {isExpanded ? \"Simple\" : \"Advanced\"}\n            </Button>\n          </div>\n\n          {/* Live Availability */}\n          <LiveAvailability \n            productId={product.id}\n            startDate={startDate}\n            endDate={endDate}\n          />\n\n          {/* Quick Actions */}\n          <div className=\"grid grid-cols-2 gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => {\n                const tomorrow = new Date();\n                tomorrow.setDate(tomorrow.getDate() + 1);\n                const nextDay = new Date();\n                nextDay.setDate(nextDay.getDate() + 2);\n                setStartDate(tomorrow);\n                setEndDate(nextDay);\n              }}\n            >\n              <Clock className=\"h-3 w-3 mr-1\" />\n              Tomorrow\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => {\n                const nextWeek = new Date();\n                nextWeek.setDate(nextWeek.getDate() + 7);\n                const weekEnd = new Date();\n                weekEnd.setDate(weekEnd.getDate() + 14);\n                setStartDate(nextWeek);\n                setEndDate(weekEnd);\n              }}\n            >\n              <Clock className=\"h-3 w-3 mr-1\" />\n              Next Week\n            </Button>\n          </div>\n\n          {/* Date Selection */}\n          <div className=\"grid grid-cols-2 gap-3\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"start-date\" className=\"text-xs\">Start Date</Label>\n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    className={`w-full justify-start text-left font-normal ${!startDate && \"text-muted-foreground\"}`}\n                    size=\"sm\"\n                  >\n                    <CalendarIcon className=\"mr-2 h-3 w-3\" />\n                    {startDate ? format(startDate, \"MMM dd\") : \"Pick date\"}\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                  <Calendar\n                    mode=\"single\"\n                    selected={startDate}\n                    onSelect={setStartDate}\n                    disabled={(date) => date < new Date()}\n                    initialFocus\n                  />\n                </PopoverContent>\n              </Popover>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"end-date\" className=\"text-xs\">End Date</Label>\n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    className={`w-full justify-start text-left font-normal ${!endDate && \"text-muted-foreground\"}`}\n                    size=\"sm\"\n                  >\n                    <CalendarIcon className=\"mr-2 h-3 w-3\" />\n                    {endDate ? format(endDate, \"MMM dd\") : \"Pick date\"}\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                  <Calendar\n                    mode=\"single\"\n                    selected={endDate}\n                    onSelect={setEndDate}\n                    disabled={(date) => date < (startDate || new Date())}\n                    initialFocus\n                  />\n                </PopoverContent>\n              </Popover>\n            </div>\n          </div>\n\n          {/* Quantity and Advanced Options */}\n          {isExpanded && (\n            <div className=\"space-y-3 pt-3 border-t\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"quantity\" className=\"text-xs\">Quantity</Label>\n                <Input\n                  id=\"quantity\"\n                  type=\"number\"\n                  min=\"1\"\n                  max={product.availableQuantity || 1}\n                  value={quantity}\n                  onChange={(e) => setQuantity(parseInt(e.target.value) || 1)}\n                  className=\"text-sm\"\n                />\n              </div>\n            </div>\n          )}\n\n          {/* Price Calculation */}\n          {startDate && endDate && (\n            <div className=\"space-y-2 p-3 bg-gray-50 rounded-lg\">\n              <div className=\"flex justify-between text-sm\">\n                <span>Rental ({calculateDays()} days)</span>\n                <span>₹{calculateItemTotal().toLocaleString()}</span>\n              </div>\n              {product.securityDeposit && parseFloat(product.securityDeposit) > 0 && (\n                <div className=\"flex justify-between text-sm text-gray-600\">\n                  <span>Security Deposit</span>\n                  <span>₹{parseFloat(product.securityDeposit).toLocaleString()}</span>\n                </div>\n              )}\n              <div className=\"flex justify-between font-bold text-sm pt-2 border-t\">\n                <span>Total</span>\n                <span>₹{calculateTotal().toLocaleString()}</span>\n              </div>\n            </div>\n          )}\n\n          {/* Rent Button */}\n          <Button\n            onClick={() => quickRentMutation.mutate()}\n            disabled={!startDate || !endDate || quickRentMutation.isPending}\n            className=\"w-full\"\n            size=\"sm\"\n          >\n            {quickRentMutation.isPending ? (\n              <>\n                <div className=\"animate-spin w-3 h-3 border-2 border-white border-t-transparent rounded-full mr-2\" />\n                Creating Order...\n              </>\n            ) : (\n              <>\n                <Zap className=\"h-3 w-3 mr-2\" />\n                Rent Now - ₹{calculateTotal().toLocaleString()}\n              </>\n            )}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":10169},"client/src/pages/customer/billing.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport CustomerLayout from \"@/components/layout/customer-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { \n  Receipt, \n  Download, \n  CreditCard, \n  Calendar, \n  Search,\n  Filter,\n  FileText,\n  CheckCircle,\n  Clock,\n  AlertCircle \n} from \"lucide-react\";\n\nexport default function CustomerBilling() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n\n  const { data: orders = [], isLoading: ordersLoading } = useQuery({\n    queryKey: [\"/api/orders\"],\n  });\n\n  const { data: invoices = [], isLoading: invoicesLoading } = useQuery({\n    queryKey: [\"/api/invoices\"],\n  });\n\n  const formatDate = (date: string | Date) => {\n    return new Date(date).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  const formatCurrency = (amount: string | number) => {\n    return `₹${Number(amount).toLocaleString()}`;\n  };\n\n  const getStatusBadge = (status: string, type: 'payment' | 'order' = 'payment') => {\n    const variants: Record<string, { variant: any; icon: any; color: string }> = {\n      paid: { variant: \"default\", icon: CheckCircle, color: \"text-green-600\" },\n      pending: { variant: \"secondary\", icon: Clock, color: \"text-yellow-600\" },\n      failed: { variant: \"destructive\", icon: AlertCircle, color: \"text-red-600\" },\n      confirmed: { variant: \"default\", icon: CheckCircle, color: \"text-green-600\" },\n      completed: { variant: \"default\", icon: CheckCircle, color: \"text-blue-600\" },\n      cancelled: { variant: \"destructive\", icon: AlertCircle, color: \"text-red-600\" }\n    };\n\n    const config = variants[status] || { variant: \"secondary\", icon: Clock, color: \"text-gray-600\" };\n    const Icon = config.icon;\n\n    return (\n      <Badge variant={config.variant} className=\"flex items-center gap-1\">\n        <Icon className=\"h-3 w-3\" />\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  const filteredOrders = orders.filter((order: any) => {\n    const matchesSearch = order.orderNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         order.orderItems?.some((item: any) => \n                           item.product?.name.toLowerCase().includes(searchTerm.toLowerCase())\n                         );\n    const matchesStatus = statusFilter === \"all\" || order.paymentStatus === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  const filteredInvoices = invoices.filter((invoice: any) => {\n    const matchesSearch = invoice.invoiceNumber.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || invoice.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  const totalPaid = orders\n    .filter((order: any) => order.paymentStatus === 'paid')\n    .reduce((sum: number, order: any) => sum + Number(order.totalAmount || 0), 0);\n\n  const totalPending = orders\n    .filter((order: any) => order.paymentStatus === 'pending')\n    .reduce((sum: number, order: any) => sum + Number(order.totalAmount || 0), 0);\n\n  return (\n    <CustomerLayout>\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">Billing & Payments</h1>\n            <p className=\"text-gray-600\">Manage your orders, payments, and invoices</p>\n          </div>\n        </div>\n\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-3 bg-green-100 rounded-full\">\n                  <CheckCircle className=\"h-6 w-6 text-green-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Total Paid</p>\n                  <p className=\"text-2xl font-bold text-green-600\">\n                    {formatCurrency(totalPaid)}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-3 bg-yellow-100 rounded-full\">\n                  <Clock className=\"h-6 w-6 text-yellow-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Pending</p>\n                  <p className=\"text-2xl font-bold text-yellow-600\">\n                    {formatCurrency(totalPending)}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-3 bg-blue-100 rounded-full\">\n                  <Receipt className=\"h-6 w-6 text-blue-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Total Orders</p>\n                  <p className=\"text-2xl font-bold text-blue-600\">\n                    {orders.length}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Search and Filter */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Search by order number or product name...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Filter className=\"h-4 w-4 text-gray-400\" />\n                <select\n                  value={statusFilter}\n                  onChange={(e) => setStatusFilter(e.target.value)}\n                  className=\"border border-gray-300 rounded-md px-3 py-2 bg-white\"\n                >\n                  <option value=\"all\">All Status</option>\n                  <option value=\"paid\">Paid</option>\n                  <option value=\"pending\">Pending</option>\n                  <option value=\"failed\">Failed</option>\n                </select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Main Content */}\n        <Tabs defaultValue=\"orders\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"orders\" className=\"flex items-center gap-2\">\n              <Receipt className=\"h-4 w-4\" />\n              Order History\n            </TabsTrigger>\n            <TabsTrigger value=\"invoices\" className=\"flex items-center gap-2\">\n              <FileText className=\"h-4 w-4\" />\n              Invoices\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"orders\" className=\"mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Order History & Payments</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {ordersLoading ? (\n                  <div className=\"flex justify-center py-8\">\n                    <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n                  </div>\n                ) : filteredOrders.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <Receipt className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No orders found</h3>\n                    <p className=\"text-gray-600\">\n                      {searchTerm || statusFilter !== \"all\" \n                        ? \"Try adjusting your search or filter criteria\"\n                        : \"You haven't placed any orders yet\"\n                      }\n                    </p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {filteredOrders.map((order: any) => (\n                      <div key={order.id} className=\"border border-gray-200 rounded-lg p-4 hover:shadow-sm transition-shadow\">\n                        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4\">\n                          <div>\n                            <div className=\"flex items-center gap-3 mb-2\">\n                              <h4 className=\"font-medium text-gray-900\">{order.orderNumber}</h4>\n                              {getStatusBadge(order.paymentStatus)}\n                              {getStatusBadge(order.status, 'order')}\n                            </div>\n                            <div className=\"text-sm text-gray-600\">\n                              <span className=\"flex items-center gap-1\">\n                                <Calendar className=\"h-3 w-3\" />\n                                Order Date: {formatDate(order.createdAt)}\n                              </span>\n                            </div>\n                          </div>\n                          <div className=\"text-right mt-2 sm:mt-0\">\n                            <div className=\"text-xl font-bold text-gray-900\">\n                              {formatCurrency(order.totalAmount)}\n                            </div>\n                            <div className=\"text-sm text-gray-600\">\n                              {formatDate(order.startDate)} - {formatDate(order.endDate)}\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Order Items */}\n                        <div className=\"space-y-2 mb-4\">\n                          {order.orderItems?.map((item: any, index: number) => (\n                            <div key={item.id || index} className=\"flex items-center text-sm text-gray-600\">\n                              <div className=\"w-8 h-8 bg-gray-100 rounded mr-3 flex items-center justify-center\">\n                                <i className=\"fas fa-box text-xs text-gray-400\"></i>\n                              </div>\n                              <div className=\"flex-1\">\n                                <span className=\"font-medium\">{item.product?.name || 'Unknown Product'}</span>\n                                <span className=\"text-gray-500 ml-2\">× {item.quantity}</span>\n                              </div>\n                              <span className=\"font-medium\">{formatCurrency(item.totalAmount)}</span>\n                            </div>\n                          ))}\n                        </div>\n\n                        {/* Action Buttons */}\n                        <div className=\"flex flex-wrap gap-2\">\n                          <Button variant=\"outline\" size=\"sm\">\n                            <FileText className=\"h-3 w-3 mr-1\" />\n                            View Details\n                          </Button>\n                          <Button variant=\"outline\" size=\"sm\">\n                            <Download className=\"h-3 w-3 mr-1\" />\n                            Download Receipt\n                          </Button>\n                          {order.paymentStatus === 'pending' && (\n                            <Button \n                              size=\"sm\"\n                              onClick={() => window.location.href = `/checkout/${order.id}`}\n                              className=\"bg-blue-600 hover:bg-blue-700\"\n                            >\n                              <CreditCard className=\"h-3 w-3 mr-1\" />\n                              Pay Now\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"invoices\" className=\"mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Invoices</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {invoicesLoading ? (\n                  <div className=\"flex justify-center py-8\">\n                    <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n                  </div>\n                ) : filteredInvoices.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <FileText className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No invoices found</h3>\n                    <p className=\"text-gray-600\">Invoices will appear here when generated</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {filteredInvoices.map((invoice: any) => (\n                      <div key={invoice.id} className=\"border border-gray-200 rounded-lg p-4 hover:shadow-sm transition-shadow\">\n                        <div className=\"flex justify-between items-start mb-4\">\n                          <div>\n                            <h4 className=\"font-medium text-gray-900 mb-2\">{invoice.invoiceNumber}</h4>\n                            <div className=\"text-sm text-gray-600\">\n                              <div>Issue Date: {formatDate(invoice.createdAt)}</div>\n                              <div>Due Date: {formatDate(invoice.dueDate)}</div>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <div className=\"text-xl font-bold text-gray-900\">\n                              {formatCurrency(invoice.totalAmount)}\n                            </div>\n                            {getStatusBadge(invoice.status)}\n                          </div>\n                        </div>\n\n                        <div className=\"flex gap-2\">\n                          <Button variant=\"outline\" size=\"sm\">\n                            <FileText className=\"h-3 w-3 mr-1\" />\n                            View Invoice\n                          </Button>\n                          <Button variant=\"outline\" size=\"sm\">\n                            <Download className=\"h-3 w-3 mr-1\" />\n                            Download PDF\n                          </Button>\n                          {invoice.status === 'sent' && (\n                            <Button \n                              size=\"sm\"\n                              onClick={() => window.location.href = `/invoice-payment/${invoice.id}`}\n                              className=\"bg-blue-600 hover:bg-blue-700\"\n                            >\n                              <CreditCard className=\"h-3 w-3 mr-1\" />\n                              Pay Invoice\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </CustomerLayout>\n  );\n}","size_bytes":15712},"client/src/pages/customer/product-detail.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useRoute, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport CustomerLayout from \"@/components/layout/customer-layout\";\nimport RentalCalendar from \"@/components/ui/rental-calendar\";\nimport EnhancedBookingForm from \"@/components/ui/enhanced-booking-form\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Heart, ArrowLeft, Plus, Minus, Share2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { ProductWithCategory } from \"@shared/schema\";\n\nexport default function ProductDetail() {\n  const [match, params] = useRoute(\"/catalog/:id\");\n  const [, setLocation] = useLocation();\n  const [selectedDates, setSelectedDates] = useState<{ from?: Date; to?: Date }>({});\n  const [quantity, setQuantity] = useState(1);\n  const [couponCode, setCouponCode] = useState(\"\");\n  const [isWishlisted, setIsWishlisted] = useState(false);\n  const { toast } = useToast();\n\n  const { data: product, isLoading } = useQuery({\n    queryKey: [\"/api/products\", params?.id],\n    queryFn: () => \n      fetch(`/api/products/${params?.id}`).then(res => res.json()),\n    enabled: !!params?.id,\n  });\n\n  const calculatePrice = () => {\n    if (!selectedDates?.from || !selectedDates?.to || !product) {\n      return null;\n    }\n    \n    const duration = Math.ceil((selectedDates.to.getTime() - selectedDates.from.getTime()) / (1000 * 60 * 60 * 24));\n    \n    if (duration <= 1 && product.hourlyRate) {\n      const hours = Math.max(1, Math.ceil((selectedDates.to.getTime() - selectedDates.from.getTime()) / (1000 * 60 * 60)));\n      return { amount: Number(product.hourlyRate) * hours * quantity, unit: `${hours} hour${hours > 1 ? 's' : ''}`, perUnit: Number(product.hourlyRate) };\n    } else if (duration <= 7 && product.dailyRate) {\n      return { amount: Number(product.dailyRate) * duration * quantity, unit: `${duration} day${duration > 1 ? 's' : ''}`, perUnit: Number(product.dailyRate) };\n    } else if (duration <= 30 && product.weeklyRate) {\n      const weeks = Math.ceil(duration / 7);\n      return { amount: Number(product.weeklyRate) * weeks * quantity, unit: `${weeks} week${weeks > 1 ? 's' : ''}`, perUnit: Number(product.weeklyRate) };\n    } else if (product.monthlyRate) {\n      const months = Math.ceil(duration / 30);\n      return { amount: Number(product.monthlyRate) * months * quantity, unit: `${months} month${months > 1 ? 's' : ''}`, perUnit: Number(product.monthlyRate) };\n    } else if (product.dailyRate) {\n      return { amount: Number(product.dailyRate) * duration * quantity, unit: `${duration} day${duration > 1 ? 's' : ''}`, perUnit: Number(product.dailyRate) };\n    }\n    \n    return null;\n  };\n\n  const [showBookingForm, setShowBookingForm] = useState(false);\n  const { isAuthenticated } = useAuth();\n\n  const handleBookNow = () => {\n    if (!isAuthenticated) {\n      window.location.href = '/api/login';\n      return;\n    }\n    \n    if (!selectedDates.from || !selectedDates.to) {\n      toast({\n        title: \"Please select rental dates\",\n        description: \"Choose your rental period to continue\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setShowBookingForm(true);\n  };\n\n  const handleBookingComplete = (orderId: string) => {\n    setLocation(`/checkout/${orderId}`);\n  };\n\n  const handleWishlist = () => {\n    setIsWishlisted(!isWishlisted);\n    toast({\n      title: isWishlisted ? \"Removed from wishlist\" : \"Added to wishlist\",\n      description: isWishlisted ? \"Item removed from your wishlist\" : \"Item saved to your wishlist\",\n    });\n  };\n\n  const handleShare = async () => {\n    const shareData = {\n      title: product?.name || 'Rental Product',\n      text: `Check out this rental product: ${product?.name}`,\n      url: window.location.href,\n    };\n\n    if (navigator.share) {\n      try {\n        await navigator.share(shareData);\n        toast({\n          title: \"Shared successfully\",\n          description: \"Product shared successfully\",\n        });\n      } catch (error) {\n        // User cancelled sharing, fallback to copy\n        navigator.clipboard.writeText(window.location.href);\n        toast({\n          title: \"Link copied\",\n          description: \"Product link copied to clipboard\",\n        });\n      }\n    } else {\n      // Fallback to copy to clipboard\n      try {\n        await navigator.clipboard.writeText(window.location.href);\n        toast({\n          title: \"Link copied\",\n          description: \"Product link copied to clipboard\",\n        });\n      } catch (error) {\n        toast({\n          title: \"Sharing failed\",\n          description: \"Unable to share or copy link\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const calculatedPrice = calculatePrice();\n\n  if (isLoading) {\n    return (\n      <CustomerLayout>\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded w-64 mb-6\"></div>\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              <div className=\"h-96 bg-gray-200 rounded-lg\"></div>\n              <div className=\"space-y-4\">\n                <div className=\"h-8 bg-gray-200 rounded\"></div>\n                <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                <div className=\"h-32 bg-gray-200 rounded\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </CustomerLayout>\n    );\n  }\n\n  if (!product) {\n    return (\n      <CustomerLayout>\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"text-center py-12\">\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Product not found</h1>\n            <Button onClick={() => setLocation(\"/catalog\")}>\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Catalog\n            </Button>\n          </div>\n        </div>\n      </CustomerLayout>\n    );\n  }\n\n  return (\n    <CustomerLayout>\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        {/* Breadcrumb */}\n        <nav className=\"mb-6\">\n          <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n            <button onClick={() => setLocation(\"/catalog\")} className=\"hover:text-blue-600\">\n              All Products\n            </button>\n            <span>/</span>\n            <span className=\"text-gray-900\">{product.name}</span>\n          </div>\n        </nav>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Product Image */}\n          <div className=\"aspect-square bg-gradient-to-br from-gray-100 to-gray-200 rounded-lg flex items-center justify-center\">\n            {product.imageUrl ? (\n              <img \n                src={product.imageUrl} \n                alt={product.name}\n                className=\"w-full h-full object-cover rounded-lg\"\n              />\n            ) : (\n              <i className=\"fas fa-box text-6xl text-gray-400\"></i>\n            )}\n          </div>\n\n          {/* Product Details */}\n          <div className=\"space-y-6\">\n            <div>\n              <div className=\"flex items-start justify-between mb-2\">\n                <h1 className=\"text-2xl font-bold text-gray-900\">{product.name}</h1>\n                <div className=\"flex items-center space-x-2\">\n                  <Button variant=\"outline\" size=\"sm\" onClick={handleWishlist}>\n                    <Heart className={`h-4 w-4 ${isWishlisted ? 'fill-red-500 text-red-500' : ''}`} />\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" onClick={handleShare}>\n                    <Share2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n              \n              {calculatedPrice ? (\n                <div className=\"mb-4 p-4 bg-blue-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-blue-700\">\n                    ₹{calculatedPrice.amount.toLocaleString()}\n                  </div>\n                  <div className=\"text-sm text-blue-600\">\n                    (₹{calculatedPrice.perUnit.toLocaleString()} per unit × {quantity} × {calculatedPrice.unit})\n                  </div>\n                </div>\n              ) : (\n                <div className=\"space-y-2 mb-4\">\n                  {product.hourlyRate && (\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-500\">Hourly:</span>\n                      <span className=\"font-medium\">₹{Number(product.hourlyRate).toLocaleString()}/hr</span>\n                    </div>\n                  )}\n                  {product.dailyRate && (\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-500\">Daily:</span>\n                      <span className=\"font-medium\">₹{Number(product.dailyRate).toLocaleString()}/day</span>\n                    </div>\n                  )}\n                  {product.weeklyRate && (\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-500\">Weekly:</span>\n                      <span className=\"font-medium\">₹{Number(product.weeklyRate).toLocaleString()}/week</span>\n                    </div>\n                  )}\n                  {product.monthlyRate && (\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-500\">Monthly:</span>\n                      <span className=\"font-medium\">₹{Number(product.monthlyRate).toLocaleString()}/month</span>\n                    </div>\n                  )}\n                </div>\n              )}\n\n              <div className=\"flex items-center gap-3 mb-4\">\n                <span className=\"text-sm text-gray-600\">From:</span>\n                <input type=\"date\" className=\"border rounded px-3 py-1\" />\n                <span className=\"text-sm text-gray-600\">to:</span>\n                <input type=\"date\" className=\"border rounded px-3 py-1\" />\n              </div>\n\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setQuantity(Math.max(1, quantity - 1))}\n                  disabled={quantity <= 1}\n                >\n                  <Minus className=\"h-4 w-4\" />\n                </Button>\n                <span className=\"font-medium px-4\">{quantity}</span>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setQuantity(Math.min(product.availableQuantity || 1, quantity + 1))}\n                  disabled={quantity >= (product.availableQuantity || 1)}\n                >\n                  <Plus className=\"h-4 w-4\" />\n                </Button>\n                <Button \n                  onClick={handleBookNow}\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white px-6\"\n                  disabled={!product.availableQuantity || product.availableQuantity <= 0}\n                >\n                  {isAuthenticated ? \"Book Now\" : \"Sign In to Book\"}\n                </Button>\n              </div>\n\n              {product.category && (\n                <Badge variant=\"secondary\" className=\"mb-4\">\n                  {product.category.name}\n                </Badge>\n              )}\n\n              <Badge \n                variant={product.availableQuantity && product.availableQuantity > 0 ? \"default\" : \"destructive\"}\n                className=\"mb-4\"\n              >\n                {product.availableQuantity && product.availableQuantity > 0\n                  ? `${product.availableQuantity} Available` \n                  : \"Out of Stock\"\n                }\n              </Badge>\n            </div>\n\n            {/* Rental Period Selection */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Select Rental Period</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <RentalCalendar\n                  selected={selectedDates}\n                  onSelect={setSelectedDates}\n                  className=\"w-full\"\n                />\n              </CardContent>\n            </Card>\n\n            {/* Apply Coupon */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Apply Coupon</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex space-x-2\">\n                  <Input\n                    placeholder=\"Coupon Code\"\n                    value={couponCode}\n                    onChange={(e) => setCouponCode(e.target.value)}\n                    className=\"flex-1\"\n                  />\n                  <Button \n                    variant=\"outline\"\n                    onClick={() => {\n                      if (couponCode.trim()) {\n                        toast({\n                          title: \"Coupon Applied\",\n                          description: `Coupon \"${couponCode}\" has been applied successfully`,\n                        });\n                        setCouponCode(\"\");\n                      } else {\n                        toast({\n                          title: \"Invalid Coupon\",\n                          description: \"Please enter a valid coupon code\",\n                          variant: \"destructive\",\n                        });\n                      }\n                    }}\n                  >\n                    Apply\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Product Description */}\n        <div className=\"mt-8\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Product descriptions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-gray-700\">{product.description || \"No description available.\"}</p>\n              \n              {product.description && (\n                <div className=\"mt-4 text-sm text-gray-600\">\n                  <div className=\"space-y-2\">\n                    <h4 className=\"font-medium text-gray-900\">Key Features:</h4>\n                    <ul className=\"list-disc list-inside space-y-1\">\n                      <li>Professional grade equipment</li>\n                      <li>Well-maintained and regularly serviced</li>\n                      <li>Includes necessary accessories</li>\n                      <li>Safety instructions provided</li>\n                    </ul>\n                  </div>\n                  \n                  <div className=\"mt-4 space-y-2\">\n                    <h4 className=\"font-medium text-gray-900\">Rental Terms:</h4>\n                    <ul className=\"list-disc list-inside space-y-1\">\n                      <li>Security deposit required</li>\n                      <li>Late return fees may apply</li>\n                      <li>Damage assessment upon return</li>\n                      <li>Pickup and delivery available</li>\n                    </ul>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Add to Wishlist Button */}\n        <div className=\"mt-6 text-center\">\n          <Button variant=\"outline\" onClick={handleWishlist} className=\"w-full max-w-md\">\n            <Heart className={`h-4 w-4 mr-2 ${isWishlisted ? 'fill-red-500 text-red-500' : ''}`} />\n            {isWishlisted ? \"Remove from wishlist\" : \"Add to wish list\"}\n          </Button>\n        </div>\n      </div>\n\n      {/* Booking Form Modal */}\n      {showBookingForm && product && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n            <div className=\"sticky top-0 bg-white border-b px-6 py-4 flex justify-between items-center\">\n              <h2 className=\"text-xl font-semibold\">Book {product.name}</h2>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setShowBookingForm(false)}\n              >\n                ✕\n              </Button>\n            </div>\n            <div className=\"p-6\">\n              <EnhancedBookingForm\n                product={{\n                  ...product,\n                  selectedDates,\n                  quantity,\n                  pricing: calculatePrice()\n                }}\n                onComplete={handleBookingComplete}\n              />\n            </div>\n          </div>\n        </div>\n      )}\n    </CustomerLayout>\n  );\n}","size_bytes":16955},"server/mobileAPI.ts":{"content":"// Mobile API endpoints for the companion app\nimport type { Express } from \"express\";\nimport { PushNotificationService } from './pushNotifications';\nimport { isAuthenticated } from './auth';\nimport { storage } from './storage';\nimport { z } from 'zod';\n\n// Validation schemas for mobile API\nconst registerDeviceSchema = z.object({\n  token: z.string().min(1, 'Device token is required'),\n  platform: z.enum(['ios', 'android', 'web']),\n  deviceInfo: z.object({\n    model: z.string().optional(),\n    osVersion: z.string().optional(),\n    appVersion: z.string().optional()\n  }).optional()\n});\n\nconst sendTestNotificationSchema = z.object({\n  title: z.string().min(1, 'Title is required'),\n  message: z.string().min(1, 'Message is required'),\n  type: z.enum(['rental_reminder', 'booking_confirmed', 'payment_due', 'rental_returned', 'otp_verification', 'order_status']).optional()\n});\n\nexport function registerMobileRoutes(app: Express): void {\n  // Register device for push notifications\n  app.post('/api/mobile/register-device', isAuthenticated, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const validatedData = registerDeviceSchema.parse(req.body);\n      \n      const success = await PushNotificationService.registerDevice(\n        user.id,\n        validatedData.token,\n        validatedData.platform\n      );\n      \n      if (success) {\n        res.json({ \n          success: true, \n          message: 'Device registered successfully for push notifications',\n          deviceInfo: validatedData.deviceInfo\n        });\n      } else {\n        res.status(500).json({ success: false, message: 'Failed to register device' });\n      }\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ success: false, message: 'Validation error', errors: error.errors });\n      }\n      console.error('Error registering device:', error);\n      res.status(500).json({ success: false, message: 'Failed to register device' });\n    }\n  });\n\n  // Unregister device\n  app.post('/api/mobile/unregister-device', isAuthenticated, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const { token } = req.body;\n      \n      if (!token) {\n        return res.status(400).json({ success: false, message: 'Device token is required' });\n      }\n      \n      const success = await PushNotificationService.unregisterDevice(user.id, token);\n      \n      if (success) {\n        res.json({ success: true, message: 'Device unregistered successfully' });\n      } else {\n        res.status(500).json({ success: false, message: 'Failed to unregister device' });\n      }\n    } catch (error) {\n      console.error('Error unregistering device:', error);\n      res.status(500).json({ success: false, message: 'Failed to unregister device' });\n    }\n  });\n\n  // Get user's registered devices\n  app.get('/api/mobile/devices', isAuthenticated, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const devices = PushNotificationService.getUserDevices(user.id);\n      \n      res.json({ \n        success: true, \n        devices: devices.map(device => ({\n          platform: device.platform,\n          token: device.token.substring(0, 20) + '...', // Masked token for security\n          isActive: device.isActive\n        }))\n      });\n    } catch (error) {\n      console.error('Error fetching devices:', error);\n      res.status(500).json({ success: false, message: 'Failed to fetch devices' });\n    }\n  });\n\n  // Send test notification (for development/testing)\n  app.post('/api/mobile/test-notification', isAuthenticated, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const validatedData = sendTestNotificationSchema.parse(req.body);\n      \n      const success = await PushNotificationService.sendNotification({\n        userId: user.id,\n        title: validatedData.title,\n        body: validatedData.message,\n        type: validatedData.type || 'order_status',\n        data: {\n          test: true,\n          timestamp: new Date().toISOString()\n        }\n      });\n      \n      if (success) {\n        res.json({ success: true, message: 'Test notification sent successfully' });\n      } else {\n        res.status(500).json({ success: false, message: 'No registered devices found' });\n      }\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ success: false, message: 'Validation error', errors: error.errors });\n      }\n      console.error('Error sending test notification:', error);\n      res.status(500).json({ success: false, message: 'Failed to send test notification' });\n    }\n  });\n\n  // Get notification history\n  app.get('/api/mobile/notifications', isAuthenticated, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const page = parseInt(req.query.page as string) || 1;\n      const limit = parseInt(req.query.limit as string) || 20;\n      const offset = (page - 1) * limit;\n      \n      const notifications = await storage.getUserNotifications(user.id, limit, offset);\n      \n      res.json({ \n        success: true, \n        notifications,\n        pagination: {\n          page,\n          limit,\n          hasMore: notifications.length === limit\n        }\n      });\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n      res.status(500).json({ success: false, message: 'Failed to fetch notifications' });\n    }\n  });\n\n  // Mark notification as read\n  app.post('/api/mobile/notifications/:id/read', isAuthenticated, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const notificationId = req.params.id;\n      \n      const success = await storage.markNotificationAsRead(notificationId, user.id);\n      \n      if (success) {\n        res.json({ success: true, message: 'Notification marked as read' });\n      } else {\n        res.status(404).json({ success: false, message: 'Notification not found' });\n      }\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n      res.status(500).json({ success: false, message: 'Failed to mark notification as read' });\n    }\n  });\n\n  // Get mobile app configuration\n  app.get('/api/mobile/config', async (req, res) => {\n    try {\n      res.json({\n        success: true,\n        config: {\n          appName: 'RentFlow',\n          version: '1.0.0',\n          features: {\n            pushNotifications: true,\n            realTimeUpdates: true,\n            otpVerification: true,\n            paymentIntegration: false, // Since Stripe was removed\n            darkMode: true\n          },\n          endpoints: {\n            api: '/api',\n            auth: '/api/auth',\n            mobile: '/api/mobile'\n          },\n          pushNotificationTypes: [\n            'rental_reminder',\n            'booking_confirmed', \n            'payment_due',\n            'rental_returned',\n            'otp_verification',\n            'order_status'\n          ]\n        }\n      });\n    } catch (error) {\n      console.error('Error fetching mobile config:', error);\n      res.status(500).json({ success: false, message: 'Failed to fetch configuration' });\n    }\n  });\n\n  // Health check for mobile app\n  app.get('/api/mobile/health', async (req, res) => {\n    try {\n      res.json({\n        success: true,\n        status: 'healthy',\n        timestamp: new Date().toISOString(),\n        services: {\n          database: 'connected',\n          notifications: 'active',\n          authentication: 'active'\n        }\n      });\n    } catch (error) {\n      console.error('Health check failed:', error);\n      res.status(503).json({ \n        success: false, \n        status: 'unhealthy',\n        timestamp: new Date().toISOString()\n      });\n    }\n  });\n}","size_bytes":7734},"server/pushNotifications.ts":{"content":"import { storage } from './storage';\n\n// Push notification service for mobile app companion\nexport interface PushNotificationData {\n  userId: string;\n  title: string;\n  body: string;\n  data?: Record<string, any>;\n  type: 'rental_reminder' | 'booking_confirmed' | 'payment_due' | 'rental_returned' | 'otp_verification' | 'order_status';\n}\n\nexport interface DeviceToken {\n  userId: string;\n  token: string;\n  platform: 'ios' | 'android' | 'web';\n  isActive: boolean;\n}\n\n// Store device tokens for push notifications\nconst deviceTokens = new Map<string, DeviceToken[]>();\n\nexport class PushNotificationService {\n  // Register a device token for push notifications\n  static async registerDevice(userId: string, token: string, platform: 'ios' | 'android' | 'web'): Promise<boolean> {\n    try {\n      const userTokens = deviceTokens.get(userId) || [];\n      \n      // Check if token already exists\n      const existingToken = userTokens.find(t => t.token === token);\n      if (existingToken) {\n        existingToken.isActive = true;\n        existingToken.platform = platform;\n        return true;\n      }\n      \n      // Add new token\n      userTokens.push({\n        userId,\n        token,\n        platform,\n        isActive: true\n      });\n      \n      deviceTokens.set(userId, userTokens);\n      \n      console.log(`📱 Device registered for user ${userId}: ${platform} - ${token.substring(0, 20)}...`);\n      return true;\n    } catch (error) {\n      console.error('Failed to register device:', error);\n      return false;\n    }\n  }\n\n  // Send push notification to user's devices\n  static async sendNotification(notification: PushNotificationData): Promise<boolean> {\n    try {\n      const userTokens = deviceTokens.get(notification.userId);\n      if (!userTokens || userTokens.length === 0) {\n        console.log(`📱 No devices registered for user ${notification.userId}`);\n        return false;\n      }\n\n      const activeTokens = userTokens.filter(token => token.isActive);\n      if (activeTokens.length === 0) {\n        console.log(`📱 No active devices for user ${notification.userId}`);\n        return false;\n      }\n\n      // Simulate push notification sending (in production, use FCM, APNS, etc.)\n      for (const token of activeTokens) {\n        await this.sendToDevice(token, notification);\n      }\n\n      // Store notification in database for history\n      await this.storeNotification(notification);\n\n      return true;\n    } catch (error) {\n      console.error('Failed to send push notification:', error);\n      return false;\n    }\n  }\n\n  // Send to specific device (simulated)\n  private static async sendToDevice(device: DeviceToken, notification: PushNotificationData): Promise<void> {\n    const platformIcon = device.platform === 'ios' ? '📱' : device.platform === 'android' ? '🤖' : '💻';\n    \n    console.log(`\\n${platformIcon} PUSH NOTIFICATION ${platformIcon}`);\n    console.log('═══════════════════════════════════════');\n    console.log(`📮 To: ${device.platform.toUpperCase()} Device`);\n    console.log(`🔗 Token: ${device.token.substring(0, 20)}...`);\n    console.log(`📋 Title: ${notification.title}`);\n    console.log(`📄 Message: ${notification.body}`);\n    console.log(`🏷️  Type: ${notification.type}`);\n    if (notification.data) {\n      console.log(`📊 Data: ${JSON.stringify(notification.data, null, 2)}`);\n    }\n    console.log('═══════════════════════════════════════\\n');\n\n    // In production, you would use:\n    // - Firebase Cloud Messaging (FCM) for Android\n    // - Apple Push Notification Service (APNS) for iOS\n    // - Web Push API for web browsers\n  }\n\n  // Store notification in database\n  private static async storeNotification(notification: PushNotificationData): Promise<void> {\n    try {\n      await storage.createNotification({\n        userId: notification.userId,\n        title: notification.title,\n        message: notification.body,\n        type: notification.type,\n        data: notification.data ? JSON.stringify(notification.data) : null,\n        isRead: false\n      });\n    } catch (error) {\n      console.error('Failed to store notification:', error);\n    }\n  }\n\n  // Get all devices for a user\n  static getUserDevices(userId: string): DeviceToken[] {\n    return deviceTokens.get(userId) || [];\n  }\n\n  // Remove device token\n  static async unregisterDevice(userId: string, token: string): Promise<boolean> {\n    try {\n      const userTokens = deviceTokens.get(userId);\n      if (!userTokens) return false;\n\n      const tokenIndex = userTokens.findIndex(t => t.token === token);\n      if (tokenIndex === -1) return false;\n\n      userTokens[tokenIndex].isActive = false;\n      console.log(`📱 Device unregistered for user ${userId}`);\n      return true;\n    } catch (error) {\n      console.error('Failed to unregister device:', error);\n      return false;\n    }\n  }\n\n  // Send rental reminders\n  static async sendRentalReminder(userId: string, productName: string, dueDate: string): Promise<void> {\n    await this.sendNotification({\n      userId,\n      title: 'Rental Due Soon',\n      body: `Your rental \"${productName}\" is due on ${dueDate}. Please return it on time to avoid late fees.`,\n      type: 'rental_reminder',\n      data: {\n        productName,\n        dueDate,\n        action: 'view_rental'\n      }\n    });\n  }\n\n  // Send booking confirmation\n  static async sendBookingConfirmation(userId: string, productName: string, bookingId: string): Promise<void> {\n    await this.sendNotification({\n      userId,\n      title: 'Booking Confirmed',\n      body: `Your booking for \"${productName}\" has been confirmed. Check your orders for details.`,\n      type: 'booking_confirmed',\n      data: {\n        productName,\n        bookingId,\n        action: 'view_booking'\n      }\n    });\n  }\n\n  // Send payment due notification\n  static async sendPaymentDue(userId: string, amount: string, invoiceId: string): Promise<void> {\n    await this.sendNotification({\n      userId,\n      title: 'Payment Due',\n      body: `You have a payment of $${amount} due. Tap to pay now.`,\n      type: 'payment_due',\n      data: {\n        amount,\n        invoiceId,\n        action: 'pay_invoice'\n      }\n    });\n  }\n\n  // Send OTP notification\n  static async sendOtpNotification(userId: string, otp: string, purpose: string): Promise<void> {\n    await this.sendNotification({\n      userId,\n      title: 'Verification Code',\n      body: `Your RentFlow verification code is: ${otp}`,\n      type: 'otp_verification',\n      data: {\n        otp,\n        purpose,\n        action: 'verify_otp'\n      }\n    });\n  }\n\n  // Send order status update\n  static async sendOrderStatusUpdate(userId: string, orderId: string, status: string): Promise<void> {\n    const statusMessages = {\n      confirmed: 'Your order has been confirmed and is being processed.',\n      picked_up: 'Your rental items have been picked up. Enjoy!',\n      returned: 'Thank you for returning your rental items.',\n      cancelled: 'Your order has been cancelled.'\n    };\n\n    await this.sendNotification({\n      userId,\n      title: 'Order Update',\n      body: statusMessages[status as keyof typeof statusMessages] || `Your order status has been updated to: ${status}`,\n      type: 'order_status',\n      data: {\n        orderId,\n        status,\n        action: 'view_order'\n      }\n    });\n  }\n}","size_bytes":7464},"scripts/init-db.ts":{"content":"#!/usr/bin/env tsx\n\nimport { db } from \"../server/db\";\nimport { sql } from \"drizzle-orm\";\nimport { users, categories, products } from \"../shared/schema\";\nimport bcrypt from \"bcryptjs\";\n\nasync function initDatabase() {\n  console.log(\"Initializing database...\");\n  \n  try {\n    // Create tables if they don't exist\n    await db.execute(sql`\n      CREATE TABLE IF NOT EXISTS sessions (\n        sid varchar(50) PRIMARY KEY,\n        sess jsonb NOT NULL,\n        expire timestamp NOT NULL\n      )\n    `);\n    \n    await db.execute(sql`CREATE INDEX IF NOT EXISTS \"IDX_session_expire\" ON sessions (expire)`);\n    \n    console.log(\"Tables created successfully!\");\n\n    // Create admin user if doesn't exist\n    const adminExists = await db.select().from(users).where(sql`email = 'admin@rentflow.com'`).limit(1);\n    \n    if (adminExists.length === 0) {\n      const hashedPassword = await bcrypt.hash('admin123', 12);\n      \n      await db.insert(users).values({\n        email: 'admin@rentflow.com',\n        password: hashedPassword,\n        name: 'Admin User',\n        role: 'admin'\n      });\n      \n      console.log(\"Admin user created! Login: admin@rentflow.com / admin123\");\n    } else {\n      console.log(\"Admin user already exists\");\n    }\n\n    // Create sample categories\n    const categoryExists = await db.select().from(categories).limit(1);\n    if (categoryExists.length === 0) {\n      await db.insert(categories).values([\n        {\n          name: \"Construction Equipment\",\n          description: \"Heavy machinery and construction tools\"\n        },\n        {\n          name: \"Power Tools\",\n          description: \"Electric and battery-powered tools\"\n        },\n        {\n          name: \"Event Equipment\",\n          description: \"Tables, chairs, tents, and event supplies\"\n        },\n        {\n          name: \"Outdoor Equipment\",\n          description: \"Camping, hiking, and outdoor activity gear\"\n        },\n        {\n          name: \"Photography & Video\",\n          description: \"Professional cameras, lighting, and video equipment\"\n        },\n        {\n          name: \"Kitchen Appliances\",\n          description: \"Commercial and specialty cooking equipment\"\n        },\n        {\n          name: \"Sports Equipment\",\n          description: \"Athletic gear and recreational sports equipment\"\n        },\n        {\n          name: \"Audio & Music\",\n          description: \"Sound systems, instruments, and audio equipment\"\n        },\n        {\n          name: \"Office Equipment\",\n          description: \"Printers, projectors, and business machinery\"\n        },\n        {\n          name: \"Gaming & Entertainment\",\n          description: \"Gaming consoles, arcade machines, and party equipment\"\n        },\n        {\n          name: \"Home Appliances\",\n          description: \"Household appliances and cleaning equipment\"\n        },\n        {\n          name: \"Transportation\",\n          description: \"Bikes, scooters, and mobility equipment\"\n        },\n        {\n          name: \"Medical Equipment\",\n          description: \"Healthcare and wellness equipment\"\n        },\n        {\n          name: \"Educational Equipment\",\n          description: \"Teaching aids and educational technology\"\n        },\n        {\n          name: \"Automotive Tools\",\n          description: \"Car maintenance and automotive repair equipment\"\n        },\n        {\n          name: \"Party & Celebration\",\n          description: \"Party decorations, inflatables, and celebration equipment\"\n        },\n        {\n          name: \"Fitness Equipment\",\n          description: \"Exercise machines and fitness accessories\"\n        },\n        {\n          name: \"Computer & Tech\",\n          description: \"Laptops, tablets, and technology equipment\"\n        }\n      ]);\n      \n      console.log(\"Sample categories created!\");\n    }\n\n    // Create sample products\n    const productExists = await db.select().from(products).limit(1);\n    if (productExists.length === 0) {\n      const categoriesData = await db.select().from(categories);\n      \n      const productData = [\n        // Construction Equipment\n        {\n          name: \"Concrete Mixer\",\n          description: \"Professional concrete mixer for construction projects\",\n          categoryId: categoriesData.find(c => c.name === \"Construction Equipment\")?.id,\n          dailyRate: \"150.00\",\n          weeklyRate: \"900.00\",\n          monthlyRate: \"3200.00\",\n          securityDeposit: \"500.00\",\n          totalQuantity: 3,\n          availableQuantity: 3\n        },\n        {\n          name: \"Excavator\",\n          description: \"Mini excavator for digging and earthmoving\",\n          categoryId: categoriesData.find(c => c.name === \"Construction Equipment\")?.id,\n          dailyRate: \"350.00\",\n          weeklyRate: \"2100.00\",\n          monthlyRate: \"7500.00\",\n          securityDeposit: \"2000.00\",\n          totalQuantity: 2,\n          availableQuantity: 2\n        },\n        // Power Tools\n        {\n          name: \"Drill Press\",\n          description: \"Heavy-duty drill press for precision drilling\",\n          categoryId: categoriesData.find(c => c.name === \"Power Tools\")?.id,\n          dailyRate: \"45.00\",\n          weeklyRate: \"250.00\",\n          monthlyRate: \"800.00\",\n          securityDeposit: \"200.00\",\n          totalQuantity: 2,\n          availableQuantity: 2\n        },\n        {\n          name: \"Circular Saw\",\n          description: \"Professional circular saw with laser guide\",\n          categoryId: categoriesData.find(c => c.name === \"Power Tools\")?.id,\n          dailyRate: \"35.00\",\n          weeklyRate: \"200.00\",\n          monthlyRate: \"650.00\",\n          securityDeposit: \"150.00\",\n          totalQuantity: 5,\n          availableQuantity: 5\n        },\n        // Event Equipment\n        {\n          name: \"Round Tables (10-seat)\",\n          description: \"Professional round tables for events\",\n          categoryId: categoriesData.find(c => c.name === \"Event Equipment\")?.id,\n          dailyRate: \"25.00\",\n          weeklyRate: \"120.00\",\n          monthlyRate: \"400.00\",\n          securityDeposit: \"100.00\",\n          totalQuantity: 15,\n          availableQuantity: 15\n        },\n        {\n          name: \"Wedding Arch\",\n          description: \"Elegant white wedding arch with floral attachments\",\n          categoryId: categoriesData.find(c => c.name === \"Event Equipment\")?.id,\n          dailyRate: \"75.00\",\n          weeklyRate: \"400.00\",\n          monthlyRate: \"1200.00\",\n          securityDeposit: \"300.00\",\n          totalQuantity: 3,\n          availableQuantity: 3\n        },\n        // Outdoor Equipment\n        {\n          name: \"Camping Tents\",\n          description: \"4-person waterproof camping tents\",\n          categoryId: categoriesData.find(c => c.name === \"Outdoor Equipment\")?.id,\n          dailyRate: \"30.00\",\n          weeklyRate: \"180.00\",\n          monthlyRate: \"600.00\",\n          securityDeposit: \"150.00\",\n          totalQuantity: 8,\n          availableQuantity: 8\n        },\n        {\n          name: \"Kayaks\",\n          description: \"Single-person recreational kayaks with paddles\",\n          categoryId: categoriesData.find(c => c.name === \"Outdoor Equipment\")?.id,\n          dailyRate: \"50.00\",\n          weeklyRate: \"280.00\",\n          monthlyRate: \"900.00\",\n          securityDeposit: \"200.00\",\n          totalQuantity: 6,\n          availableQuantity: 6\n        },\n        // Photography & Video\n        {\n          name: \"DSLR Camera Kit\",\n          description: \"Professional DSLR with lenses and accessories\",\n          categoryId: categoriesData.find(c => c.name === \"Photography & Video\")?.id,\n          dailyRate: \"85.00\",\n          weeklyRate: \"500.00\",\n          monthlyRate: \"1800.00\",\n          securityDeposit: \"1200.00\",\n          totalQuantity: 4,\n          availableQuantity: 4\n        },\n        {\n          name: \"Video Lighting Kit\",\n          description: \"Professional 3-point lighting setup for video production\",\n          categoryId: categoriesData.find(c => c.name === \"Photography & Video\")?.id,\n          dailyRate: \"60.00\",\n          weeklyRate: \"350.00\",\n          monthlyRate: \"1200.00\",\n          securityDeposit: \"400.00\",\n          totalQuantity: 3,\n          availableQuantity: 3\n        },\n        // Kitchen Appliances\n        {\n          name: \"Commercial Stand Mixer\",\n          description: \"Heavy-duty commercial stand mixer for large batches\",\n          categoryId: categoriesData.find(c => c.name === \"Kitchen Appliances\")?.id,\n          dailyRate: \"45.00\",\n          weeklyRate: \"250.00\",\n          monthlyRate: \"800.00\",\n          securityDeposit: \"300.00\",\n          totalQuantity: 2,\n          availableQuantity: 2\n        },\n        {\n          name: \"Espresso Machine\",\n          description: \"Professional espresso machine with milk steamer\",\n          categoryId: categoriesData.find(c => c.name === \"Kitchen Appliances\")?.id,\n          dailyRate: \"95.00\",\n          weeklyRate: \"550.00\",\n          monthlyRate: \"1900.00\",\n          securityDeposit: \"800.00\",\n          totalQuantity: 2,\n          availableQuantity: 2\n        },\n        // Sports Equipment\n        {\n          name: \"Basketball Hoop System\",\n          description: \"Portable basketball hoop with adjustable height\",\n          categoryId: categoriesData.find(c => c.name === \"Sports Equipment\")?.id,\n          dailyRate: \"40.00\",\n          weeklyRate: \"220.00\",\n          monthlyRate: \"700.00\",\n          securityDeposit: \"250.00\",\n          totalQuantity: 3,\n          availableQuantity: 3\n        },\n        {\n          name: \"Golf Cart\",\n          description: \"Electric golf cart for 2 passengers\",\n          categoryId: categoriesData.find(c => c.name === \"Sports Equipment\")?.id,\n          dailyRate: \"120.00\",\n          weeklyRate: \"700.00\",\n          monthlyRate: \"2400.00\",\n          securityDeposit: \"600.00\",\n          totalQuantity: 2,\n          availableQuantity: 2\n        },\n        // Audio & Music\n        {\n          name: \"PA Sound System\",\n          description: \"Complete PA system with speakers and microphones\",\n          categoryId: categoriesData.find(c => c.name === \"Audio & Music\")?.id,\n          dailyRate: \"80.00\",\n          weeklyRate: \"450.00\",\n          monthlyRate: \"1500.00\",\n          securityDeposit: \"500.00\",\n          totalQuantity: 4,\n          availableQuantity: 4\n        },\n        {\n          name: \"Electric Guitar\",\n          description: \"Fender electric guitar with amplifier\",\n          categoryId: categoriesData.find(c => c.name === \"Audio & Music\")?.id,\n          dailyRate: \"35.00\",\n          weeklyRate: \"200.00\",\n          monthlyRate: \"650.00\",\n          securityDeposit: \"400.00\",\n          totalQuantity: 3,\n          availableQuantity: 3\n        },\n        // Office Equipment\n        {\n          name: \"Laser Projector\",\n          description: \"4K laser projector for presentations and events\",\n          categoryId: categoriesData.find(c => c.name === \"Office Equipment\")?.id,\n          dailyRate: \"75.00\",\n          weeklyRate: \"400.00\",\n          monthlyRate: \"1300.00\",\n          securityDeposit: \"800.00\",\n          totalQuantity: 3,\n          availableQuantity: 3\n        },\n        {\n          name: \"Industrial Printer\",\n          description: \"High-speed color laser printer\",\n          categoryId: categoriesData.find(c => c.name === \"Office Equipment\")?.id,\n          dailyRate: \"55.00\",\n          weeklyRate: \"300.00\",\n          monthlyRate: \"1000.00\",\n          securityDeposit: \"400.00\",\n          totalQuantity: 2,\n          availableQuantity: 2\n        },\n        // Gaming & Entertainment\n        {\n          name: \"Gaming Console Bundle\",\n          description: \"PlayStation 5 with controllers and popular games\",\n          categoryId: categoriesData.find(c => c.name === \"Gaming & Entertainment\")?.id,\n          dailyRate: \"45.00\",\n          weeklyRate: \"250.00\",\n          monthlyRate: \"800.00\",\n          securityDeposit: \"600.00\",\n          totalQuantity: 4,\n          availableQuantity: 4\n        },\n        {\n          name: \"Arcade Machine\",\n          description: \"Classic arcade cabinet with multiple games\",\n          categoryId: categoriesData.find(c => c.name === \"Gaming & Entertainment\")?.id,\n          dailyRate: \"100.00\",\n          weeklyRate: \"600.00\",\n          monthlyRate: \"2000.00\",\n          securityDeposit: \"800.00\",\n          totalQuantity: 2,\n          availableQuantity: 2\n        },\n        // Home Appliances\n        {\n          name: \"Pressure Washer\",\n          description: \"High-pressure washer for cleaning driveways and homes\",\n          categoryId: categoriesData.find(c => c.name === \"Home Appliances\")?.id,\n          dailyRate: \"55.00\",\n          weeklyRate: \"300.00\",\n          monthlyRate: \"950.00\",\n          securityDeposit: \"200.00\",\n          totalQuantity: 4,\n          availableQuantity: 4\n        },\n        {\n          name: \"Steam Cleaner\",\n          description: \"Professional steam cleaner for carpets and upholstery\",\n          categoryId: categoriesData.find(c => c.name === \"Home Appliances\")?.id,\n          dailyRate: \"40.00\",\n          weeklyRate: \"220.00\",\n          monthlyRate: \"700.00\",\n          securityDeposit: \"150.00\",\n          totalQuantity: 3,\n          availableQuantity: 3\n        },\n        // Transportation\n        {\n          name: \"Electric Bike\",\n          description: \"Electric mountain bike with long-range battery\",\n          categoryId: categoriesData.find(c => c.name === \"Transportation\")?.id,\n          dailyRate: \"65.00\",\n          weeklyRate: \"350.00\",\n          monthlyRate: \"1200.00\",\n          securityDeposit: \"500.00\",\n          totalQuantity: 6,\n          availableQuantity: 6\n        },\n        {\n          name: \"Electric Scooter\",\n          description: \"High-speed electric scooter for urban commuting\",\n          categoryId: categoriesData.find(c => c.name === \"Transportation\")?.id,\n          dailyRate: \"35.00\",\n          weeklyRate: \"200.00\",\n          monthlyRate: \"650.00\",\n          securityDeposit: \"300.00\",\n          totalQuantity: 8,\n          availableQuantity: 8\n        },\n        // Medical Equipment\n        {\n          name: \"Wheelchair\",\n          description: \"Lightweight folding wheelchair\",\n          categoryId: categoriesData.find(c => c.name === \"Medical Equipment\")?.id,\n          dailyRate: \"25.00\",\n          weeklyRate: \"140.00\",\n          monthlyRate: \"450.00\",\n          securityDeposit: \"200.00\",\n          totalQuantity: 4,\n          availableQuantity: 4\n        },\n        {\n          name: \"Hospital Bed\",\n          description: \"Adjustable hospital bed with side rails\",\n          categoryId: categoriesData.find(c => c.name === \"Medical Equipment\")?.id,\n          dailyRate: \"45.00\",\n          weeklyRate: \"250.00\",\n          monthlyRate: \"800.00\",\n          securityDeposit: \"300.00\",\n          totalQuantity: 2,\n          availableQuantity: 2\n        },\n        // Educational Equipment\n        {\n          name: \"Interactive Whiteboard\",\n          description: \"Smart interactive whiteboard for classrooms\",\n          categoryId: categoriesData.find(c => c.name === \"Educational Equipment\")?.id,\n          dailyRate: \"60.00\",\n          weeklyRate: \"350.00\",\n          monthlyRate: \"1200.00\",\n          securityDeposit: \"600.00\",\n          totalQuantity: 3,\n          availableQuantity: 3\n        },\n        {\n          name: \"Microscope Set\",\n          description: \"Professional microscopes for science education\",\n          categoryId: categoriesData.find(c => c.name === \"Educational Equipment\")?.id,\n          dailyRate: \"40.00\",\n          weeklyRate: \"220.00\",\n          monthlyRate: \"700.00\",\n          securityDeposit: \"400.00\",\n          totalQuantity: 5,\n          availableQuantity: 5\n        },\n        // Automotive Tools\n        {\n          name: \"Car Jack & Tools\",\n          description: \"Hydraulic car jack with complete tool set\",\n          categoryId: categoriesData.find(c => c.name === \"Automotive Tools\")?.id,\n          dailyRate: \"30.00\",\n          weeklyRate: \"170.00\",\n          monthlyRate: \"550.00\",\n          securityDeposit: \"150.00\",\n          totalQuantity: 4,\n          availableQuantity: 4\n        },\n        {\n          name: \"OBD Scanner\",\n          description: \"Professional automotive diagnostic scanner\",\n          categoryId: categoriesData.find(c => c.name === \"Automotive Tools\")?.id,\n          dailyRate: \"45.00\",\n          weeklyRate: \"250.00\",\n          monthlyRate: \"800.00\",\n          securityDeposit: \"300.00\",\n          totalQuantity: 2,\n          availableQuantity: 2\n        },\n        // Party & Celebration\n        {\n          name: \"Bounce House\",\n          description: \"Large inflatable bounce house for kids parties\",\n          categoryId: categoriesData.find(c => c.name === \"Party & Celebration\")?.id,\n          dailyRate: \"120.00\",\n          weeklyRate: \"700.00\",\n          monthlyRate: \"2400.00\",\n          securityDeposit: \"400.00\",\n          totalQuantity: 3,\n          availableQuantity: 3\n        },\n        {\n          name: \"Photo Booth Props\",\n          description: \"Complete photo booth setup with props and backdrop\",\n          categoryId: categoriesData.find(c => c.name === \"Party & Celebration\")?.id,\n          dailyRate: \"65.00\",\n          weeklyRate: \"350.00\",\n          monthlyRate: \"1200.00\",\n          securityDeposit: \"200.00\",\n          totalQuantity: 2,\n          availableQuantity: 2\n        },\n        // Fitness Equipment\n        {\n          name: \"Treadmill\",\n          description: \"Commercial-grade treadmill with multiple programs\",\n          categoryId: categoriesData.find(c => c.name === \"Fitness Equipment\")?.id,\n          dailyRate: \"85.00\",\n          weeklyRate: \"500.00\",\n          monthlyRate: \"1700.00\",\n          securityDeposit: \"600.00\",\n          totalQuantity: 3,\n          availableQuantity: 3\n        },\n        {\n          name: \"Weight Set\",\n          description: \"Complete weight set with barbell and dumbbells\",\n          categoryId: categoriesData.find(c => c.name === \"Fitness Equipment\")?.id,\n          dailyRate: \"45.00\",\n          weeklyRate: \"250.00\",\n          monthlyRate: \"800.00\",\n          securityDeposit: \"300.00\",\n          totalQuantity: 4,\n          availableQuantity: 4\n        },\n        // Computer & Tech\n        {\n          name: \"MacBook Pro\",\n          description: \"Latest MacBook Pro for professional work\",\n          categoryId: categoriesData.find(c => c.name === \"Computer & Tech\")?.id,\n          dailyRate: \"95.00\",\n          weeklyRate: \"550.00\",\n          monthlyRate: \"1900.00\",\n          securityDeposit: \"1500.00\",\n          totalQuantity: 5,\n          availableQuantity: 5\n        },\n        {\n          name: \"iPad Pro\",\n          description: \"iPad Pro with Apple Pencil for creative work\",\n          categoryId: categoriesData.find(c => c.name === \"Computer & Tech\")?.id,\n          dailyRate: \"55.00\",\n          weeklyRate: \"300.00\",\n          monthlyRate: \"1000.00\",\n          securityDeposit: \"800.00\",\n          totalQuantity: 6,\n          availableQuantity: 6\n        }\n      ];\n\n      await db.insert(products).values(productData);\n      \n      console.log(\"Sample products created!\");\n    }\n\n    console.log(\"Database initialization completed!\");\n    \n  } catch (error) {\n    console.error(\"Database initialization failed:\", error);\n    process.exit(1);\n  }\n}\n\n// Run if called directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  initDatabase()\n    .then(() => process.exit(0))\n    .catch((error) => {\n      console.error(\"Error:\", error);\n      process.exit(1);\n    });\n}\n\nexport { initDatabase };","size_bytes":19559},"server/otpService.ts":{"content":"import { storage } from './storage';\nimport { sendWebhookEmail, generateSimpleOtpText } from \"./webhookEmail\";\nimport { PushNotificationService } from \"./pushNotifications\";\n\n// Generate a random 4-digit OTP\nexport function generateOtp(): string {\n  return Math.floor(1000 + Math.random() * 9000).toString();\n}\n\n// Send OTP via email notification system\nexport async function sendOtpEmail(email: string, otp: string, purpose: 'login' | 'signup'): Promise<boolean> {\n  try {\n    const subject = `RentFlow Verification Code: ${otp}`;\n    const text = generateSimpleOtpText(email, otp, purpose);\n    \n    const emailSent = await sendWebhookEmail(email, subject, text);\n    \n    if (!emailSent) {\n      // Fallback: simple console log\n      console.log(`\\n🔐 OTP for ${email} (${purpose}): ${otp}\\n`);\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Failed to send OTP notification:', error);\n    // Fallback: log to console\n    console.log(`\\n🔐 OTP for ${email} (${purpose}): ${otp}\\n`);\n    return true; // Still return true to not block the flow\n  }\n}\n\n// Create and send OTP\nexport async function createAndSendOtp(userId: string, email: string, purpose: 'login' | 'signup'): Promise<boolean> {\n  try {\n    // Clean up expired OTPs\n    await storage.cleanupExpiredOtps();\n    \n    // Generate new OTP\n    const otp = generateOtp();\n    const expiresAt = new Date(Date.now() + 5 * 60 * 1000); // 5 minutes expiry\n    \n    // Save OTP to database\n    await storage.createOtp({\n      userId,\n      otp,\n      purpose,\n      expiresAt,\n      isUsed: false\n    });\n    \n    // Send OTP via email and push notification\n    const emailSent = await sendOtpEmail(email, otp, purpose);\n    \n    // Also send push notification if user has registered devices\n    try {\n      await PushNotificationService.sendOtpNotification(userId, otp, purpose);\n    } catch (error) {\n      console.log('Push notification failed (user may not have mobile app):', error);\n      // Don't fail the flow if push notification fails\n    }\n    \n    return emailSent;\n  } catch (error) {\n    console.error('Error creating/sending OTP:', error);\n    return false;\n  }\n}\n\n// Verify OTP\nexport async function verifyUserOtp(userId: string, otp: string, purpose: string): Promise<boolean> {\n  try {\n    const isValid = await storage.verifyOtp(userId, otp, purpose);\n    \n    if (isValid && purpose === 'signup') {\n      // Mark user as verified for signup\n      await storage.updateUser(userId, { isVerified: true });\n    }\n    \n    return isValid;\n  } catch (error) {\n    console.error('Error verifying OTP:', error);\n    return false;\n  }\n}","size_bytes":2625},"server/simpleEmail.ts":{"content":"import nodemailer from 'nodemailer';\n\n// Simple email configuration that works without API keys\n// Uses a test SMTP server for development\nexport async function sendSimpleEmail(to: string, subject: string, text: string, html?: string): Promise<boolean> {\n  try {\n    // Create a test account using Ethereal Email (for development)\n    const testAccount = await nodemailer.createTestAccount();\n    \n    // Create transporter using the test account\n    const transporter = nodemailer.createTransport({\n      host: 'smtp.ethereal.email',\n      port: 587,\n      secure: false,\n      auth: {\n        user: testAccount.user,\n        pass: testAccount.pass,\n      },\n    });\n\n    // Send mail\n    const info = await transporter.sendMail({\n      from: '\"RentFlow Support\" <support@rentflow.com>',\n      to: to,\n      subject: subject,\n      text: text,\n      html: html || text,\n    });\n\n    console.log('📧 Email sent to:', to);\n    console.log('📧 Preview URL:', nodemailer.getTestMessageUrl(info));\n    console.log('📧 Subject:', subject);\n    console.log('📧 Content:', text);\n    \n    return true;\n  } catch (error) {\n    console.error('❌ Email sending failed:', error);\n    // For development, we'll still log the email content\n    console.log('📧 Email would have been sent to:', to);\n    console.log('📧 Subject:', subject);\n    console.log('📧 Content:', text);\n    return true; // Return true so the flow continues\n  }\n}\n\nexport function generateOtpEmail(email: string, otp: string, purpose: 'login' | 'signup'): { subject: string; text: string; html: string } {\n  const action = purpose === 'login' ? 'sign in to' : 'verify your account on';\n  const subject = `Your RentFlow verification code: ${otp}`;\n  \n  const text = `\nHello,\n\nYou requested to ${action} RentFlow. Your verification code is:\n\n${otp}\n\nThis code will expire in 5 minutes.\n\nIf you didn't request this, please ignore this email.\n\nBest regards,\nRentFlow Team\n  `;\n\n  const html = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n      <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; text-align: center; border-radius: 10px 10px 0 0;\">\n        <h1 style=\"color: white; margin: 0; font-size: 28px;\">RentFlow</h1>\n        <p style=\"color: #f0f0f0; margin: 10px 0 0 0;\">Rental Management System</p>\n      </div>\n      \n      <div style=\"background: white; padding: 40px; border: 1px solid #e0e0e0; border-radius: 0 0 10px 10px;\">\n        <h2 style=\"color: #333; margin-top: 0;\">Verification Code</h2>\n        <p style=\"color: #666; font-size: 16px;\">You requested to ${action} RentFlow. Your verification code is:</p>\n        \n        <div style=\"background: #f8f9fa; border: 2px solid #667eea; border-radius: 8px; padding: 20px; text-align: center; margin: 30px 0;\">\n          <div style=\"font-size: 32px; font-weight: bold; color: #667eea; letter-spacing: 8px; font-family: monospace;\">\n            ${otp}\n          </div>\n        </div>\n        \n        <p style=\"color: #666; font-size: 14px;\">This code will expire in <strong>5 minutes</strong>.</p>\n        <p style=\"color: #666; font-size: 14px;\">If you didn't request this, please ignore this email.</p>\n        \n        <hr style=\"border: none; border-top: 1px solid #e0e0e0; margin: 30px 0;\">\n        <p style=\"color: #999; font-size: 12px; text-align: center;\">\n          Best regards,<br>\n          <strong>RentFlow Team</strong>\n        </p>\n      </div>\n    </div>\n  `;\n\n  return { subject, text, html };\n}","size_bytes":3544},"server/webhookEmail.ts":{"content":"// Alternative email system using webhook.site for testing\nexport async function sendWebhookEmail(to: string, subject: string, text: string): Promise<boolean> {\n  try {\n    // Send email content to a webhook for testing/inspection\n    const webhookUrl = 'https://webhook.site/unique-id'; // User can replace with their own webhook\n    \n    const emailData = {\n      timestamp: new Date().toISOString(),\n      to: to,\n      subject: subject,\n      content: text,\n      type: 'otp_email'\n    };\n\n    console.log('\\n📧 EMAIL NOTIFICATION 📧');\n    console.log('═══════════════════════════════════════');\n    console.log(`📮 To: ${to}`);\n    console.log(`📋 Subject: ${subject}`);\n    console.log('📄 Content:');\n    console.log(text);\n    console.log('═══════════════════════════════════════');\n    console.log(`🔗 You can also check: ${webhookUrl}`);\n    console.log('');\n\n    // Try to send to webhook (optional - won't fail if webhook is down)\n    try {\n      await fetch(webhookUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(emailData)\n      });\n    } catch (e) {\n      // Webhook sending failed, but that's ok - we still show in console\n    }\n\n    return true;\n  } catch (error) {\n    console.error('Email notification failed:', error);\n    return false;\n  }\n}\n\nexport function generateSimpleOtpText(email: string, otp: string, purpose: 'login' | 'signup'): string {\n  const action = purpose === 'login' ? 'sign in to' : 'verify your account on';\n  \n  return `\n════════════════════════════════════════\n🔐 RENTFLOW VERIFICATION CODE\n════════════════════════════════════════\n\nHello!\n\nYou requested to ${action} RentFlow.\nYour verification code is:\n\n    >>> ${otp} <<<\n\n⏰ This code will expire in 5 minutes.\n\nIf you didn't request this, please ignore.\n\nBest regards,\nRentFlow Team\n════════════════════════════════════════\n  `;\n}","size_bytes":2309},"client/src/components/ui/mobile-companion.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { \n  Smartphone, \n  Bell, \n  BellRing, \n  Send, \n  Trash2, \n  CheckCircle,\n  AlertCircle,\n  Laptop,\n  Tablet\n} from \"lucide-react\";\n\ninterface MobileDevice {\n  platform: 'ios' | 'android' | 'web';\n  token: string;\n  isActive: boolean;\n}\n\ninterface Notification {\n  id: string;\n  title: string;\n  message: string;\n  type: string;\n  data?: any;\n  isRead: boolean;\n  createdAt: string;\n}\n\nexport function MobileCompanion() {\n  const [deviceToken, setDeviceToken] = useState('');\n  const [selectedPlatform, setSelectedPlatform] = useState<'ios' | 'android' | 'web'>('android');\n  const [testTitle, setTestTitle] = useState('Test Notification');\n  const [testMessage, setTestMessage] = useState('This is a test push notification from RentFlow!');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get registered devices\n  const { data: devicesData } = useQuery({\n    queryKey: ['/api/mobile/devices'],\n    queryFn: () => apiRequest('/api/mobile/devices')\n  });\n\n  // Get notification history\n  const { data: notificationsData } = useQuery({\n    queryKey: ['/api/mobile/notifications'],\n    queryFn: () => apiRequest('/api/mobile/notifications')\n  });\n\n  // Register device mutation\n  const registerDeviceMutation = useMutation({\n    mutationFn: async (data: { token: string; platform: 'ios' | 'android' | 'web' }) => {\n      return await apiRequest('/api/mobile/register-device', 'POST', {\n        token: data.token,\n        platform: data.platform,\n        deviceInfo: {\n          model: navigator.userAgent,\n          osVersion: navigator.platform,\n          appVersion: '1.0.0'\n        }\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Device Registered\",\n        description: \"Your device has been registered for push notifications\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/mobile/devices'] });\n      setDeviceToken('');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message || \"Failed to register device\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Send test notification mutation\n  const testNotificationMutation = useMutation({\n    mutationFn: async (data: { title: string; message: string }) => {\n      return await apiRequest('/api/mobile/test-notification', 'POST', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Test Sent\",\n        description: \"Test notification sent successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Send Failed\",\n        description: error.message || \"Failed to send test notification\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mark notification as read mutation\n  const markReadMutation = useMutation({\n    mutationFn: async (notificationId: string) => {\n      return await apiRequest(`/api/mobile/notifications/${notificationId}/read`, 'POST');\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/mobile/notifications'] });\n    }\n  });\n\n  const handleRegisterDevice = () => {\n    if (!deviceToken.trim()) {\n      toast({\n        title: \"Token Required\",\n        description: \"Please enter a device token\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    registerDeviceMutation.mutate({ token: deviceToken, platform: selectedPlatform });\n  };\n\n  const handleSendTest = () => {\n    if (!testTitle.trim() || !testMessage.trim()) {\n      toast({\n        title: \"Fields Required\",\n        description: \"Please enter both title and message\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    testNotificationMutation.mutate({ title: testTitle, message: testMessage });\n  };\n\n  const generateSampleToken = () => {\n    const sampleTokens = {\n      ios: 'aps_prod_' + Math.random().toString(36).substring(2, 15),\n      android: 'fcm_' + Math.random().toString(36).substring(2, 20),\n      web: 'web_push_' + Math.random().toString(36).substring(2, 18)\n    };\n    setDeviceToken(sampleTokens[selectedPlatform]);\n  };\n\n  const getPlatformIcon = (platform: string) => {\n    switch (platform) {\n      case 'ios': return <Smartphone className=\"h-4 w-4\" />;\n      case 'android': return <Tablet className=\"h-4 w-4\" />;\n      case 'web': return <Laptop className=\"h-4 w-4\" />;\n      default: return <Smartphone className=\"h-4 w-4\" />;\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString();\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center gap-3\">\n        <div className=\"flex items-center justify-center w-10 h-10 bg-blue-100 rounded-lg\">\n          <Smartphone className=\"h-6 w-6 text-blue-600\" />\n        </div>\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Mobile Companion</h2>\n          <p className=\"text-gray-600\">Manage push notifications and mobile app integration</p>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Device Registration */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Bell className=\"h-5 w-5\" />\n              Register Device\n            </CardTitle>\n            <CardDescription>\n              Register your mobile device to receive push notifications\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                Platform\n              </label>\n              <div className=\"flex gap-2\">\n                {(['ios', 'android', 'web'] as const).map((platform) => (\n                  <Button\n                    key={platform}\n                    variant={selectedPlatform === platform ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setSelectedPlatform(platform)}\n                    className=\"flex items-center gap-2\"\n                  >\n                    {getPlatformIcon(platform)}\n                    {platform.toUpperCase()}\n                  </Button>\n                ))}\n              </div>\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                Device Token\n              </label>\n              <div className=\"flex gap-2\">\n                <Input\n                  value={deviceToken}\n                  onChange={(e) => setDeviceToken(e.target.value)}\n                  placeholder={`Enter ${selectedPlatform} token...`}\n                  className=\"flex-1\"\n                />\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={generateSampleToken}\n                >\n                  Generate Sample\n                </Button>\n              </div>\n            </div>\n\n            <Button\n              onClick={handleRegisterDevice}\n              disabled={registerDeviceMutation.isPending}\n              className=\"w-full\"\n            >\n              {registerDeviceMutation.isPending ? \"Registering...\" : \"Register Device\"}\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Test Notifications */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Send className=\"h-5 w-5\" />\n              Test Notifications\n            </CardTitle>\n            <CardDescription>\n              Send a test push notification to your registered devices\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                Title\n              </label>\n              <Input\n                value={testTitle}\n                onChange={(e) => setTestTitle(e.target.value)}\n                placeholder=\"Notification title\"\n              />\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                Message\n              </label>\n              <Input\n                value={testMessage}\n                onChange={(e) => setTestMessage(e.target.value)}\n                placeholder=\"Notification message\"\n              />\n            </div>\n\n            <Button\n              onClick={handleSendTest}\n              disabled={testNotificationMutation.isPending}\n              className=\"w-full\"\n            >\n              {testNotificationMutation.isPending ? \"Sending...\" : \"Send Test Notification\"}\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Registered Devices */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Smartphone className=\"h-5 w-5\" />\n            Registered Devices\n          </CardTitle>\n          <CardDescription>\n            Your devices registered for push notifications\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {devicesData?.devices?.length > 0 ? (\n            <div className=\"space-y-3\">\n              {devicesData.devices.map((device: MobileDevice, index: number) => (\n                <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                  <div className=\"flex items-center gap-3\">\n                    {getPlatformIcon(device.platform)}\n                    <div>\n                      <p className=\"font-medium\">{device.platform.toUpperCase()}</p>\n                      <p className=\"text-sm text-gray-500\">{device.token}</p>\n                    </div>\n                  </div>\n                  <Badge variant={device.isActive ? \"default\" : \"secondary\"}>\n                    {device.isActive ? \"Active\" : \"Inactive\"}\n                  </Badge>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-8 text-gray-500\">\n              <Smartphone className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <p>No devices registered yet</p>\n              <p className=\"text-sm\">Register a device above to get started</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Notification History */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BellRing className=\"h-5 w-5\" />\n            Notification History\n          </CardTitle>\n          <CardDescription>\n            Your recent push notifications\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {notificationsData?.notifications?.length > 0 ? (\n            <div className=\"space-y-3\">\n              {notificationsData.notifications.map((notification: Notification) => (\n                <div key={notification.id} className=\"flex items-start justify-between p-3 border rounded-lg\">\n                  <div className=\"flex items-start gap-3 flex-1\">\n                    <div className=\"flex-shrink-0 mt-1\">\n                      {notification.isRead ? (\n                        <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                      ) : (\n                        <AlertCircle className=\"h-4 w-4 text-blue-500\" />\n                      )}\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium\">{notification.title}</p>\n                      <p className=\"text-sm text-gray-600\">{notification.message}</p>\n                      <div className=\"flex items-center gap-2 mt-2\">\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {notification.type}\n                        </Badge>\n                        <span className=\"text-xs text-gray-500\">\n                          {formatDate(notification.createdAt)}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  {!notification.isRead && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => markReadMutation.mutate(notification.id)}\n                    >\n                      Mark Read\n                    </Button>\n                  )}\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-8 text-gray-500\">\n              <Bell className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <p>No notifications yet</p>\n              <p className=\"text-sm\">Push notifications will appear here</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":13257},"client/src/pages/admin/mobile.tsx":{"content":"import { MobileCompanion } from \"@/components/ui/mobile-companion\";\nimport AdminLayout from \"@/components/layout/admin-layout\";\n\nexport default function AdminMobile() {\n  return (\n    <AdminLayout>\n      <div className=\"max-w-6xl mx-auto p-6\">\n        <MobileCompanion />\n      </div>\n    </AdminLayout>\n  );\n}","size_bytes":310},"client/src/pages/auth/otp-verification.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { InputOTP, InputOTPGroup, InputOTPSlot } from \"@/components/ui/input-otp\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\n\ninterface OtpVerificationProps {\n  userId: string;\n  email: string;\n  purpose: 'login' | 'signup';\n  onVerified: (user: any) => void;\n}\n\nexport function OtpVerification({ userId, email, purpose, onVerified }: OtpVerificationProps) {\n  const [otp, setOtp] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isResending, setIsResending] = useState(false);\n  const [timeLeft, setTimeLeft] = useState(300); // 5 minutes\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  // Countdown timer\n  useEffect(() => {\n    if (timeLeft > 0) {\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n      return () => clearTimeout(timer);\n    }\n  }, [timeLeft]);\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (otp.length !== 4) {\n      toast({\n        title: \"Invalid OTP\",\n        description: \"Please enter a 4-digit OTP\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n    try {\n      const result = await apiRequest('/api/auth/verify-otp', 'POST', {\n        userId,\n        otp,\n        purpose\n      });\n\n      if (result.isVerified) {\n        toast({\n          title: \"Verification Successful\",\n          description: result.message,\n        });\n        \n        onVerified(result);\n        \n        // Redirect based on purpose\n        if (purpose === 'login') {\n          if (result.role === 'admin') {\n            setLocation('/admin/dashboard');\n          } else {\n            setLocation('/customer/catalog');\n          }\n        } else {\n          setLocation('/auth/login');\n        }\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Verification Failed\",\n        description: error.message || \"Invalid OTP. Please try again.\",\n        variant: \"destructive\",\n      });\n      setOtp(\"\"); // Clear OTP on error\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleResendOtp = async () => {\n    setIsResending(true);\n    try {\n      await apiRequest('/api/auth/resend-otp', 'POST', {\n        userId,\n        purpose\n      });\n\n      toast({\n        title: \"OTP Resent\",\n        description: \"A new OTP has been sent to your email\",\n      });\n      \n      setTimeLeft(300); // Reset timer\n      setOtp(\"\"); // Clear current OTP\n    } catch (error: any) {\n      toast({\n        title: \"Resend Failed\",\n        description: error.message || \"Failed to resend OTP. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsResending(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 px-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-2xl font-bold\">Verify Your Account</CardTitle>\n          <CardDescription>\n            We've sent a 4-digit verification code to{' '}\n            <span className=\"font-medium text-gray-900\">{email}</span>\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-4\">\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"flex flex-col items-center space-y-2\">\n              <label htmlFor=\"otp\" className=\"text-sm font-medium text-gray-700\">\n                Enter verification code\n              </label>\n              <InputOTP\n                value={otp}\n                onChange={setOtp}\n                maxLength={4}\n                pattern=\"^[0-9]+$\"\n              >\n                <InputOTPGroup>\n                  <InputOTPSlot index={0} />\n                  <InputOTPSlot index={1} />\n                  <InputOTPSlot index={2} />\n                  <InputOTPSlot index={3} />\n                </InputOTPGroup>\n              </InputOTP>\n            </div>\n\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isSubmitting || otp.length !== 4}\n            >\n              {isSubmitting ? \"Verifying...\" : \"Verify OTP\"}\n            </Button>\n          </form>\n\n          <div className=\"text-center space-y-2\">\n            <p className=\"text-sm text-gray-600\">\n              Code expires in: <span className=\"font-mono text-red-600\">{formatTime(timeLeft)}</span>\n            </p>\n            \n            <div className=\"text-sm\">\n              <span className=\"text-gray-600\">Didn't receive the code? </span>\n              <Button\n                variant=\"link\"\n                onClick={handleResendOtp}\n                disabled={isResending || timeLeft > 240} // Allow resend after 1 minute\n                className=\"p-0 h-auto font-medium\"\n              >\n                {isResending ? \"Resending...\" : \"Resend OTP\"}\n              </Button>\n            </div>\n            \n            {timeLeft > 240 && (\n              <p className=\"text-xs text-gray-500\">\n                You can resend the code in {formatTime(timeLeft - 240)}\n              </p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5703},"client/src/pages/customer/mobile.tsx":{"content":"import { MobileCompanion } from \"@/components/ui/mobile-companion\";\nimport CustomerLayout from \"@/components/layout/customer-layout\";\n\nexport default function CustomerMobile() {\n  return (\n    <CustomerLayout>\n      <div className=\"max-w-6xl mx-auto p-6\">\n        <MobileCompanion />\n      </div>\n    </CustomerLayout>\n  );\n}","size_bytes":325}}}